
Test_Radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b64  08009b64  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009b64  08009b64  00019b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b6c  08009b6c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b6c  08009b6c  00019b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  20000060  08009bd4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08009bd4  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df9c  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f7a  00000000  00000000  0003e069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf8  00000000  00000000  00041fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001638  00000000  00000000  00043ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020933  00000000  00000000  00045318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c939  00000000  00000000  00065c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3cb4  00000000  00000000  00082584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ed0  00000000  00000000  00146238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	08009488 	.word	0x08009488

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	08009488 	.word	0x08009488

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4013      	ands	r3, r2
 800053e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000540:	68fb      	ldr	r3, [r7, #12]
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <HAL_TIM_PeriodElapsedCallback>:
void DioIrqHndlr(RadioIrqMasks_t radioIrq);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d14e      	bne.n	80005fa <HAL_TIM_PeriodElapsedCallback+0xae>
		mSEC++;
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000566:	801a      	strh	r2, [r3, #0]

		if (mSEC > 999) {
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000570:	d308      	bcc.n	8000584 <HAL_TIM_PeriodElapsedCallback+0x38>
			mSEC = 0;
 8000572:	4b25      	ldr	r3, [pc, #148]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000574:	2200      	movs	r2, #0
 8000576:	801a      	strh	r2, [r3, #0]
			sec++;
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000582:	701a      	strb	r2, [r3, #0]
		}

		if (sec > 0) {
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d00f      	beq.n	80005ac <HAL_TIM_PeriodElapsedCallback+0x60>
			if (sec % 5 == 0) {
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000592:	fba3 1302 	umull	r1, r3, r3, r2
 8000596:	0899      	lsrs	r1, r3, #2
 8000598:	460b      	mov	r3, r1
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	440b      	add	r3, r1
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d102      	bne.n	80005ac <HAL_TIM_PeriodElapsedCallback+0x60>
				TX_FLAG = 1;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
			}
		}

		if (sec > 59) {
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b3b      	cmp	r3, #59	; 0x3b
 80005b2:	d908      	bls.n	80005c6 <HAL_TIM_PeriodElapsedCallback+0x7a>
			sec = 0;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
			min++;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005c4:	701a      	strb	r2, [r3, #0]
		}

		if (min > 59) {
 80005c6:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b3b      	cmp	r3, #59	; 0x3b
 80005cc:	d908      	bls.n	80005e0 <HAL_TIM_PeriodElapsedCallback+0x94>
			min = 0;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
			hour++;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80005de:	701a      	strb	r2, [r3, #0]
		}

		if (hour > 23) {
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b17      	cmp	r3, #23
 80005e6:	d908      	bls.n	80005fa <HAL_TIM_PeriodElapsedCallback+0xae>
			hour = 0;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
			min = 0;
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
			sec = 0;
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	200000b8 	.word	0x200000b8
 8000608:	2000020a 	.word	0x2000020a
 800060c:	2000020c 	.word	0x2000020c
 8000610:	cccccccd 	.word	0xcccccccd
 8000614:	20000208 	.word	0x20000208
 8000618:	2000020d 	.word	0x2000020d
 800061c:	2000020e 	.word	0x2000020e

08000620 <delay_us>:

void delay_us(uint32_t us) {
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <delay_us+0x30>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000630:	e002      	b.n	8000638 <delay_us+0x18>
		delay_counter_disp++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <delay_us+0x30>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f6      	bhi.n	8000632 <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000104 	.word	0x20000104

08000654 <myPrintf>:

void myPrintf(const char *fmt, ...) {
 8000654:	b40f      	push	{r0, r1, r2, r3}
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	2164      	movs	r1, #100	; 0x64
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <myPrintf+0x40>)
 800066a:	f008 fa7d 	bl	8008b68 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800066e:	4809      	ldr	r0, [pc, #36]	; (8000694 <myPrintf+0x40>)
 8000670:	f000 f814 	bl	800069c <bufferSize>
 8000674:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	b29a      	uxth	r2, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	4905      	ldr	r1, [pc, #20]	; (8000694 <myPrintf+0x40>)
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <myPrintf+0x44>)
 8000682:	f003 ff27 	bl	80044d4 <HAL_UART_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000690:	b004      	add	sp, #16
 8000692:	4770      	bx	lr
 8000694:	20000210 	.word	0x20000210
 8000698:	20000150 	.word	0x20000150

0800069c <bufferSize>:

int bufferSize(char *buffer) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006a8:	e002      	b.n	80006b0 <bufferSize+0x14>
		i++;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	607a      	str	r2, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1f6      	bne.n	80006aa <bufferSize+0xe>
	return i;
 80006bc:	68fb      	ldr	r3, [r7, #12]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <calc_CRC>:

uint16_t calc_CRC(const uint8_t *data, uint8_t data_length) {
 80006c8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80006cc:	b08b      	sub	sp, #44	; 0x2c
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	460b      	mov	r3, r1
 80006d4:	70fb      	strb	r3, [r7, #3]
 80006d6:	466b      	mov	r3, sp
 80006d8:	4618      	mov	r0, r3

	uint16_t crcReg = 0xFFFF;	// Initialize the CRC register with 0xFFFF
 80006da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006de:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t calc = 0x8408;		// Polynomial for CRC-16
 80006e0:	f248 4308 	movw	r3, #33800	; 0x8408
 80006e4:	837b      	strh	r3, [r7, #26]
	uint16_t w;
	int i, j;
	uint8_t calc_data[DATA_SIZE];  // in 16 bytes, 14 are data bytes
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <calc_CRC+0xfc>)
 80006e8:	7819      	ldrb	r1, [r3, #0]
 80006ea:	460b      	mov	r3, r1
 80006ec:	3b01      	subs	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	b2cb      	uxtb	r3, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	4698      	mov	r8, r3
 80006f6:	4691      	mov	r9, r2
 80006f8:	f04f 0200 	mov.w	r2, #0
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000704:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000708:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800070c:	b2cb      	uxtb	r3, r1
 800070e:	2200      	movs	r2, #0
 8000710:	461c      	mov	r4, r3
 8000712:	4615      	mov	r5, r2
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	00eb      	lsls	r3, r5, #3
 800071e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000722:	00e2      	lsls	r2, r4, #3
 8000724:	460b      	mov	r3, r1
 8000726:	3307      	adds	r3, #7
 8000728:	08db      	lsrs	r3, r3, #3
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	ebad 0d03 	sub.w	sp, sp, r3
 8000730:	466b      	mov	r3, sp
 8000732:	3300      	adds	r3, #0
 8000734:	613b      	str	r3, [r7, #16]

	// Copy data into calc_data
	for (i = 0; i < data_length; i++) {
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
 800073a:	e034      	b.n	80007a6 <calc_CRC+0xde>
		calc_data[i] = data[i];
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	7819      	ldrb	r1, [r3, #0]
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
		// Iterate over each byte of data
		for (j = 0; j < 8; j++) {
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
 8000752:	e022      	b.n	800079a <calc_CRC+0xd2>
			w = (crcReg ^ calc_data[i]) & 0x0001; // XOR the LSB of crcReg with the LSB of calc_data
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000760:	4053      	eors	r3, r2
 8000762:	b29b      	uxth	r3, r3
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	81fb      	strh	r3, [r7, #14]
			crcReg = crcReg >> 1;			// Right-shift the crcReg by 1 bit
 800076a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (w == 1) {
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d103      	bne.n	800077e <calc_CRC+0xb6>
				crcReg = crcReg ^ calc;	// If w is 1, XOR the crcReg with the polynomial
 8000776:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000778:	8b7b      	ldrh	r3, [r7, #26]
 800077a:	4053      	eors	r3, r2
 800077c:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			calc_data[i] = calc_data[i] >> 1;// Right-shift the data byte by 1 bit
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	4413      	add	r3, r2
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	4413      	add	r3, r2
 8000790:	460a      	mov	r2, r1
 8000792:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	3301      	adds	r3, #1
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	2b07      	cmp	r3, #7
 800079e:	ddd9      	ble.n	8000754 <calc_CRC+0x8c>
	for (i = 0; i < data_length; i++) {
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	3301      	adds	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	6a3a      	ldr	r2, [r7, #32]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	dbc6      	blt.n	800073c <calc_CRC+0x74>
		}
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
 80007ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b0:	43db      	mvns	r3, r3
 80007b2:	84fb      	strh	r3, [r7, #38]	; 0x26
	return crcReg;
 80007b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b6:	4685      	mov	sp, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	372c      	adds	r7, #44	; 0x2c
 80007bc:	46bd      	mov	sp, r7
 80007be:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80007c2:	4770      	bx	lr
 80007c4:	20000001 	.word	0x20000001

080007c8 <radioTxData>:

void radioTxData() {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	tx_cmd[0] = 0x42;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <radioTxData+0x90>)
 80007ce:	2242      	movs	r2, #66	; 0x42
 80007d0:	701a      	strb	r2, [r3, #0]
	tx_cmd[1] = 0x4D;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <radioTxData+0x90>)
 80007d4:	224d      	movs	r2, #77	; 0x4d
 80007d6:	705a      	strb	r2, [r3, #1]

	//getSoilSensorData();
	tx_cmd[2] = 0x01; 		       //gst data (GST ID)
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <radioTxData+0x90>)
 80007da:	2201      	movs	r2, #1
 80007dc:	709a      	strb	r2, [r3, #2]
	//tx_cmd[3] = read_soil_value >> 8 & 0xff; 	  //gst DATA (SOIL SENSOR - MSB)
	//tx_cmd[4] = read_soil_value & 0xff;     //gst data (SOIL SENSOR LSB)

	tx_cmd[3] = 0x1A; 	  //gst DATA (SOIL SENSOR - MSB)
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <radioTxData+0x90>)
 80007e0:	221a      	movs	r2, #26
 80007e2:	70da      	strb	r2, [r3, #3]
	tx_cmd[4] = 0x23;     //gst data (SOIL SENSOR LSB)
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <radioTxData+0x90>)
 80007e6:	2223      	movs	r2, #35	; 0x23
 80007e8:	711a      	strb	r2, [r3, #4]

	tx_cmd[5] = 0x33;    //gst data
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <radioTxData+0x90>)
 80007ec:	2233      	movs	r2, #51	; 0x33
 80007ee:	715a      	strb	r2, [r3, #5]
	tx_cmd[6] = 0x44;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <radioTxData+0x90>)
 80007f2:	2244      	movs	r2, #68	; 0x44
 80007f4:	719a      	strb	r2, [r3, #6]
	tx_cmd[7] = 0x55;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <radioTxData+0x90>)
 80007f8:	2255      	movs	r2, #85	; 0x55
 80007fa:	71da      	strb	r2, [r3, #7]
	tx_cmd[8] = 0x66;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <radioTxData+0x90>)
 80007fe:	2266      	movs	r2, #102	; 0x66
 8000800:	721a      	strb	r2, [r3, #8]
	tx_cmd[9] = 0x77;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <radioTxData+0x90>)
 8000804:	2277      	movs	r2, #119	; 0x77
 8000806:	725a      	strb	r2, [r3, #9]
	tx_cmd[10] = 0x88;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <radioTxData+0x90>)
 800080a:	2288      	movs	r2, #136	; 0x88
 800080c:	729a      	strb	r2, [r3, #10]
	tx_cmd[11] = 0x99;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <radioTxData+0x90>)
 8000810:	2299      	movs	r2, #153	; 0x99
 8000812:	72da      	strb	r2, [r3, #11]
	tx_cmd[12] = 0x38;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <radioTxData+0x90>)
 8000816:	2238      	movs	r2, #56	; 0x38
 8000818:	731a      	strb	r2, [r3, #12]
	tx_cmd[13] = 0xA7;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <radioTxData+0x90>)
 800081c:	22a7      	movs	r2, #167	; 0xa7
 800081e:	735a      	strb	r2, [r3, #13]
	crc = 0;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <radioTxData+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	801a      	strh	r2, [r3, #0]
	crc = calc_CRC(tx_cmd, DATA_SIZE);
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <radioTxData+0x98>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	480a      	ldr	r0, [pc, #40]	; (8000858 <radioTxData+0x90>)
 800082e:	f7ff ff4b 	bl	80006c8 <calc_CRC>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <radioTxData+0x94>)
 8000838:	801a      	strh	r2, [r3, #0]
	tx_cmd[14] = crc >> 8;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <radioTxData+0x94>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	0a1b      	lsrs	r3, r3, #8
 8000840:	b29b      	uxth	r3, r3
 8000842:	b2da      	uxtb	r2, r3
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <radioTxData+0x90>)
 8000846:	739a      	strb	r2, [r3, #14]
	tx_cmd[15] = crc;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <radioTxData+0x94>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b02      	ldr	r3, [pc, #8]	; (8000858 <radioTxData+0x90>)
 8000850:	73da      	strb	r2, [r3, #15]
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001f4 	.word	0x200001f4
 800085c:	20000206 	.word	0x20000206
 8000860:	20000001 	.word	0x20000001

08000864 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800086a:	f000 fe5d 	bl	8001528 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800086e:	f000 f919 	bl	8000aa4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000872:	f000 fa77 	bl	8000d64 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000876:	f000 fa29 	bl	8000ccc <MX_USART2_UART_Init>
	MX_SubGHz_Phy_Init();
 800087a:	f007 fdc4 	bl	8008406 <MX_SubGHz_Phy_Init>
	MX_TIM2_Init();
 800087e:	f000 f9d7 	bl	8000c30 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000882:	f000 f981 	bl	8000b88 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000886:	486e      	ldr	r0, [pc, #440]	; (8000a40 <main+0x1dc>)
 8000888:	f003 f97e 	bl	8003b88 <HAL_TIM_Base_Start>

	pkt_params.PacketType = PACKET_TYPE_LORA;
 800088c:	4b6d      	ldr	r3, [pc, #436]	; (8000a44 <main+0x1e0>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.LoRa.PayloadLength = PAYLOAD_LENGTH;
 8000892:	4b6c      	ldr	r3, [pc, #432]	; (8000a44 <main+0x1e0>)
 8000894:	2210      	movs	r2, #16
 8000896:	745a      	strb	r2, [r3, #17]
	pkt_params.Params.LoRa.PreambleLength = 8;
 8000898:	4b6a      	ldr	r3, [pc, #424]	; (8000a44 <main+0x1e0>)
 800089a:	2208      	movs	r2, #8
 800089c:	81da      	strh	r2, [r3, #14]
	pkt_params.Params.LoRa.HeaderType = LORA_PACKET_IMPLICIT;
 800089e:	4b69      	ldr	r3, [pc, #420]	; (8000a44 <main+0x1e0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	741a      	strb	r2, [r3, #16]
	pkt_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 80008a4:	4b67      	ldr	r3, [pc, #412]	; (8000a44 <main+0x1e0>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	749a      	strb	r2, [r3, #18]
	pkt_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80008aa:	4b66      	ldr	r3, [pc, #408]	; (8000a44 <main+0x1e0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	74da      	strb	r2, [r3, #19]

	mod_params.PacketType = PACKET_TYPE_LORA;
 80008b0:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <main+0x1e4>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
	mod_params.Params.LoRa.Bandwidth = LORA_BW_031;
 80008b6:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <main+0x1e4>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	765a      	strb	r2, [r3, #25]
	mod_params.Params.LoRa.SpreadingFactor = LORA_SF10;
 80008bc:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <main+0x1e4>)
 80008be:	220a      	movs	r2, #10
 80008c0:	761a      	strb	r2, [r3, #24]
	mod_params.Params.LoRa.CodingRate = LORA_CR_4_8;
 80008c2:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <main+0x1e4>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	769a      	strb	r2, [r3, #26]
	//mod_params.Params.LoRa.LowDatarateOptimize = 0;
	mod_params.Params.LoRa.LowDatarateOptimize = 1; // Enable low data rate optimization
 80008c8:	4b5f      	ldr	r3, [pc, #380]	; (8000a48 <main+0x1e4>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	76da      	strb	r2, [r3, #27]

	SUBGRF_Init(DioIrqHndlr);
 80008ce:	485f      	ldr	r0, [pc, #380]	; (8000a4c <main+0x1e8>)
 80008d0:	f006 fb50 	bl	8006f74 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f007 f9b8 	bl	8007c4c <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(tx_cmd, PAYLOAD_LENGTH);
 80008dc:	2110      	movs	r1, #16
 80008de:	485c      	ldr	r0, [pc, #368]	; (8000a50 <main+0x1ec>)
 80008e0:	f006 fb9a 	bl	8007018 <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 80008e4:	4857      	ldr	r0, [pc, #348]	; (8000a44 <main+0x1e0>)
 80008e6:	f007 f913 	bl	8007b10 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 80008ea:	4a5a      	ldr	r2, [pc, #360]	; (8000a54 <main+0x1f0>)
 80008ec:	463b      	mov	r3, r7
 80008ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f006 fbd2 	bl	80070a2 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 80008fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000902:	f006 fc1d 	bl	8007140 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000906:	4854      	ldr	r0, [pc, #336]	; (8000a58 <main+0x1f4>)
 8000908:	f006 fef6 	bl	80076f8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 800090c:	2301      	movs	r3, #1
 800090e:	2200      	movs	r2, #0
 8000910:	2107      	movs	r1, #7
 8000912:	2004      	movs	r0, #4
 8000914:	f006 fe72 	bl	80075fc <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000918:	2203      	movs	r2, #3
 800091a:	210e      	movs	r1, #14
 800091c:	2001      	movs	r0, #1
 800091e:	f006 ff57 	bl	80077d0 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000922:	4849      	ldr	r0, [pc, #292]	; (8000a48 <main+0x1e4>)
 8000924:	f007 f822 	bl	800796c <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 8000928:	2300      	movs	r3, #0
 800092a:	2200      	movs	r2, #0
 800092c:	f240 210f 	movw	r1, #527	; 0x20f
 8000930:	f240 200f 	movw	r0, #527	; 0x20f
 8000934:	f006 fe84 	bl	8007640 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	myPrintf("\n########## Test code: BEGIN ##########\r\n");
 8000938:	4848      	ldr	r0, [pc, #288]	; (8000a5c <main+0x1f8>)
 800093a:	f7ff fe8b 	bl	8000654 <myPrintf>
	myPrintf("\n########## Receive and Transmits ##########\r\n");
 800093e:	4848      	ldr	r0, [pc, #288]	; (8000a60 <main+0x1fc>)
 8000940:	f7ff fe88 	bl	8000654 <myPrintf>
	myPrintf("########## Low Power Radio Receiver: 	##########\r\n");
 8000944:	4847      	ldr	r0, [pc, #284]	; (8000a64 <main+0x200>)
 8000946:	f7ff fe85 	bl	8000654 <myPrintf>
	myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 800094a:	4847      	ldr	r0, [pc, #284]	; (8000a68 <main+0x204>)
 800094c:	f7ff fe82 	bl	8000654 <myPrintf>
	myPrintf("Modulation: LoRa PACKET\r\n");
 8000950:	4846      	ldr	r0, [pc, #280]	; (8000a6c <main+0x208>)
 8000952:	f7ff fe7f 	bl	8000654 <myPrintf>
	myPrintf("FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
 8000956:	4a46      	ldr	r2, [pc, #280]	; (8000a70 <main+0x20c>)
 8000958:	493f      	ldr	r1, [pc, #252]	; (8000a58 <main+0x1f4>)
 800095a:	4846      	ldr	r0, [pc, #280]	; (8000a74 <main+0x210>)
 800095c:	f7ff fe7a 	bl	8000654 <myPrintf>
	FREQ_402_MHZ, FREQ_401_MHZ);
	myPrintf(
 8000960:	230e      	movs	r3, #14
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2300      	movs	r3, #0
 8000966:	2207      	movs	r2, #7
 8000968:	2104      	movs	r1, #4
 800096a:	4843      	ldr	r0, [pc, #268]	; (8000a78 <main+0x214>)
 800096c:	f7ff fe72 	bl	8000654 <myPrintf>
			"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
	myPrintf("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.LoRa.Bandwidth);
 8000970:	4b35      	ldr	r3, [pc, #212]	; (8000a48 <main+0x1e4>)
 8000972:	7e5b      	ldrb	r3, [r3, #25]
 8000974:	4619      	mov	r1, r3
 8000976:	4841      	ldr	r0, [pc, #260]	; (8000a7c <main+0x218>)
 8000978:	f7ff fe6c 	bl	8000654 <myPrintf>
	myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <main+0x1e0>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	483f      	ldr	r0, [pc, #252]	; (8000a80 <main+0x21c>)
 8000984:	f7ff fe66 	bl	8000654 <myPrintf>
	myPrintf("PayloadLength: 		%d\n\r", pkt_params.Params.LoRa.PayloadLength);
 8000988:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <main+0x1e0>)
 800098a:	7c5b      	ldrb	r3, [r3, #17]
 800098c:	4619      	mov	r1, r3
 800098e:	483d      	ldr	r0, [pc, #244]	; (8000a84 <main+0x220>)
 8000990:	f7ff fe60 	bl	8000654 <myPrintf>
	myPrintf("PreambleLength: 		%d\n\r", pkt_params.Params.LoRa.PreambleLength);
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <main+0x1e0>)
 8000996:	89db      	ldrh	r3, [r3, #14]
 8000998:	4619      	mov	r1, r3
 800099a:	483b      	ldr	r0, [pc, #236]	; (8000a88 <main+0x224>)
 800099c:	f7ff fe5a 	bl	8000654 <myPrintf>
	myPrintf("HeaderType: 			%d\n\r", pkt_params.Params.LoRa.HeaderType);
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <main+0x1e0>)
 80009a2:	7c1b      	ldrb	r3, [r3, #16]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4839      	ldr	r0, [pc, #228]	; (8000a8c <main+0x228>)
 80009a8:	f7ff fe54 	bl	8000654 <myPrintf>
	myPrintf(
 80009ac:	4838      	ldr	r0, [pc, #224]	; (8000a90 <main+0x22c>)
 80009ae:	f7ff fe51 	bl	8000654 <myPrintf>
			"--------   If this message pop up then wait to receive   --------\r\n");
	myPrintf("__________________________________________________\r\n");
 80009b2:	4838      	ldr	r0, [pc, #224]	; (8000a94 <main+0x230>)
 80009b4:	f7ff fe4e 	bl	8000654 <myPrintf>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 80009b8:	4827      	ldr	r0, [pc, #156]	; (8000a58 <main+0x1f4>)
 80009ba:	f006 fe9d 	bl	80076f8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80009be:	2100      	movs	r1, #0
 80009c0:	2001      	movs	r0, #1
 80009c2:	f007 fae1 	bl	8007f88 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 80009c6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80009ca:	f006 fcc1 	bl	8007350 <SUBGRF_SetRxBoosted>

	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d4:	4830      	ldr	r0, [pc, #192]	; (8000a98 <main+0x234>)
 80009d6:	f001 f87f 	bl	8001ad8 <HAL_GPIO_WritePin>
	delay_us(1000000);  // 500ms delay
 80009da:	4830      	ldr	r0, [pc, #192]	; (8000a9c <main+0x238>)
 80009dc:	f7ff fe20 	bl	8000620 <delay_us>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009e6:	482c      	ldr	r0, [pc, #176]	; (8000a98 <main+0x234>)
 80009e8:	f001 f876 	bl	8001ad8 <HAL_GPIO_WritePin>
	delay_us(1000000);
 80009ec:	482b      	ldr	r0, [pc, #172]	; (8000a9c <main+0x238>)
 80009ee:	f7ff fe17 	bl	8000620 <delay_us>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f8:	4827      	ldr	r0, [pc, #156]	; (8000a98 <main+0x234>)
 80009fa:	f001 f86d 	bl	8001ad8 <HAL_GPIO_WritePin>
		delay_us(1000000);
 80009fe:	4827      	ldr	r0, [pc, #156]	; (8000a9c <main+0x238>)
 8000a00:	f7ff fe0e 	bl	8000620 <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a0a:	4823      	ldr	r0, [pc, #140]	; (8000a98 <main+0x234>)
 8000a0c:	f001 f864 	bl	8001ad8 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <main+0x238>)
 8000a12:	f7ff fe05 	bl	8000620 <delay_us>

		if (TX_FLAG) {
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <main+0x23c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00d      	beq.n	8000a3a <main+0x1d6>
			radioTxData();
 8000a1e:	f7ff fed3 	bl	80007c8 <radioTxData>
			SUBGRF_SetRfFrequency(FREQ_401_MHZ);
 8000a22:	4813      	ldr	r0, [pc, #76]	; (8000a70 <main+0x20c>)
 8000a24:	f006 fe68 	bl	80076f8 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8000a28:	2101      	movs	r1, #1
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f007 faac 	bl	8007f88 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, 16, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <main+0x1ec>)
 8000a36:	f006 fb21 	bl	800707c <SUBGRF_SendPayload>
		}

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8000a3a:	f007 fcec 	bl	8008416 <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000a3e:	e7d8      	b.n	80009f2 <main+0x18e>
 8000a40:	20000104 	.word	0x20000104
 8000a44:	2000007c 	.word	0x2000007c
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	08000e19 	.word	0x08000e19
 8000a50:	200001f4 	.word	0x200001f4
 8000a54:	08009710 	.word	0x08009710
 8000a58:	17fbc158 	.word	0x17fbc158
 8000a5c:	080094a0 	.word	0x080094a0
 8000a60:	080094cc 	.word	0x080094cc
 8000a64:	080094fc 	.word	0x080094fc
 8000a68:	08009530 	.word	0x08009530
 8000a6c:	08009564 	.word	0x08009564
 8000a70:	17ec7f18 	.word	0x17ec7f18
 8000a74:	08009580 	.word	0x08009580
 8000a78:	080095bc 	.word	0x080095bc
 8000a7c:	0800961c 	.word	0x0800961c
 8000a80:	08009638 	.word	0x08009638
 8000a84:	08009650 	.word	0x08009650
 8000a88:	08009668 	.word	0x08009668
 8000a8c:	08009680 	.word	0x08009680
 8000a90:	08009694 	.word	0x08009694
 8000a94:	080096d8 	.word	0x080096d8
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	000f4240 	.word	0x000f4240
 8000aa0:	20000208 	.word	0x20000208

08000aa4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09a      	sub	sp, #104	; 0x68
 8000aa8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	2248      	movs	r2, #72	; 0x48
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f008 f866 	bl	8008b84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <SystemClock_Config+0xbc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ad2:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <SystemClock_Config+0xbc>)
 8000ad4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <SystemClock_Config+0xbc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8000aea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af8:	2303      	movs	r3, #3
 8000afa:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000afc:	2310      	movs	r3, #16
 8000afe:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000b00:	2306      	movs	r3, #6
 8000b02:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b08:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b0e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b14:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b16:	f107 0320 	add.w	r3, r7, #32
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fac6 	bl	80020ac <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x86>
		Error_Handler();
 8000b26:	f000 fad7 	bl	80010d8 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000b2a:	234f      	movs	r3, #79	; 0x4f
 8000b2c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2102      	movs	r1, #2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fe32 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xb2>
		Error_Handler();
 8000b52:	f000 fac1 	bl	80010d8 <Error_Handler>
	}
}
 8000b56:	bf00      	nop
 8000b58:	3768      	adds	r7, #104	; 0x68
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	58000400 	.word	0x58000400

08000b64 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SUBGHZ_Init+0x20>)
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_SUBGHZ_Init+0x20>)
 8000b70:	f002 fb92 	bl	8003298 <HAL_SUBGHZ_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8000b7a:	f000 faad 	bl	80010d8 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000ac 	.word	0x200000ac

08000b88 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ba6:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000ba8:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <MX_TIM1_Init+0xa4>)
 8000baa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bae:	222f      	movs	r2, #47	; 0x2f
 8000bb0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbe:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000bd2:	4815      	ldr	r0, [pc, #84]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bd4:	f002 ff80 	bl	8003ad8 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000bde:	f000 fa7b 	bl	80010d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000bf0:	f003 f99f 	bl	8003f32 <HAL_TIM_ConfigClockSource>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM1_Init+0x76>
		Error_Handler();
 8000bfa:	f000 fa6d 	bl	80010d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_TIM1_Init+0xa0>)
 8000c10:	f003 fb76 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000c1a:	f000 fa5d 	bl	80010d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000b8 	.word	0x200000b8
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c36:	f107 0310 	add.w	r3, r7, #16
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c54:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48 - 1;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c58:	222f      	movs	r2, #47	; 0x2f
 8000c5a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c64:	4a18      	ldr	r2, [pc, #96]	; (8000cc8 <MX_TIM2_Init+0x98>)
 8000c66:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c76:	f002 ff2f 	bl	8003ad8 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x54>
		Error_Handler();
 8000c80:	f000 fa2a 	bl	80010d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000c92:	f003 f94e 	bl	8003f32 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x70>
		Error_Handler();
 8000c9c:	f000 fa1c 	bl	80010d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM2_Init+0x94>)
 8000cae:	f003 fb27 	bl	8004300 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000cb8:	f000 fa0e 	bl	80010d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000104 	.word	0x20000104
 8000cc8:	000f4240 	.word	0x000f4240

08000ccc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <MX_USART2_UART_Init+0x94>)
 8000cd4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d16:	f003 fb8d 	bl	8004434 <HAL_UART_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000d20:	f000 f9da 	bl	80010d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000d24:	2100      	movs	r1, #0
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d28:	f004 f8bd 	bl	8004ea6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000d32:	f000 f9d1 	bl	80010d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4808      	ldr	r0, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d3a:	f004 f8f2 	bl	8004f22 <HAL_UARTEx_SetRxFifoThreshold>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000d44:	f000 f9c8 	bl	80010d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000d48:	4804      	ldr	r0, [pc, #16]	; (8000d5c <MX_USART2_UART_Init+0x90>)
 8000d4a:	f004 f874 	bl	8004e36 <HAL_UARTEx_DisableFifoMode>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000d54:	f000 f9c0 	bl	80010d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000150 	.word	0x20000150
 8000d60:	40004400 	.word	0x40004400

08000d64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff fbcf 	bl	800051c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff fbcc 	bl	800051c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d84:	2004      	movs	r0, #4
 8000d86:	f7ff fbc9 	bl	800051c <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000d90:	481f      	ldr	r0, [pc, #124]	; (8000e10 <MX_GPIO_Init+0xac>)
 8000d92:	f000 fea1 	bl	8001ad8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000d96:	2200      	movs	r2, #0
 8000d98:	2138      	movs	r1, #56	; 0x38
 8000d9a:	481e      	ldr	r0, [pc, #120]	; (8000e14 <MX_GPIO_Init+0xb0>)
 8000d9c:	f000 fe9c 	bl	8001ad8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000da0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000da4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dae:	2302      	movs	r3, #2
 8000db0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	4619      	mov	r1, r3
 8000db6:	4816      	ldr	r0, [pc, #88]	; (8000e10 <MX_GPIO_Init+0xac>)
 8000db8:	f000 fd2e 	bl	8001818 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000dbc:	2338      	movs	r3, #56	; 0x38
 8000dbe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4810      	ldr	r0, [pc, #64]	; (8000e14 <MX_GPIO_Init+0xb0>)
 8000dd2:	f000 fd21 	bl	8001818 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dde:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f000 fd14 	bl	8001818 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000df4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000df8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <MX_GPIO_Init+0xb0>)
 8000e04:	f000 fd08 	bl	8001818 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800

08000e18 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_RX_DONE) {
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d176      	bne.n	8000f16 <DioIrqHndlr+0xfe>
		pkt_id++;
 8000e28:	4b84      	ldr	r3, [pc, #528]	; (800103c <DioIrqHndlr+0x224>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b82      	ldr	r3, [pc, #520]	; (800103c <DioIrqHndlr+0x224>)
 8000e32:	701a      	strb	r2, [r3, #0]
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 8000e34:	2210      	movs	r2, #16
 8000e36:	4982      	ldr	r1, [pc, #520]	; (8001040 <DioIrqHndlr+0x228>)
 8000e38:	4882      	ldr	r0, [pc, #520]	; (8001044 <DioIrqHndlr+0x22c>)
 8000e3a:	f006 f8fd 	bl	8007038 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8000e3e:	f006 ff1c 	bl	8007c7a <SUBGRF_GetRssiInst>
 8000e42:	4603      	mov	r3, r0
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4b80      	ldr	r3, [pc, #512]	; (8001048 <DioIrqHndlr+0x230>)
 8000e48:	701a      	strb	r2, [r3, #0]
		myPrintf("\nLora Received\r\n");
 8000e4a:	4880      	ldr	r0, [pc, #512]	; (800104c <DioIrqHndlr+0x234>)
 8000e4c:	f7ff fc02 	bl	8000654 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e00a      	b.n	8000e6c <DioIrqHndlr+0x54>
			myPrintf(" %x", rx_cmd[i]);
 8000e56:	4a7b      	ldr	r2, [pc, #492]	; (8001044 <DioIrqHndlr+0x22c>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	487b      	ldr	r0, [pc, #492]	; (8001050 <DioIrqHndlr+0x238>)
 8000e62:	f7ff fbf7 	bl	8000654 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	d9f1      	bls.n	8000e56 <DioIrqHndlr+0x3e>
		}
		myPrintf("\r\n");
 8000e72:	4878      	ldr	r0, [pc, #480]	; (8001054 <DioIrqHndlr+0x23c>)
 8000e74:	f7ff fbee 	bl	8000654 <myPrintf>

		if (pkt_id > 5) {
 8000e78:	4b70      	ldr	r3, [pc, #448]	; (800103c <DioIrqHndlr+0x224>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	f240 80d8 	bls.w	8001032 <DioIrqHndlr+0x21a>
			pkt_id = 0;
 8000e82:	4b6e      	ldr	r3, [pc, #440]	; (800103c <DioIrqHndlr+0x224>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim1);
 8000e88:	4873      	ldr	r0, [pc, #460]	; (8001058 <DioIrqHndlr+0x240>)
 8000e8a:	f002 fee7 	bl	8003c5c <HAL_TIM_Base_Start_IT>
			myPrintf(
 8000e8e:	4873      	ldr	r0, [pc, #460]	; (800105c <DioIrqHndlr+0x244>)
 8000e90:	f7ff fbe0 	bl	8000654 <myPrintf>
					"\n########## Received Data Successful, now transmitting data ##########\r\n");
			myPrintf("########## Low Power Radio: 	##########\r\n");
 8000e94:	4872      	ldr	r0, [pc, #456]	; (8001060 <DioIrqHndlr+0x248>)
 8000e96:	f7ff fbdd 	bl	8000654 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 8000e9a:	4872      	ldr	r0, [pc, #456]	; (8001064 <DioIrqHndlr+0x24c>)
 8000e9c:	f7ff fbda 	bl	8000654 <myPrintf>
			myPrintf("Modulation: LoRa PACKET\r\n");
 8000ea0:	4871      	ldr	r0, [pc, #452]	; (8001068 <DioIrqHndlr+0x250>)
 8000ea2:	f7ff fbd7 	bl	8000654 <myPrintf>
			myPrintf(
 8000ea6:	4a71      	ldr	r2, [pc, #452]	; (800106c <DioIrqHndlr+0x254>)
 8000ea8:	4971      	ldr	r1, [pc, #452]	; (8001070 <DioIrqHndlr+0x258>)
 8000eaa:	4872      	ldr	r0, [pc, #456]	; (8001074 <DioIrqHndlr+0x25c>)
 8000eac:	f7ff fbd2 	bl	8000654 <myPrintf>
					"FREQUENCY MODS: UPLINK FREQ: %lu\r\n    DOWNLINK FREQ: %lu\r\n",
					FREQ_402_MHZ, FREQ_401_MHZ);
			myPrintf(
 8000eb0:	230e      	movs	r3, #14
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	2104      	movs	r1, #4
 8000eba:	486f      	ldr	r0, [pc, #444]	; (8001078 <DioIrqHndlr+0x260>)
 8000ebc:	f7ff fbca 	bl	8000654 <myPrintf>
					"POWER CONFIG:\r\n    PA_DUTY_CYCLE : %x,    HP_MAX: %x,\n\r    PA_SEL : %x,    POWER TX: %u dBm\n\r",
					PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.LoRa.Bandwidth);
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <DioIrqHndlr+0x264>)
 8000ec2:	7e5b      	ldrb	r3, [r3, #25]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	486e      	ldr	r0, [pc, #440]	; (8001080 <DioIrqHndlr+0x268>)
 8000ec8:	f7ff fbc4 	bl	8000654 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 8000ecc:	4b6d      	ldr	r3, [pc, #436]	; (8001084 <DioIrqHndlr+0x26c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	486d      	ldr	r0, [pc, #436]	; (8001088 <DioIrqHndlr+0x270>)
 8000ed4:	f7ff fbbe 	bl	8000654 <myPrintf>
			myPrintf("PayloadLength: 		%d\n\r",
					pkt_params.Params.LoRa.PayloadLength);
 8000ed8:	4b6a      	ldr	r3, [pc, #424]	; (8001084 <DioIrqHndlr+0x26c>)
 8000eda:	7c5b      	ldrb	r3, [r3, #17]
			myPrintf("PayloadLength: 		%d\n\r",
 8000edc:	4619      	mov	r1, r3
 8000ede:	486b      	ldr	r0, [pc, #428]	; (800108c <DioIrqHndlr+0x274>)
 8000ee0:	f7ff fbb8 	bl	8000654 <myPrintf>
			myPrintf("PreambleLength: 		%d\n\r",
					pkt_params.Params.LoRa.PreambleLength);
 8000ee4:	4b67      	ldr	r3, [pc, #412]	; (8001084 <DioIrqHndlr+0x26c>)
 8000ee6:	89db      	ldrh	r3, [r3, #14]
			myPrintf("PreambleLength: 		%d\n\r",
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4869      	ldr	r0, [pc, #420]	; (8001090 <DioIrqHndlr+0x278>)
 8000eec:	f7ff fbb2 	bl	8000654 <myPrintf>
			myPrintf("HeaderType: 			%d\n\r",
					pkt_params.Params.LoRa.HeaderType);
 8000ef0:	4b64      	ldr	r3, [pc, #400]	; (8001084 <DioIrqHndlr+0x26c>)
 8000ef2:	7c1b      	ldrb	r3, [r3, #16]
			myPrintf("HeaderType: 			%d\n\r",
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4867      	ldr	r0, [pc, #412]	; (8001094 <DioIrqHndlr+0x27c>)
 8000ef8:	f7ff fbac 	bl	8000654 <myPrintf>

			myPrintf(
 8000efc:	4866      	ldr	r0, [pc, #408]	; (8001098 <DioIrqHndlr+0x280>)
 8000efe:	f7ff fba9 	bl	8000654 <myPrintf>
					"If this message pop up then track in other NucleoWL55JC2 Receiver\r\n");
			myPrintf("------------- Wait for Test Complete --------------\r\n");
 8000f02:	4866      	ldr	r0, [pc, #408]	; (800109c <DioIrqHndlr+0x284>)
 8000f04:	f7ff fba6 	bl	8000654 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8000f08:	4865      	ldr	r0, [pc, #404]	; (80010a0 <DioIrqHndlr+0x288>)
 8000f0a:	f7ff fba3 	bl	8000654 <myPrintf>
			myPrintf("The Transmitter will transmits packets now. \r\n");
 8000f0e:	4865      	ldr	r0, [pc, #404]	; (80010a4 <DioIrqHndlr+0x28c>)
 8000f10:	f7ff fba0 	bl	8000654 <myPrintf>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
			delay_us(1000000);
			pkt_id = 0;
		}
	}
}
 8000f14:	e08d      	b.n	8001032 <DioIrqHndlr+0x21a>
	} else if (radioIrq == IRQ_TX_DONE) {
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	f040 808a 	bne.w	8001032 <DioIrqHndlr+0x21a>
		TX_FLAG = 0;
 8000f1e:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <DioIrqHndlr+0x290>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
		myPrintf("\n\r Test Command Transmitted Successful:  \r");
 8000f24:	4861      	ldr	r0, [pc, #388]	; (80010ac <DioIrqHndlr+0x294>)
 8000f26:	f7ff fb95 	bl	8000654 <myPrintf>
		for (int i = 0; i < 16; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	e00a      	b.n	8000f46 <DioIrqHndlr+0x12e>
			myPrintf(" %02x", tx_cmd[i]);
 8000f30:	4a5f      	ldr	r2, [pc, #380]	; (80010b0 <DioIrqHndlr+0x298>)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	485e      	ldr	r0, [pc, #376]	; (80010b4 <DioIrqHndlr+0x29c>)
 8000f3c:	f7ff fb8a 	bl	8000654 <myPrintf>
		for (int i = 0; i < 16; i++) {
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	ddf1      	ble.n	8000f30 <DioIrqHndlr+0x118>
		myPrintf("\n\n");
 8000f4c:	485a      	ldr	r0, [pc, #360]	; (80010b8 <DioIrqHndlr+0x2a0>)
 8000f4e:	f7ff fb81 	bl	8000654 <myPrintf>
		pkt_id++;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <DioIrqHndlr+0x224>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b38      	ldr	r3, [pc, #224]	; (800103c <DioIrqHndlr+0x224>)
 8000f5c:	701a      	strb	r2, [r3, #0]
		if (pkt_id > 5) {
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <DioIrqHndlr+0x224>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d965      	bls.n	8001032 <DioIrqHndlr+0x21a>
			HAL_TIM_Base_Stop(&htim1);
 8000f66:	483c      	ldr	r0, [pc, #240]	; (8001058 <DioIrqHndlr+0x240>)
 8000f68:	f002 fe52 	bl	8003c10 <HAL_TIM_Base_Stop>
			myPrintf("\n\r Testing,Receive and Transmit done.  \r\n");
 8000f6c:	4853      	ldr	r0, [pc, #332]	; (80010bc <DioIrqHndlr+0x2a4>)
 8000f6e:	f7ff fb71 	bl	8000654 <myPrintf>
			myPrintf("\n########## Test code: BEGIN ##########\r\n");
 8000f72:	4853      	ldr	r0, [pc, #332]	; (80010c0 <DioIrqHndlr+0x2a8>)
 8000f74:	f7ff fb6e 	bl	8000654 <myPrintf>
			myPrintf("\n########## Receive and Transmits ##########\r\n");
 8000f78:	4852      	ldr	r0, [pc, #328]	; (80010c4 <DioIrqHndlr+0x2ac>)
 8000f7a:	f7ff fb6b 	bl	8000654 <myPrintf>
			myPrintf("########## Low Power Radio Receiver: 	##########\r\n");
 8000f7e:	4852      	ldr	r0, [pc, #328]	; (80010c8 <DioIrqHndlr+0x2b0>)
 8000f80:	f7ff fb68 	bl	8000654 <myPrintf>
			myPrintf("########## COMMUNICATION PARAMETERS: 		##########\r\n");
 8000f84:	4837      	ldr	r0, [pc, #220]	; (8001064 <DioIrqHndlr+0x24c>)
 8000f86:	f7ff fb65 	bl	8000654 <myPrintf>
			myPrintf("Modulation: LoRa PACKET\r\n");
 8000f8a:	4837      	ldr	r0, [pc, #220]	; (8001068 <DioIrqHndlr+0x250>)
 8000f8c:	f7ff fb62 	bl	8000654 <myPrintf>
			myPrintf(
 8000f90:	4a36      	ldr	r2, [pc, #216]	; (800106c <DioIrqHndlr+0x254>)
 8000f92:	4937      	ldr	r1, [pc, #220]	; (8001070 <DioIrqHndlr+0x258>)
 8000f94:	4837      	ldr	r0, [pc, #220]	; (8001074 <DioIrqHndlr+0x25c>)
 8000f96:	f7ff fb5d 	bl	8000654 <myPrintf>
			myPrintf(
 8000f9a:	230e      	movs	r3, #14
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	4834      	ldr	r0, [pc, #208]	; (8001078 <DioIrqHndlr+0x260>)
 8000fa6:	f7ff fb55 	bl	8000654 <myPrintf>
					mod_params.Params.LoRa.Bandwidth);
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <DioIrqHndlr+0x264>)
 8000fac:	7e5b      	ldrb	r3, [r3, #25]
			myPrintf("RECEVING BANDWIDTH: 	%d\n\r",
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4833      	ldr	r0, [pc, #204]	; (8001080 <DioIrqHndlr+0x268>)
 8000fb2:	f7ff fb4f 	bl	8000654 <myPrintf>
			myPrintf("Packet Type: 			%d\n\r", pkt_params.PacketType);
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <DioIrqHndlr+0x26c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4832      	ldr	r0, [pc, #200]	; (8001088 <DioIrqHndlr+0x270>)
 8000fbe:	f7ff fb49 	bl	8000654 <myPrintf>
					pkt_params.Params.LoRa.PayloadLength);
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <DioIrqHndlr+0x26c>)
 8000fc4:	7c5b      	ldrb	r3, [r3, #17]
			myPrintf("PayloadLength: 		%d\n\r",
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4830      	ldr	r0, [pc, #192]	; (800108c <DioIrqHndlr+0x274>)
 8000fca:	f7ff fb43 	bl	8000654 <myPrintf>
					pkt_params.Params.LoRa.PreambleLength);
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <DioIrqHndlr+0x26c>)
 8000fd0:	89db      	ldrh	r3, [r3, #14]
			myPrintf("PreambleLength: 		%d\n\r",
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482e      	ldr	r0, [pc, #184]	; (8001090 <DioIrqHndlr+0x278>)
 8000fd6:	f7ff fb3d 	bl	8000654 <myPrintf>
					pkt_params.Params.LoRa.HeaderType);
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <DioIrqHndlr+0x26c>)
 8000fdc:	7c1b      	ldrb	r3, [r3, #16]
			myPrintf("HeaderType: 			%d\n\r",
 8000fde:	4619      	mov	r1, r3
 8000fe0:	482c      	ldr	r0, [pc, #176]	; (8001094 <DioIrqHndlr+0x27c>)
 8000fe2:	f7ff fb37 	bl	8000654 <myPrintf>
			myPrintf(
 8000fe6:	4839      	ldr	r0, [pc, #228]	; (80010cc <DioIrqHndlr+0x2b4>)
 8000fe8:	f7ff fb34 	bl	8000654 <myPrintf>
			myPrintf("__________________________________________________\r\n");
 8000fec:	482c      	ldr	r0, [pc, #176]	; (80010a0 <DioIrqHndlr+0x288>)
 8000fee:	f7ff fb31 	bl	8000654 <myPrintf>
			SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000ff2:	481f      	ldr	r0, [pc, #124]	; (8001070 <DioIrqHndlr+0x258>)
 8000ff4:	f006 fb80 	bl	80076f8 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f006 ffc4 	bl	8007f88 <SUBGRF_SetSwitch>
			SUBGRF_SetRxBoosted(0xFFFFFF);
 8001000:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001004:	f006 f9a4 	bl	8007350 <SUBGRF_SetRxBoosted>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100e:	4830      	ldr	r0, [pc, #192]	; (80010d0 <DioIrqHndlr+0x2b8>)
 8001010:	f000 fd62 	bl	8001ad8 <HAL_GPIO_WritePin>
			delay_us(1000000);  // 500ms delay
 8001014:	482f      	ldr	r0, [pc, #188]	; (80010d4 <DioIrqHndlr+0x2bc>)
 8001016:	f7ff fb03 	bl	8000620 <delay_us>
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001020:	482b      	ldr	r0, [pc, #172]	; (80010d0 <DioIrqHndlr+0x2b8>)
 8001022:	f000 fd59 	bl	8001ad8 <HAL_GPIO_WritePin>
			delay_us(1000000);
 8001026:	482b      	ldr	r0, [pc, #172]	; (80010d4 <DioIrqHndlr+0x2bc>)
 8001028:	f7ff fafa 	bl	8000620 <delay_us>
			pkt_id = 0;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <DioIrqHndlr+0x224>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000205 	.word	0x20000205
 8001040:	20000000 	.word	0x20000000
 8001044:	200001e4 	.word	0x200001e4
 8001048:	20000204 	.word	0x20000204
 800104c:	08009718 	.word	0x08009718
 8001050:	0800972c 	.word	0x0800972c
 8001054:	08009730 	.word	0x08009730
 8001058:	200000b8 	.word	0x200000b8
 800105c:	08009734 	.word	0x08009734
 8001060:	08009780 	.word	0x08009780
 8001064:	08009530 	.word	0x08009530
 8001068:	08009564 	.word	0x08009564
 800106c:	17ec7f18 	.word	0x17ec7f18
 8001070:	17fbc158 	.word	0x17fbc158
 8001074:	08009580 	.word	0x08009580
 8001078:	080095bc 	.word	0x080095bc
 800107c:	20000090 	.word	0x20000090
 8001080:	0800961c 	.word	0x0800961c
 8001084:	2000007c 	.word	0x2000007c
 8001088:	08009638 	.word	0x08009638
 800108c:	08009650 	.word	0x08009650
 8001090:	08009668 	.word	0x08009668
 8001094:	08009680 	.word	0x08009680
 8001098:	080097ac 	.word	0x080097ac
 800109c:	080097f0 	.word	0x080097f0
 80010a0:	080096d8 	.word	0x080096d8
 80010a4:	08009828 	.word	0x08009828
 80010a8:	20000208 	.word	0x20000208
 80010ac:	08009858 	.word	0x08009858
 80010b0:	200001f4 	.word	0x200001f4
 80010b4:	08009884 	.word	0x08009884
 80010b8:	0800988c 	.word	0x0800988c
 80010bc:	08009890 	.word	0x08009890
 80010c0:	080094a0 	.word	0x080094a0
 80010c4:	080094cc 	.word	0x080094cc
 80010c8:	080094fc 	.word	0x080094fc
 80010cc:	08009694 	.word	0x08009694
 80010d0:	48000400 	.word	0x48000400
 80010d4:	000f4240 	.word	0x000f4240

080010d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>

080010e2 <LL_AHB2_GRP1_EnableClock>:
{
 80010e2:	b480      	push	{r7}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800111a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4313      	orrs	r3, r2
 8001128:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001142:	b480      	push	{r7}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4313      	orrs	r3, r2
 8001158:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800115a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4013      	ands	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr

08001172 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800117a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4313      	orrs	r3, r2
 8001188:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800118a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4013      	ands	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff ffdb 	bl	8001172 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f000 faf4 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f000 fb0b 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_TIM_Base_MspInit+0x44>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10c      	bne.n	8001200 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011ea:	f7ff ffaa 	bl	8001142 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2018      	movs	r0, #24
 80011f4:	f000 fadb 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011f8:	2018      	movs	r0, #24
 80011fa:	f000 faf2 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fe:	e007      	b.n	8001210 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001208:	d102      	bne.n	8001210 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800120a:	2001      	movs	r0, #1
 800120c:	f7ff ff81 	bl	8001112 <LL_APB1_GRP1_EnableClock>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40012c00 	.word	0x40012c00

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b096      	sub	sp, #88	; 0x58
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2238      	movs	r2, #56	; 0x38
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f007 fca1 	bl	8008b84 <memset>
  if(huart->Instance==USART2)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <HAL_UART_MspInit+0x88>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d126      	bne.n	800129a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800124c:	2302      	movs	r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001250:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001254:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4618      	mov	r0, r3
 800125c:	f001 fe68 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001266:	f7ff ff37 	bl	80010d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800126e:	f7ff ff50 	bl	8001112 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ff35 	bl	80010e2 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001278:	230c      	movs	r3, #12
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001288:	2307      	movs	r3, #7
 800128a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f000 fabf 	bl	8001818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3758      	adds	r7, #88	; 0x58
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40004400 	.word	0x40004400

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <NMI_Handler+0x4>

080012ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <HardFault_Handler+0x4>

080012b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <MemManage_Handler+0x4>

080012ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <BusFault_Handler+0x4>

080012c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler+0x4>

080012c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 f975 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM1_UP_IRQHandler+0x10>)
 80012fe:	f002 fcf9 	bl	8003cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000b8 	.word	0x200000b8

0800130c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001312:	f002 fa43 	bl	800379c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000ac 	.word	0x200000ac

08001320 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_GetTick+0x24>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800133e:	f000 f892 	bl	8001466 <TIMER_IF_GetTimerValue>
 8001342:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000274 	.word	0x20000274

08001354 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f8af 	bl	80014c2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f007 fbfa 	bl	8008b94 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20010000 	.word	0x20010000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000278 	.word	0x20000278
 80013d4:	20000590 	.word	0x20000590

080013d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80013ee:	79fb      	ldrb	r3, [r7, #7]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 800141c:	79fb      	ldrb	r3, [r7, #7]
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800142c:	4b02      	ldr	r3, [pc, #8]	; (8001438 <TIMER_IF_SetTimerContext+0x10>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	2000027c 	.word	0x2000027c

0800143c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <TIMER_IF_GetTimerContext+0x10>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	2000027c 	.word	0x2000027c

08001450 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 800145a:	687b      	ldr	r3, [r7, #4]
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8001486:	687b      	ldr	r3, [r7, #4]
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d8:	f7ff ff7e 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001502:	f007 fb4d 	bl	8008ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001506:	f7ff f9ad 	bl	8000864 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   r0, =_estack
 800150c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001518:	08009b74 	.word	0x08009b74
  ldr r2, =_sbss
 800151c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001520:	2000058c 	.word	0x2000058c

08001524 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f930 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001538:	f001 fb1c 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 800153c:	4603      	mov	r3, r0
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_Init+0x3c>)
 8001540:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f810 	bl	8001568 <HAL_InitTick>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e001      	b.n	8001558 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001554:	f7ff fe25 	bl	80011a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001558:	79fb      	ldrb	r3, [r7, #7]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_InitTick+0x6c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d024      	beq.n	80015c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800157c:	f001 fafa 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8001580:	4602      	mov	r2, r0
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_InitTick+0x6c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001590:	fbb2 f3f3 	udiv	r3, r2, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f932 	bl	80017fe <HAL_SYSTICK_Config>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10f      	bne.n	80015c0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	d809      	bhi.n	80015ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a6:	2200      	movs	r2, #0
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ae:	f000 f8fe 	bl	80017ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_InitTick+0x70>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e007      	b.n	80015ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e004      	b.n	80015ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e001      	b.n	80015ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_IncTick+0x1c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x20>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a03      	ldr	r2, [pc, #12]	; (80015fc <HAL_IncTick+0x20>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000280 	.word	0x20000280

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4906      	ldr	r1, [pc, #24]	; (8001698 <__NVIC_EnableIRQ+0x34>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001778:	f7ff ff90 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff2d 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff44 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff92 	bl	80016f0 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff61 	bl	800169c <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff37 	bl	8001664 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa4 	bl	8001754 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	e140      	b.n	8001aaa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8132 	beq.w	8001aa4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d005      	beq.n	8001858 <HAL_GPIO_Init+0x40>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d130      	bne.n	80018ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188e:	2201      	movs	r2, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 0201 	and.w	r2, r3, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d017      	beq.n	80018f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d123      	bne.n	800194a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	6939      	ldr	r1, [r7, #16]
 8001946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0203 	and.w	r2, r3, #3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 808c 	beq.w	8001aa4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800198c:	4a4e      	ldr	r2, [pc, #312]	; (8001ac8 <HAL_GPIO_Init+0x2b0>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	2207      	movs	r2, #7
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019b6:	d00d      	beq.n	80019d4 <HAL_GPIO_Init+0x1bc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a44      	ldr	r2, [pc, #272]	; (8001acc <HAL_GPIO_Init+0x2b4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d007      	beq.n	80019d0 <HAL_GPIO_Init+0x1b8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <HAL_GPIO_Init+0x2b8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_GPIO_Init+0x1b4>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e004      	b.n	80019d6 <HAL_GPIO_Init+0x1be>
 80019cc:	2307      	movs	r3, #7
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x1be>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_GPIO_Init+0x1be>
 80019d4:	2300      	movs	r3, #0
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	f002 0203 	and.w	r2, r2, #3
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	4093      	lsls	r3, r2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e6:	4938      	ldr	r1, [pc, #224]	; (8001ac8 <HAL_GPIO_Init+0x2b0>)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f4:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a18:	4a2e      	ldr	r2, [pc, #184]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a42:	4a24      	ldr	r2, [pc, #144]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001a48:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a4e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001a6e:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a7c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_GPIO_Init+0x2bc>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f47f aeb7 	bne.w	8001828 <HAL_GPIO_Init+0x10>
  }
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	58000800 	.word	0x58000800

08001ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	807b      	strh	r3, [r7, #2]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae8:	787b      	ldrb	r3, [r7, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	887a      	ldrh	r2, [r7, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	58000400 	.word	0x58000400

08001b24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_PWREx_GetVoltageRange+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	58000400 	.word	0x58000400

08001b3c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b4c:	d101      	bne.n	8001b52 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr
 8001b5c:	58000400 	.word	0x58000400

08001b60 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001baa:	d101      	bne.n	8001bb0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c04:	d101      	bne.n	8001c0a <LL_RCC_HSE_IsReady+0x18>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_RCC_HSE_IsReady+0x1a>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5e:	d101      	bne.n	8001c64 <LL_RCC_HSI_IsReady+0x18>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <LL_RCC_HSI_IsReady+0x1a>
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d101      	bne.n	8001cae <LL_RCC_LSE_IsReady+0x18>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_RCC_LSE_IsReady+0x1a>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d101      	bne.n	8001d10 <LL_RCC_LSI_IsReady+0x18>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <LL_RCC_LSI_IsReady+0x1a>
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6013      	str	r3, [r2, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d101      	bne.n	8001d68 <LL_RCC_MSI_IsReady+0x16>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <LL_RCC_MSI_IsReady+0x18>
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d101      	bne.n	8001d88 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f023 0203 	bic.w	r2, r3, #3
 8001dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e84:	f023 020f 	bic.w	r2, r3, #15
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f92:	d101      	bne.n	8001f98 <LL_RCC_PLL_IsReady+0x18>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <LL_RCC_PLL_IsReady+0x1a>
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d101      	bne.n	8002014 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002032:	d101      	bne.n	8002038 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d101      	bne.n	800205c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002078:	d101      	bne.n	800207e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800209a:	d101      	bne.n	80020a0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e36f      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020be:	f7ff fea6 	bl	8001e0e <LL_RCC_GetSysClkSource>
 80020c2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c4:	f7ff ff8f 	bl	8001fe6 <LL_RCC_PLL_GetMainSource>
 80020c8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80c4 	beq.w	8002260 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x3e>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d176      	bne.n	80021d2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d173      	bne.n	80021d2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e353      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x68>
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002112:	e006      	b.n	8002122 <HAL_RCC_OscConfig+0x76>
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002122:	4293      	cmp	r3, r2
 8002124:	d222      	bcs.n	800216c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fd5a 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e331      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800213a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fe2b 	bl	8001dc0 <LL_RCC_MSI_SetCalibTrimming>
 800216a:	e021      	b.n	80021b0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002176:	f043 0308 	orr.w	r3, r3, #8
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fe12 	bl	8001dc0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fd1f 	bl	8002be4 <RCC_SetFlashLatencyFromMSIRange>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e2f6      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80021b0:	f000 fce0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4aa7      	ldr	r2, [pc, #668]	; (8002454 <HAL_RCC_OscConfig+0x3a8>)
 80021b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80021ba:	4ba7      	ldr	r3, [pc, #668]	; (8002458 <HAL_RCC_OscConfig+0x3ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff f9d2 	bl	8001568 <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d047      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	e2e5      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d02c      	beq.n	8002234 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021da:	f7ff fd9e 	bl	8001d1a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021de:	f7ff f8a5 	bl	800132c <HAL_GetTick>
 80021e2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e6:	f7ff f8a1 	bl	800132c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e2d2      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80021f8:	f7ff fdab 	bl	8001d52 <LL_RCC_MSI_IsReady>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f1      	beq.n	80021e6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220c:	f043 0308 	orr.w	r3, r3, #8
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fdc7 	bl	8001dc0 <LL_RCC_MSI_SetCalibTrimming>
 8002232:	e015      	b.n	8002260 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002234:	f7ff fd7f 	bl	8001d36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002238:	f7ff f878 	bl	800132c <HAL_GetTick>
 800223c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002240:	f7ff f874 	bl	800132c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e2a5      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002252:	f7ff fd7e 	bl	8001d52 <LL_RCC_MSI_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f1      	bne.n	8002240 <HAL_RCC_OscConfig+0x194>
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800225e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d058      	beq.n	800231e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x1d2>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d108      	bne.n	800228a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d105      	bne.n	800228a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d14b      	bne.n	800231e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e289      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d102      	bne.n	80022b0 <HAL_RCC_OscConfig+0x204>
 80022aa:	f7ff fc86 	bl	8001bba <LL_RCC_HSE_Enable>
 80022ae:	e00d      	b.n	80022cc <HAL_RCC_OscConfig+0x220>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80022b8:	d104      	bne.n	80022c4 <HAL_RCC_OscConfig+0x218>
 80022ba:	f7ff fc51 	bl	8001b60 <LL_RCC_HSE_EnableTcxo>
 80022be:	f7ff fc7c 	bl	8001bba <LL_RCC_HSE_Enable>
 80022c2:	e003      	b.n	80022cc <HAL_RCC_OscConfig+0x220>
 80022c4:	f7ff fc87 	bl	8001bd6 <LL_RCC_HSE_Disable>
 80022c8:	f7ff fc58 	bl	8001b7c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff f82a 	bl	800132c <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff f826 	bl	800132c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e257      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022ee:	f7ff fc80 	bl	8001bf2 <LL_RCC_HSE_IsReady>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f1      	beq.n	80022dc <HAL_RCC_OscConfig+0x230>
 80022f8:	e011      	b.n	800231e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff f817 	bl	800132c <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002302:	f7ff f813 	bl	800132c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e244      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002314:	f7ff fc6d 	bl	8001bf2 <LL_RCC_HSE_IsReady>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f1      	bne.n	8002302 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d046      	beq.n	80023b8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x290>
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d10e      	bne.n	8002354 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e22a      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fc8e 	bl	8001c6e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002352:	e031      	b.n	80023b8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d019      	beq.n	8002390 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	f7ff fc5a 	bl	8001c14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ffe4 	bl	800132c <HAL_GetTick>
 8002364:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe ffe0 	bl	800132c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e211      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800237a:	f7ff fc67 	bl	8001c4c <LL_RCC_HSI_IsReady>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc70 	bl	8001c6e <LL_RCC_HSI_SetCalibTrimming>
 800238e:	e013      	b.n	80023b8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002390:	f7ff fc4e 	bl	8001c30 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe ffca 	bl	800132c <HAL_GetTick>
 8002398:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe ffc6 	bl	800132c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1f7      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80023ae:	f7ff fc4d 	bl	8001c4c <LL_RCC_HSI_IsReady>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f1      	bne.n	800239c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d06e      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d056      	beq.n	800247a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d031      	beq.n	8002448 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d006      	beq.n	80023fc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e1d0      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d013      	beq.n	800242e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002406:	f7ff fc67 	bl	8001cd8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800240a:	f7fe ff8f 	bl	800132c <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe ff8b 	bl	800132c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b11      	cmp	r3, #17
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1bc      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002424:	f7ff fc68 	bl	8001cf8 <LL_RCC_LSI_IsReady>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f1      	bne.n	8002412 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	f023 0210 	bic.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002448:	f7ff fc36 	bl	8001cb8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7fe ff6e 	bl	800132c <HAL_GetTick>
 8002450:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002452:	e00c      	b.n	800246e <HAL_RCC_OscConfig+0x3c2>
 8002454:	20000004 	.word	0x20000004
 8002458:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7fe ff66 	bl	800132c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b11      	cmp	r3, #17
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e197      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800246e:	f7ff fc43 	bl	8001cf8 <LL_RCC_LSI_IsReady>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f1      	beq.n	800245c <HAL_RCC_OscConfig+0x3b0>
 8002478:	e013      	b.n	80024a2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247a:	f7ff fc2d 	bl	8001cd8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe ff55 	bl	800132c <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002486:	f7fe ff51 	bl	800132c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b11      	cmp	r3, #17
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e182      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002498:	f7ff fc2e 	bl	8001cf8 <LL_RCC_LSI_IsReady>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f1      	bne.n	8002486 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80d8 	beq.w	8002660 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024b0:	f7ff fb44 	bl	8001b3c <LL_PWR_IsEnabledBkUpAccess>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d113      	bne.n	80024e2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80024ba:	f7ff fb25 	bl	8001b08 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024be:	f7fe ff35 	bl	800132c <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c6:	f7fe ff31 	bl	800132c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e162      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024d8:	f7ff fb30 	bl	8001b3c <LL_PWR_IsEnabledBkUpAccess>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f1      	beq.n	80024c6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d07b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b85      	cmp	r3, #133	; 0x85
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d109      	bne.n	800250e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe ff0d 	bl	800132c <HAL_GetTick>
 8002512:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe feff 	bl	800132c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e12e      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002540:	f7ff fba9 	bl	8001c96 <LL_RCC_LSE_IsReady>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ef      	beq.n	800252a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b81      	cmp	r3, #129	; 0x81
 8002550:	d003      	beq.n	800255a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b85      	cmp	r3, #133	; 0x85
 8002558:	d121      	bne.n	800259e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fee7 	bl	800132c <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800256c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fed9 	bl	800132c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e108      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ec      	beq.n	8002576 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800259c:	e060      	b.n	8002660 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fec5 	bl	800132c <HAL_GetTick>
 80025a2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe feb7 	bl	800132c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0e6      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ec      	bne.n	80025ba <HAL_RCC_OscConfig+0x50e>
 80025e0:	e03e      	b.n	8002660 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fea3 	bl	800132c <HAL_GetTick>
 80025e6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fe95 	bl	800132c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0c4      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ec      	bne.n	80025fe <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7fe fe82 	bl	800132c <HAL_GetTick>
 8002628:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe fe74 	bl	800132c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0a3      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002656:	f7ff fb1e 	bl	8001c96 <LL_RCC_LSE_IsReady>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ef      	bne.n	8002640 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8099 	beq.w	800279c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	2b0c      	cmp	r3, #12
 800266e:	d06c      	beq.n	800274a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b02      	cmp	r3, #2
 8002676:	d14b      	bne.n	8002710 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	f7ff fc74 	bl	8001f64 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fe56 	bl	800132c <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fe52 	bl	800132c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b0a      	cmp	r3, #10
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e083      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002696:	f7ff fc73 	bl	8001f80 <LL_RCC_PLL_IsReady>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f1      	bne.n	8002684 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_RCC_OscConfig+0x6fc>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026b8:	0212      	lsls	r2, r2, #8
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026c6:	4311      	orrs	r1, r2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026cc:	430a      	orrs	r2, r1
 80026ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d6:	f7ff fc37 	bl	8001f48 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7fe fe1f 	bl	800132c <HAL_GetTick>
 80026ee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe fe1b 	bl	800132c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b0a      	cmp	r3, #10
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e04c      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002704:	f7ff fc3c 	bl	8001f80 <LL_RCC_PLL_IsReady>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f1      	beq.n	80026f2 <HAL_RCC_OscConfig+0x646>
 800270e:	e045      	b.n	800279c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	f7ff fc28 	bl	8001f64 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fe0a 	bl	800132c <HAL_GetTick>
 8002718:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fe06 	bl	800132c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b0a      	cmp	r3, #10
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e037      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800272e:	f7ff fc27 	bl	8001f80 <LL_RCC_PLL_IsReady>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f1      	bne.n	800271c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x700>)
 8002744:	4013      	ands	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]
 8002748:	e028      	b.n	800279c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e023      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	429a      	cmp	r2, r3
 800276a:	d115      	bne.n	8002798 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	429a      	cmp	r2, r3
 8002778:	d10e      	bne.n	8002798 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	429a      	cmp	r2, r3
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	11c1808c 	.word	0x11c1808c
 80027ac:	eefefffc 	.word	0xeefefffc

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e12c      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b98      	ldr	r3, [pc, #608]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d91b      	bls.n	800280a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b95      	ldr	r3, [pc, #596]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0207 	bic.w	r2, r3, #7
 80027da:	4993      	ldr	r1, [pc, #588]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fda3 	bl	800132c <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027ea:	f7fe fd9f 	bl	800132c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e110      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fc:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d1ef      	bne.n	80027ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fb02 	bl	8001e24 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002820:	f7fe fd84 	bl	800132c <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002828:	f7fe fd80 	bl	800132c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e0f1      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800283a:	f7ff fbdf 	bl	8001ffc <LL_RCC_IsActiveFlag_HPRE>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f1      	beq.n	8002828 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d016      	beq.n	800287e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff faf8 	bl	8001e4a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800285a:	f7fe fd67 	bl	800132c <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002862:	f7fe fd63 	bl	800132c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e0d4      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002874:	f7ff fbd3 	bl	800201e <LL_RCC_IsActiveFlag_C2HPRE>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f1      	beq.n	8002862 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff faf0 	bl	8001e74 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002894:	f7fe fd4a 	bl	800132c <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800289c:	f7fe fd46 	bl	800132c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0b7      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80028ae:	f7ff fbc8 	bl	8002042 <LL_RCC_IsActiveFlag_SHDHPRE>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f1      	beq.n	800289c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d016      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fae9 	bl	8001ea0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ce:	f7fe fd2d 	bl	800132c <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028d6:	f7fe fd29 	bl	800132c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e09a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028e8:	f7ff fbbd 	bl	8002066 <LL_RCC_IsActiveFlag_PPRE1>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f1      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d017      	beq.n	800292e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fade 	bl	8001ec6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800290a:	f7fe fd0f 	bl	800132c <HAL_GetTick>
 800290e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002912:	f7fe fd0b 	bl	800132c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e07c      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002924:	f7ff fbb0 	bl	8002088 <LL_RCC_IsActiveFlag_PPRE2>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f1      	beq.n	8002912 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d043      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d106      	bne.n	8002950 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002942:	f7ff f956 	bl	8001bf2 <LL_RCC_HSE_IsReady>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11e      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e066      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d106      	bne.n	8002966 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002958:	f7ff fb12 	bl	8001f80 <LL_RCC_PLL_IsReady>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d113      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e05b      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800296e:	f7ff f9f0 	bl	8001d52 <LL_RCC_MSI_IsReady>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e050      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800297c:	f7ff f966 	bl	8001c4c <LL_RCC_HSI_IsReady>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e049      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fa2a 	bl	8001de8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002994:	f7fe fcca 	bl	800132c <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7fe fcc6 	bl	800132c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e035      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	f7ff fa2c 	bl	8001e0e <LL_RCC_GetSysClkSource>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	429a      	cmp	r2, r3
 80029c0:	d1ec      	bne.n	800299c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d21b      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0207 	bic.w	r2, r3, #7
 80029d8:	4913      	ldr	r1, [pc, #76]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fca4 	bl	800132c <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029e8:	f7fe fca0 	bl	800132c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e011      	b.n	8002a1e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x278>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ef      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a08:	f000 f8b4 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <HAL_RCC_ClockConfig+0x27c>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_RCC_ClockConfig+0x280>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fda6 	bl	8001568 <HAL_InitTick>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	58004000 	.word	0x58004000
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	20000008 	.word	0x20000008

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	f7ff f9e4 	bl	8001e0e <LL_RCC_GetSysClkSource>
 8002a46:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a48:	f7ff facd 	bl	8001fe6 <LL_RCC_PLL_GetMainSource>
 8002a4c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x2c>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d139      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d136      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a60:	f7ff f987 	bl	8001d72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d115      	bne.n	8002a96 <HAL_RCC_GetSysClockFreq+0x62>
 8002a6a:	f7ff f982 	bl	8001d72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0x4e>
 8002a74:	f7ff f98d 	bl	8001d92 <LL_RCC_MSI_GetRange>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	e005      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x5a>
 8002a82:	f7ff f991 	bl	8001da8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a86:	4603      	mov	r3, r0
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	4a36      	ldr	r2, [pc, #216]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x134>)
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002a96:	f7ff f96c 	bl	8001d72 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x7a>
 8002aa0:	f7ff f977 	bl	8001d92 <LL_RCC_MSI_GetRange>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	e005      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x86>
 8002aae:	f7ff f97b 	bl	8001da8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a2b      	ldr	r2, [pc, #172]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x134>)
 8002abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d115      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002acc:	e012      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ad4:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e00c      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d109      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ae0:	f7ff f85a 	bl	8001b98 <LL_RCC_HSE_IsEnabledDiv2>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d102      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e001      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002af2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af4:	f7ff f98b 	bl	8001e0e <LL_RCC_GetSysClkSource>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d12f      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002afe:	f7ff fa72 	bl	8001fe6 <LL_RCC_PLL_GetMainSource>
 8002b02:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d003      	beq.n	8002b12 <HAL_RCC_GetSysClockFreq+0xde>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d003      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0xe4>
 8002b10:	e00d      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b14:	60fb      	str	r3, [r7, #12]
        break;
 8002b16:	e00d      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b18:	f7ff f83e 	bl	8001b98 <LL_RCC_HSE_IsEnabledDiv2>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d102      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8002b24:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b26:	e005      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b2a:	60fb      	str	r3, [r7, #12]
        break;
 8002b2c:	e002      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	60fb      	str	r3, [r7, #12]
        break;
 8002b32:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b34:	f7ff fa35 	bl	8001fa2 <LL_RCC_PLL_GetN>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	fb03 f402 	mul.w	r4, r3, r2
 8002b40:	f7ff fa46 	bl	8001fd0 <LL_RCC_PLL_GetDivider>
 8002b44:	4603      	mov	r3, r0
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	3301      	adds	r3, #1
 8002b4a:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b4e:	f7ff fa34 	bl	8001fba <LL_RCC_PLL_GetR>
 8002b52:	4603      	mov	r3, r0
 8002b54:	0f5b      	lsrs	r3, r3, #29
 8002b56:	3301      	adds	r3, #1
 8002b58:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b5c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b5e:	697b      	ldr	r3, [r7, #20]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}
 8002b68:	0800995c 	.word	0x0800995c
 8002b6c:	00f42400 	.word	0x00f42400
 8002b70:	01e84800 	.word	0x01e84800

08002b74 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b598      	push	{r3, r4, r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b78:	f7ff ff5c 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	f7ff f9b5 	bl	8001eec <LL_RCC_GetAHBPrescaler>
 8002b82:	4603      	mov	r3, r0
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b90:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd98      	pop	{r3, r4, r7, pc}
 8002b98:	080098fc 	.word	0x080098fc

08002b9c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b9c:	b598      	push	{r3, r4, r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002ba0:	f7ff ffe8 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	f7ff f9b9 	bl	8001f1c <LL_RCC_GetAPB1Prescaler>
 8002baa:	4603      	mov	r3, r0
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd98      	pop	{r3, r4, r7, pc}
 8002bbc:	0800993c 	.word	0x0800993c

08002bc0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b598      	push	{r3, r4, r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002bc4:	f7ff ffd6 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	f7ff f9b2 	bl	8001f32 <LL_RCC_GetAPB2Prescaler>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	0adb      	lsrs	r3, r3, #11
 8002bd2:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	bd98      	pop	{r3, r4, r7, pc}
 8002be0:	0800993c 	.word	0x0800993c

08002be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002bfc:	f7ff f981 	bl	8001f02 <LL_RCC_GetAHB3Prescaler>
 8002c00:	4603      	mov	r3, r0
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0c9c      	lsrs	r4, r3, #18
 8002c20:	f7fe ff80 	bl	8001b24 <HAL_PWREx_GetVoltageRange>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4619      	mov	r1, r3
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f000 f80b 	bl	8002c44 <RCC_SetFlashLatency>
 8002c2e:	4603      	mov	r3, r0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	0800995c 	.word	0x0800995c
 8002c3c:	080098fc 	.word	0x080098fc
 8002c40:	431bde83 	.word	0x431bde83

08002c44 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08e      	sub	sp, #56	; 0x38
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002c4e:	4a3a      	ldr	r2, [pc, #232]	; (8002d38 <RCC_SetFlashLatency+0xf4>)
 8002c50:	f107 0320 	add.w	r3, r7, #32
 8002c54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c58:	6018      	str	r0, [r3, #0]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002c5e:	4a37      	ldr	r2, [pc, #220]	; (8002d3c <RCC_SetFlashLatency+0xf8>)
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c68:	6018      	str	r0, [r3, #0]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002c6e:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <RCC_SetFlashLatency+0xfc>)
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c84:	d11b      	bne.n	8002cbe <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8a:	e014      	b.n	8002cb6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	3338      	adds	r3, #56	; 0x38
 8002c92:	443b      	add	r3, r7
 8002c94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d807      	bhi.n	8002cb0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3338      	adds	r3, #56	; 0x38
 8002ca6:	443b      	add	r3, r7
 8002ca8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cae:	e021      	b.n	8002cf4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d9e7      	bls.n	8002c8c <RCC_SetFlashLatency+0x48>
 8002cbc:	e01a      	b.n	8002cf4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc2:	e014      	b.n	8002cee <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	3338      	adds	r3, #56	; 0x38
 8002cca:	443b      	add	r3, r7
 8002ccc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d807      	bhi.n	8002ce8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3338      	adds	r3, #56	; 0x38
 8002cde:	443b      	add	r3, r7
 8002ce0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ce6:	e005      	b.n	8002cf4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	3301      	adds	r3, #1
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d9e7      	bls.n	8002cc4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <RCC_SetFlashLatency+0x100>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 0207 	bic.w	r2, r3, #7
 8002cfc:	4911      	ldr	r1, [pc, #68]	; (8002d44 <RCC_SetFlashLatency+0x100>)
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d04:	f7fe fb12 	bl	800132c <HAL_GetTick>
 8002d08:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d0a:	e008      	b.n	8002d1e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d0c:	f7fe fb0e 	bl	800132c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e007      	b.n	8002d2e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <RCC_SetFlashLatency+0x100>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1ef      	bne.n	8002d0c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3738      	adds	r7, #56	; 0x38
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	080098bc 	.word	0x080098bc
 8002d3c:	080098c4 	.word	0x080098c4
 8002d40:	080098cc 	.word	0x080098cc
 8002d44:	58004000 	.word	0x58004000

08002d48 <LL_RCC_LSE_IsReady>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d101      	bne.n	8002d60 <LL_RCC_LSE_IsReady+0x18>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <LL_RCC_LSE_IsReady+0x1a>
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_SetUSARTClockSource>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	401a      	ands	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <LL_RCC_SetI2SClockSource>:
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <LL_RCC_SetLPUARTClockSource>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <LL_RCC_SetI2CClockSource>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e06:	43db      	mvns	r3, r3
 8002e08:	401a      	ands	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_SetLPTIMClockSource>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_SetRNGClockSource>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <LL_RCC_SetADCClockSource>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <LL_RCC_SetRTCClockSource>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <LL_RCC_GetRTCClockSource>:
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <LL_RCC_ForceBackupDomainReset>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d058      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002f50:	f7fe fdda 	bl	8001b08 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f54:	f7fe f9ea 	bl	800132c <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f5a:	e009      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5c:	f7fe f9e6 	bl	800132c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d902      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f6e:	e006      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f70:	4b7b      	ldr	r3, [pc, #492]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d13c      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002f84:	f7ff ffa7 	bl	8002ed6 <LL_RCC_GetRTCClockSource>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d00f      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa0:	f7ff ffa5 	bl	8002eee <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa4:	f7ff ffb3 	bl	8002f0e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d014      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f9b6 	bl	800132c <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002fc2:	e00b      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe f9b2 	bl	800132c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d902      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	74fb      	strb	r3, [r7, #19]
            break;
 8002fda:	e004      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002fdc:	f7ff feb4 	bl	8002d48 <LL_RCC_LSE_IsReady>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d1ee      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002fe6:	7cfb      	ldrb	r3, [r7, #19]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff5b 	bl	8002eac <LL_RCC_SetRTCClockSource>
 8002ff6:	e004      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	74bb      	strb	r3, [r7, #18]
 8002ffc:	e001      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fea9 	bl	8002d6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe9e 	bl	8002d6a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fec0 	bl	8002dc4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fee6 	bl	8002e26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fedb 	bl	8002e26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fed0 	bl	8002e26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fea9 	bl	8002dee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fe9e 	bl	8002dee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fe93 	bl	8002dee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d011      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fe5e 	bl	8002d9a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e6:	d107      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fea5 	bl	8002e58 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003124:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d011      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fea3 	bl	8002e82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003144:	d107      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003156:	7cbb      	ldrb	r3, [r7, #18]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	58000400 	.word	0x58000400

08003164 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003174:	4904      	ldr	r1, [pc, #16]	; (8003188 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	58000400 	.word	0x58000400

0800318c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	58000400 	.word	0x58000400

080031ac <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80031b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	58000400 	.word	0x58000400

080031cc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80031d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d6:	619a      	str	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	58000400 	.word	0x58000400

080031e4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d101      	bne.n	80031f8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	58000400 	.word	0x58000400

08003208 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b04      	cmp	r3, #4
 8003216:	d101      	bne.n	800321c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	58000400 	.word	0x58000400

0800322c <LL_RCC_RF_DisableReset>:
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003240:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <LL_RCC_IsRFUnderReset>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003260:	d101      	bne.n	8003266 <LL_RCC_IsRFUnderReset+0x1a>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <LL_RCC_IsRFUnderReset+0x1c>
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <LL_EXTI_EnableIT_32_63+0x24>)
 800327a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800327e:	4905      	ldr	r1, [pc, #20]	; (8003294 <LL_EXTI_EnableIT_32_63+0x24>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	58000800 	.word	0x58000800

08003298 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
    return status;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	e052      	b.n	8003354 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	799b      	ldrb	r3, [r3, #6]
 80032b6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SUBGHZ_Init+0x2c>
 80032be:	7bbb      	ldrb	r3, [r7, #14]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d109      	bne.n	80032d8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd ff6f 	bl	80011ae <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80032d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032d4:	f7ff ffcc 	bl	8003270 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80032d8:	7bbb      	ldrb	r3, [r7, #14]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d126      	bne.n	800332c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80032e4:	f7ff ffa2 	bl	800322c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80032e8:	4b1c      	ldr	r3, [pc, #112]	; (800335c <HAL_SUBGHZ_Init+0xc4>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	0cdb      	lsrs	r3, r3, #19
 80032f6:	2264      	movs	r2, #100	; 0x64
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d105      	bne.n	8003310 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	609a      	str	r2, [r3, #8]
        break;
 800330e:	e007      	b.n	8003320 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	3b01      	subs	r3, #1
 8003314:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003316:	f7ff ff99 	bl	800324c <LL_RCC_IsRFUnderReset>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1ee      	bne.n	80032fe <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003320:	f7ff ff34 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003324:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003328:	f7ff ff1c 	bl	8003164 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800332c:	f7ff ff4e 	bl	80031cc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 faac 	bl	8003898 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	719a      	strb	r2, [r3, #6]

  return status;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	461a      	mov	r2, r3
 800336c:	460b      	mov	r3, r1
 800336e:	817b      	strh	r3, [r7, #10]
 8003370:	4613      	mov	r3, r2
 8003372:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	799b      	ldrb	r3, [r3, #6]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d14a      	bne.n	8003414 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	795b      	ldrb	r3, [r3, #5]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003386:	2302      	movs	r3, #2
 8003388:	e045      	b.n	8003416 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2202      	movs	r2, #2
 8003394:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fb4c 	bl	8003a34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800339c:	f7ff ff06 	bl	80031ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80033a0:	210d      	movs	r1, #13
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fa98 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80033a8:	897b      	ldrh	r3, [r7, #10]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	4619      	mov	r1, r3
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa90 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa8a 	bl	80038d8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	82bb      	strh	r3, [r7, #20]
 80033c8:	e00a      	b.n	80033e0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80033ca:	8abb      	ldrh	r3, [r7, #20]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fa7f 	bl	80038d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80033da:	8abb      	ldrh	r3, [r7, #20]
 80033dc:	3301      	adds	r3, #1
 80033de:	82bb      	strh	r3, [r7, #20]
 80033e0:	8aba      	ldrh	r2, [r7, #20]
 80033e2:	893b      	ldrh	r3, [r7, #8]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d3f0      	bcc.n	80033ca <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80033e8:	f7ff fed0 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fb45 	bl	8003a7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
 80033fe:	e001      	b.n	8003404 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	715a      	strb	r2, [r3, #5]

    return status;
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	e000      	b.n	8003416 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b088      	sub	sp, #32
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	461a      	mov	r2, r3
 800342a:	460b      	mov	r3, r1
 800342c:	817b      	strh	r3, [r7, #10]
 800342e:	4613      	mov	r3, r2
 8003430:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	799b      	ldrb	r3, [r3, #6]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d14a      	bne.n	80034d6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	795b      	ldrb	r3, [r3, #5]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003448:	2302      	movs	r3, #2
 800344a:	e045      	b.n	80034d8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 faee 	bl	8003a34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003458:	f7ff fea8 	bl	80031ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800345c:	211d      	movs	r1, #29
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fa3a 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003464:	897b      	ldrh	r3, [r7, #10]
 8003466:	0a1b      	lsrs	r3, r3, #8
 8003468:	b29b      	uxth	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	4619      	mov	r1, r3
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa32 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003474:	897b      	ldrh	r3, [r7, #10]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	4619      	mov	r1, r3
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fa2c 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003480:	2100      	movs	r1, #0
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fa28 	bl	80038d8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003488:	2300      	movs	r3, #0
 800348a:	82fb      	strh	r3, [r7, #22]
 800348c:	e009      	b.n	80034a2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800348e:	69b9      	ldr	r1, [r7, #24]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa77 	bl	8003984 <SUBGHZSPI_Receive>
      pData++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3301      	adds	r3, #1
 800349a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800349c:	8afb      	ldrh	r3, [r7, #22]
 800349e:	3301      	adds	r3, #1
 80034a0:	82fb      	strh	r3, [r7, #22]
 80034a2:	8afa      	ldrh	r2, [r7, #22]
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3f1      	bcc.n	800348e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80034aa:	f7ff fe6f 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 fae4 	bl	8003a7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e001      	b.n	80034c6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	715a      	strb	r2, [r3, #5]

    return status;
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	e000      	b.n	80034d8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80034d6:	2302      	movs	r3, #2
  }
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	460b      	mov	r3, r1
 80034ee:	72fb      	strb	r3, [r7, #11]
 80034f0:	4613      	mov	r3, r2
 80034f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	799b      	ldrb	r3, [r3, #6]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d14a      	bne.n	8003594 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	795b      	ldrb	r3, [r3, #5]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003506:	2302      	movs	r3, #2
 8003508:	e045      	b.n	8003596 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fa8f 	bl	8003a34 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	2b84      	cmp	r3, #132	; 0x84
 800351a:	d002      	beq.n	8003522 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800351c:	7afb      	ldrb	r3, [r7, #11]
 800351e:	2b94      	cmp	r3, #148	; 0x94
 8003520:	d103      	bne.n	800352a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	711a      	strb	r2, [r3, #4]
 8003528:	e002      	b.n	8003530 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003530:	f7ff fe3c 	bl	80031ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003534:	7afb      	ldrb	r3, [r7, #11]
 8003536:	4619      	mov	r1, r3
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f9cd 	bl	80038d8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	82bb      	strh	r3, [r7, #20]
 8003542:	e00a      	b.n	800355a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003544:	8abb      	ldrh	r3, [r7, #20]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f9c2 	bl	80038d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003554:	8abb      	ldrh	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	82bb      	strh	r3, [r7, #20]
 800355a:	8aba      	ldrh	r2, [r7, #20]
 800355c:	893b      	ldrh	r3, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	d3f0      	bcc.n	8003544 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003562:	f7ff fe13 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	2b84      	cmp	r3, #132	; 0x84
 800356a:	d002      	beq.n	8003572 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fa85 	bl	8003a7c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]
 800357e:	e001      	b.n	8003584 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	715a      	strb	r2, [r3, #5]

    return status;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	e000      	b.n	8003596 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b088      	sub	sp, #32
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	461a      	mov	r2, r3
 80035aa:	460b      	mov	r3, r1
 80035ac:	72fb      	strb	r3, [r7, #11]
 80035ae:	4613      	mov	r3, r2
 80035b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	799b      	ldrb	r3, [r3, #6]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d13d      	bne.n	800363c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	795b      	ldrb	r3, [r3, #5]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e038      	b.n	800363e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fa2e 	bl	8003a34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80035d8:	f7ff fde8 	bl	80031ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	4619      	mov	r1, r3
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f979 	bl	80038d8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80035e6:	2100      	movs	r1, #0
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f975 	bl	80038d8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	82fb      	strh	r3, [r7, #22]
 80035f2:	e009      	b.n	8003608 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80035f4:	69b9      	ldr	r1, [r7, #24]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f9c4 	bl	8003984 <SUBGHZSPI_Receive>
      pData++;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	3301      	adds	r3, #1
 8003600:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003602:	8afb      	ldrh	r3, [r7, #22]
 8003604:	3301      	adds	r3, #1
 8003606:	82fb      	strh	r3, [r7, #22]
 8003608:	8afa      	ldrh	r2, [r7, #22]
 800360a:	893b      	ldrh	r3, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	d3f1      	bcc.n	80035f4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003610:	f7ff fdbc 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fa31 	bl	8003a7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e001      	b.n	800362c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	715a      	strb	r2, [r3, #5]

    return status;
 8003638:	7ffb      	ldrb	r3, [r7, #31]
 800363a:	e000      	b.n	800363e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	461a      	mov	r2, r3
 8003652:	460b      	mov	r3, r1
 8003654:	72fb      	strb	r3, [r7, #11]
 8003656:	4613      	mov	r3, r2
 8003658:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	799b      	ldrb	r3, [r3, #6]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d13e      	bne.n	80036e2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	795b      	ldrb	r3, [r3, #5]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800366c:	2302      	movs	r3, #2
 800366e:	e039      	b.n	80036e4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f9dc 	bl	8003a34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800367c:	f7ff fd96 	bl	80031ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8003680:	210e      	movs	r1, #14
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f928 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003688:	7afb      	ldrb	r3, [r7, #11]
 800368a:	4619      	mov	r1, r3
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f923 	bl	80038d8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	82bb      	strh	r3, [r7, #20]
 8003696:	e00a      	b.n	80036ae <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003698:	8abb      	ldrh	r3, [r7, #20]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f918 	bl	80038d8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80036a8:	8abb      	ldrh	r3, [r7, #20]
 80036aa:	3301      	adds	r3, #1
 80036ac:	82bb      	strh	r3, [r7, #20]
 80036ae:	8aba      	ldrh	r2, [r7, #20]
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3f0      	bcc.n	8003698 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80036b6:	f7ff fd69 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f9de 	bl	8003a7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	75fb      	strb	r3, [r7, #23]
 80036cc:	e001      	b.n	80036d2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	715a      	strb	r2, [r3, #5]

    return status;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	e000      	b.n	80036e4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	461a      	mov	r2, r3
 80036f8:	460b      	mov	r3, r1
 80036fa:	72fb      	strb	r3, [r7, #11]
 80036fc:	4613      	mov	r3, r2
 80036fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	799b      	ldrb	r3, [r3, #6]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d141      	bne.n	8003792 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	795b      	ldrb	r3, [r3, #5]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003716:	2302      	movs	r3, #2
 8003718:	e03c      	b.n	8003794 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f987 	bl	8003a34 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003726:	f7ff fd41 	bl	80031ac <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800372a:	211e      	movs	r1, #30
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f8d3 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003732:	7afb      	ldrb	r3, [r7, #11]
 8003734:	4619      	mov	r1, r3
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8ce 	bl	80038d8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800373c:	2100      	movs	r1, #0
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f8ca 	bl	80038d8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	82fb      	strh	r3, [r7, #22]
 8003748:	e009      	b.n	800375e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800374a:	69b9      	ldr	r1, [r7, #24]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f919 	bl	8003984 <SUBGHZSPI_Receive>
      pData++;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	3301      	adds	r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003758:	8afb      	ldrh	r3, [r7, #22]
 800375a:	3301      	adds	r3, #1
 800375c:	82fb      	strh	r3, [r7, #22]
 800375e:	8afa      	ldrh	r2, [r7, #22]
 8003760:	893b      	ldrh	r3, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d3f1      	bcc.n	800374a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003766:	f7ff fd11 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f986 	bl	8003a7c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e001      	b.n	8003782 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	715a      	strb	r2, [r3, #5]

    return status;
 800378e:	7ffb      	ldrb	r3, [r7, #31]
 8003790:	e000      	b.n	8003794 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3720      	adds	r7, #32
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80037a4:	2300      	movs	r3, #0
 80037a6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80037a8:	f107 020c 	add.w	r2, r7, #12
 80037ac:	2302      	movs	r3, #2
 80037ae:	2112      	movs	r1, #18
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fef4 	bl	800359e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80037b6:	7b3b      	ldrb	r3, [r7, #12]
 80037b8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	b21a      	sxth	r2, r3
 80037c0:	7b7b      	ldrb	r3, [r7, #13]
 80037c2:	b21b      	sxth	r3, r3
 80037c4:	4313      	orrs	r3, r2
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80037ca:	f107 020c 	add.w	r2, r7, #12
 80037ce:	2302      	movs	r3, #2
 80037d0:	2102      	movs	r1, #2
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fe84 	bl	80034e0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f004 fc34 	bl	8008050 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80037e8:	89fb      	ldrh	r3, [r7, #14]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f004 fc3a 	bl	800806c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80037f8:	89fb      	ldrh	r3, [r7, #14]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f004 fc8a 	bl	800811c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003808:	89fb      	ldrh	r3, [r7, #14]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f004 fc90 	bl	8008138 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003818:	89fb      	ldrh	r3, [r7, #14]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f004 fc96 	bl	8008154 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003828:	89fb      	ldrh	r3, [r7, #14]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f004 fc64 	bl	8008100 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003838:	89fb      	ldrh	r3, [r7, #14]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f004 fc20 	bl	8008088 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003848:	89fb      	ldrh	r3, [r7, #14]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00d      	beq.n	800386e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800385c:	2101      	movs	r1, #1
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f004 fc20 	bl	80080a4 <HAL_SUBGHZ_CADStatusCallback>
 8003864:	e003      	b.n	800386e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003866:	2100      	movs	r1, #0
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f004 fc1b 	bl	80080a4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800386e:	89fb      	ldrh	r3, [r7, #14]
 8003870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f004 fc31 	bl	80080e0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800387e:	89fb      	ldrh	r3, [r7, #14]
 8003880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f004 fc71 	bl	8008170 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <SUBGHZSPI_Init+0x3c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <SUBGHZSPI_Init+0x3c>)
 80038a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038aa:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80038ac:	4a09      	ldr	r2, [pc, #36]	; (80038d4 <SUBGHZSPI_Init+0x3c>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80038b4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <SUBGHZSPI_Init+0x3c>)
 80038b8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80038bc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <SUBGHZSPI_Init+0x3c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <SUBGHZSPI_Init+0x3c>)
 80038c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c8:	6013      	str	r3, [r2, #0]
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	58010000 	.word	0x58010000

080038d8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80038e8:	4b23      	ldr	r3, [pc, #140]	; (8003978 <SUBGHZSPI_Transmit+0xa0>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	0cdb      	lsrs	r3, r3, #19
 80038f6:	2264      	movs	r2, #100	; 0x64
 80038f8:	fb02 f303 	mul.w	r3, r2, r3
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	609a      	str	r2, [r3, #8]
      break;
 800390e:	e008      	b.n	8003922 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3b01      	subs	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003916:	4b19      	ldr	r3, [pc, #100]	; (800397c <SUBGHZSPI_Transmit+0xa4>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d1ed      	bne.n	80038fe <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003922:	4b17      	ldr	r3, [pc, #92]	; (8003980 <SUBGHZSPI_Transmit+0xa8>)
 8003924:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <SUBGHZSPI_Transmit+0xa0>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	0cdb      	lsrs	r3, r3, #19
 800393a:	2264      	movs	r2, #100	; 0x64
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	609a      	str	r2, [r3, #8]
      break;
 8003952:	e008      	b.n	8003966 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3b01      	subs	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <SUBGHZSPI_Transmit+0xa4>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d1ed      	bne.n	8003942 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <SUBGHZSPI_Transmit+0xa4>)
 8003968:	68db      	ldr	r3, [r3, #12]

  return status;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000004 	.word	0x20000004
 800397c:	58010000 	.word	0x58010000
 8003980:	5801000c 	.word	0x5801000c

08003984 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003992:	4b25      	ldr	r3, [pc, #148]	; (8003a28 <SUBGHZSPI_Receive+0xa4>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	0cdb      	lsrs	r3, r3, #19
 80039a0:	2264      	movs	r2, #100	; 0x64
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d105      	bne.n	80039ba <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	609a      	str	r2, [r3, #8]
      break;
 80039b8:	e008      	b.n	80039cc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <SUBGHZSPI_Receive+0xa8>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d1ed      	bne.n	80039a8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <SUBGHZSPI_Receive+0xac>)
 80039ce:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	22ff      	movs	r2, #255	; 0xff
 80039d4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <SUBGHZSPI_Receive+0xa4>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	0cdb      	lsrs	r3, r3, #19
 80039e4:	2264      	movs	r2, #100	; 0x64
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e008      	b.n	8003a10 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <SUBGHZSPI_Receive+0xa8>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d1ed      	bne.n	80039ec <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <SUBGHZSPI_Receive+0xa8>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	701a      	strb	r2, [r3, #0]

  return status;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	58010000 	.word	0x58010000
 8003a30:	5801000c 	.word	0x5801000c

08003a34 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	791b      	ldrb	r3, [r3, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d111      	bne.n	8003a68 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <SUBGHZ_CheckDeviceReady+0x44>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003a54:	f7ff fbaa 	bl	80031ac <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f9      	bne.n	8003a58 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003a64:	f7ff fb92 	bl	800318c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f807 	bl	8003a7c <SUBGHZ_WaitOnBusy>
 8003a6e:	4603      	mov	r3, r0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000004 	.word	0x20000004

08003a7c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <SUBGHZ_WaitOnBusy+0x58>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	0d1b      	lsrs	r3, r3, #20
 8003a96:	2264      	movs	r2, #100	; 0x64
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003a9e:	f7ff fbb3 	bl	8003208 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003aa2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	609a      	str	r2, [r3, #8]
      break;
 8003ab4:	e009      	b.n	8003aca <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003abc:	f7ff fb92 	bl	80031e4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d0e9      	beq.n	8003a9e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e049      	b.n	8003b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fb68 	bl	80011d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 faf8 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d001      	beq.n	8003ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e02e      	b.n	8003bfe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a16      	ldr	r2, [pc, #88]	; (8003c08 <HAL_TIM_Base_Start+0x80>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_TIM_Base_Start+0x34>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d115      	bne.n	8003be8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <HAL_TIM_Base_Start+0x84>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	d015      	beq.n	8003bfa <HAL_TIM_Base_Start+0x72>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d011      	beq.n	8003bfa <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be6:	e008      	b.n	8003bfa <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e000      	b.n	8003bfc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	00010007 	.word	0x00010007

08003c10 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10f      	bne.n	8003c48 <HAL_TIM_Base_Stop+0x38>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a1a      	ldr	r2, [r3, #32]
 8003c2e:	f240 4344 	movw	r3, #1092	; 0x444
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_Base_Stop+0x38>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d001      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e036      	b.n	8003ce2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <HAL_TIM_Base_Start_IT+0x90>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_TIM_Base_Start_IT+0x44>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9e:	d115      	bne.n	8003ccc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_TIM_Base_Start_IT+0x94>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d015      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x82>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d011      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	e008      	b.n	8003cde <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e000      	b.n	8003ce0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	00010007 	.word	0x00010007

08003cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d122      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0202 	mvn.w	r2, #2
 8003d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9cd 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003d3c:	e005      	b.n	8003d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9c0 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f9cf 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d122      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d11b      	bne.n	8003da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0204 	mvn.w	r2, #4
 8003d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f9a3 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003d90:	e005      	b.n	8003d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f996 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f9a5 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d122      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d11b      	bne.n	8003df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0208 	mvn.w	r2, #8
 8003dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2204      	movs	r2, #4
 8003dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f979 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003de4:	e005      	b.n	8003df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f96c 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f97b 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d122      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d11b      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 0210 	mvn.w	r2, #16
 8003e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2208      	movs	r2, #8
 8003e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f94f 	bl	80040d6 <HAL_TIM_IC_CaptureCallback>
 8003e38:	e005      	b.n	8003e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f942 	bl	80040c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f951 	bl	80040e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d10e      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d107      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f06f 0201 	mvn.w	r2, #1
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc fb6a 	bl	800054c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d10e      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d107      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa95 	bl	80043ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d10e      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebe:	2b80      	cmp	r3, #128	; 0x80
 8003ec0:	d107      	bne.n	8003ed2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fa87 	bl	80043e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	d10e      	bne.n	8003efe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b40      	cmp	r3, #64	; 0x40
 8003eec:	d107      	bne.n	8003efe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f8fe 	bl	80040fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d10e      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d107      	bne.n	8003f2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f06f 0220 	mvn.w	r2, #32
 8003f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fa49 	bl	80043bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_TIM_ConfigClockSource+0x1c>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e0b6      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x18a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003f6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8a:	d03e      	beq.n	800400a <HAL_TIM_ConfigClockSource+0xd8>
 8003f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f90:	f200 8087 	bhi.w	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f98:	f000 8086 	beq.w	80040a8 <HAL_TIM_ConfigClockSource+0x176>
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d87f      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fa2:	2b70      	cmp	r3, #112	; 0x70
 8003fa4:	d01a      	beq.n	8003fdc <HAL_TIM_ConfigClockSource+0xaa>
 8003fa6:	2b70      	cmp	r3, #112	; 0x70
 8003fa8:	d87b      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003faa:	2b60      	cmp	r3, #96	; 0x60
 8003fac:	d050      	beq.n	8004050 <HAL_TIM_ConfigClockSource+0x11e>
 8003fae:	2b60      	cmp	r3, #96	; 0x60
 8003fb0:	d877      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fb2:	2b50      	cmp	r3, #80	; 0x50
 8003fb4:	d03c      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0xfe>
 8003fb6:	2b50      	cmp	r3, #80	; 0x50
 8003fb8:	d873      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d058      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0x13e>
 8003fbe:	2b40      	cmp	r3, #64	; 0x40
 8003fc0:	d86f      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d064      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fc6:	2b30      	cmp	r3, #48	; 0x30
 8003fc8:	d86b      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d060      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d867      	bhi.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d05c      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d05a      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x15e>
 8003fda:	e062      	b.n	80040a2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fec:	f000 f969 	bl	80042c2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ffe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	609a      	str	r2, [r3, #8]
      break;
 8004008:	e04f      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800401a:	f000 f952 	bl	80042c2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800402c:	609a      	str	r2, [r3, #8]
      break;
 800402e:	e03c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403c:	461a      	mov	r2, r3
 800403e:	f000 f8c7 	bl	80041d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2150      	movs	r1, #80	; 0x50
 8004048:	4618      	mov	r0, r3
 800404a:	f000 f91e 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 800404e:	e02c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800405c:	461a      	mov	r2, r3
 800405e:	f000 f8e5 	bl	800422c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2160      	movs	r1, #96	; 0x60
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f90e 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 800406e:	e01c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	461a      	mov	r2, r3
 800407e:	f000 f8a7 	bl	80041d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f8fe 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 800408e:	e00c      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f000 f8f5 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 80040a0:	e003      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80040a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x20>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00b      	beq.n	800415e <TIM_Base_SetConfig+0x52>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d007      	beq.n	800415e <TIM_Base_SetConfig+0x52>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1d      	ldr	r2, [pc, #116]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_Base_SetConfig+0x52>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d108      	bne.n	8004170 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d007      	beq.n	80041ac <TIM_Base_SetConfig+0xa0>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0a      	ldr	r2, [pc, #40]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0xa0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a09      	ldr	r2, [pc, #36]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40014400 	.word	0x40014400
 80041cc:	40014800 	.word	0x40014800

080041d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 030a 	bic.w	r3, r3, #10
 800420c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0210 	bic.w	r2, r3, #16
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004256:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	031b      	lsls	r3, r3, #12
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004268:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f043 0307 	orr.w	r3, r3, #7
 80042b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b087      	sub	sp, #28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	021a      	lsls	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	431a      	orrs	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	609a      	str	r2, [r3, #8]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004314:	2302      	movs	r3, #2
 8004316:	e04a      	b.n	80043ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004348:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d10c      	bne.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	4313      	orrs	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00

080043bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr

080043e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <LL_RCC_GetUSARTClockSource>:
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	401a      	ands	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	4313      	orrs	r3, r2
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <LL_RCC_GetLPUARTClockSource>:
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4013      	ands	r3, r2
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fc fedf 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2224      	movs	r2, #36	; 0x24
 8004462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0201 	bic.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8b2 	bl	80045e0 <UART_SetConfig>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e022      	b.n	80044cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fb1a 	bl	8004ac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fba0 	bl	8004c0a <UART_CheckIdleState>
 80044ca:	4603      	mov	r3, r0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08a      	sub	sp, #40	; 0x28
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d173      	bne.n	80045d6 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_UART_Transmit+0x26>
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e06c      	b.n	80045d8 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2221      	movs	r2, #33	; 0x21
 800450a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450e:	f7fc ff0d 	bl	800132c <HAL_GetTick>
 8004512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	88fa      	ldrh	r2, [r7, #6]
 8004520:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800452c:	d108      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e003      	b.n	8004548 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004548:	e02c      	b.n	80045a4 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	2180      	movs	r1, #128	; 0x80
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fba6 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e039      	b.n	80045d8 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	3302      	adds	r3, #2
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e007      	b.n	8004592 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	3301      	adds	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1cc      	bne.n	800454a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	2140      	movs	r1, #64	; 0x40
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fb73 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e006      	b.n	80045d8 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e4:	b08c      	sub	sp, #48	; 0x30
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	431a      	orrs	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	4313      	orrs	r3, r2
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b94      	ldr	r3, [pc, #592]	; (8004860 <UART_SetConfig+0x280>)
 8004610:	4013      	ands	r3, r2
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004618:	430b      	orrs	r3, r1
 800461a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a89      	ldr	r2, [pc, #548]	; (8004864 <UART_SetConfig+0x284>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004648:	4313      	orrs	r3, r2
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004656:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004660:	430b      	orrs	r3, r1
 8004662:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f023 010f 	bic.w	r1, r3, #15
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a7a      	ldr	r2, [pc, #488]	; (8004868 <UART_SetConfig+0x288>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d127      	bne.n	80046d4 <UART_SetConfig+0xf4>
 8004684:	2003      	movs	r0, #3
 8004686:	f7ff feb4 	bl	80043f2 <LL_RCC_GetUSARTClockSource>
 800468a:	4603      	mov	r3, r0
 800468c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004690:	2b03      	cmp	r3, #3
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0xec>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <UART_SetConfig+0xbc>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046bd 	.word	0x080046bd
 80046a4:	080046b5 	.word	0x080046b5
 80046a8:	080046c5 	.word	0x080046c5
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b2:	e080      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ba:	e07c      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e078      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e074      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e070      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a64      	ldr	r2, [pc, #400]	; (800486c <UART_SetConfig+0x28c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d138      	bne.n	8004750 <UART_SetConfig+0x170>
 80046de:	200c      	movs	r0, #12
 80046e0:	f7ff fe87 	bl	80043f2 <LL_RCC_GetUSARTClockSource>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d82c      	bhi.n	8004748 <UART_SetConfig+0x168>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0x114>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004749 	.word	0x08004749
 80046fc:	08004749 	.word	0x08004749
 8004700:	08004749 	.word	0x08004749
 8004704:	08004739 	.word	0x08004739
 8004708:	08004749 	.word	0x08004749
 800470c:	08004749 	.word	0x08004749
 8004710:	08004749 	.word	0x08004749
 8004714:	08004731 	.word	0x08004731
 8004718:	08004749 	.word	0x08004749
 800471c:	08004749 	.word	0x08004749
 8004720:	08004749 	.word	0x08004749
 8004724:	08004741 	.word	0x08004741
 8004728:	2300      	movs	r3, #0
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472e:	e042      	b.n	80047b6 <UART_SetConfig+0x1d6>
 8004730:	2302      	movs	r3, #2
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004736:	e03e      	b.n	80047b6 <UART_SetConfig+0x1d6>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473e:	e03a      	b.n	80047b6 <UART_SetConfig+0x1d6>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004746:	e036      	b.n	80047b6 <UART_SetConfig+0x1d6>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474e:	e032      	b.n	80047b6 <UART_SetConfig+0x1d6>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a43      	ldr	r2, [pc, #268]	; (8004864 <UART_SetConfig+0x284>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d12a      	bne.n	80047b0 <UART_SetConfig+0x1d0>
 800475a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800475e:	f7ff fe5a 	bl	8004416 <LL_RCC_GetLPUARTClockSource>
 8004762:	4603      	mov	r3, r0
 8004764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004768:	d01a      	beq.n	80047a0 <UART_SetConfig+0x1c0>
 800476a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476e:	d81b      	bhi.n	80047a8 <UART_SetConfig+0x1c8>
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004774:	d00c      	beq.n	8004790 <UART_SetConfig+0x1b0>
 8004776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477a:	d815      	bhi.n	80047a8 <UART_SetConfig+0x1c8>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <UART_SetConfig+0x1a8>
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004784:	d008      	beq.n	8004798 <UART_SetConfig+0x1b8>
 8004786:	e00f      	b.n	80047a8 <UART_SetConfig+0x1c8>
 8004788:	2300      	movs	r3, #0
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800478e:	e012      	b.n	80047b6 <UART_SetConfig+0x1d6>
 8004790:	2302      	movs	r3, #2
 8004792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004796:	e00e      	b.n	80047b6 <UART_SetConfig+0x1d6>
 8004798:	2304      	movs	r3, #4
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479e:	e00a      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80047a0:	2308      	movs	r3, #8
 80047a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a6:	e006      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80047a8:	2310      	movs	r3, #16
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ae:	e002      	b.n	80047b6 <UART_SetConfig+0x1d6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <UART_SetConfig+0x284>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	f040 80a4 	bne.w	800490a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d823      	bhi.n	8004812 <UART_SetConfig+0x232>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x1f0>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	08004813 	.word	0x08004813
 80047d8:	080047fd 	.word	0x080047fd
 80047dc:	08004813 	.word	0x08004813
 80047e0:	08004803 	.word	0x08004803
 80047e4:	08004813 	.word	0x08004813
 80047e8:	08004813 	.word	0x08004813
 80047ec:	08004813 	.word	0x08004813
 80047f0:	0800480b 	.word	0x0800480b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe f9d2 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 80047f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047fa:	e010      	b.n	800481e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <UART_SetConfig+0x290>)
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004800:	e00d      	b.n	800481e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004802:	f7fe f917 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004808:	e009      	b.n	800481e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004810:	e005      	b.n	800481e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800481c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8137 	beq.w	8004a94 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	4a12      	ldr	r2, [pc, #72]	; (8004874 <UART_SetConfig+0x294>)
 800482c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004830:	461a      	mov	r2, r3
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	fbb3 f3f2 	udiv	r3, r3, r2
 8004838:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4413      	add	r3, r2
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	429a      	cmp	r2, r3
 8004848:	d305      	bcc.n	8004856 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	429a      	cmp	r2, r3
 8004854:	d910      	bls.n	8004878 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800485c:	e11a      	b.n	8004a94 <UART_SetConfig+0x4b4>
 800485e:	bf00      	nop
 8004860:	cfff69f3 	.word	0xcfff69f3
 8004864:	40008000 	.word	0x40008000
 8004868:	40013800 	.word	0x40013800
 800486c:	40004400 	.word	0x40004400
 8004870:	00f42400 	.word	0x00f42400
 8004874:	080099c8 	.word	0x080099c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2200      	movs	r2, #0
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	60fa      	str	r2, [r7, #12]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	4a8e      	ldr	r2, [pc, #568]	; (8004ac0 <UART_SetConfig+0x4e0>)
 8004886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800488a:	b29b      	uxth	r3, r3
 800488c:	2200      	movs	r2, #0
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004896:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800489a:	f7fb fcc1 	bl	8000220 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	f04f 0300 	mov.w	r3, #0
 80048ae:	020b      	lsls	r3, r1, #8
 80048b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048b4:	0202      	lsls	r2, r0, #8
 80048b6:	6979      	ldr	r1, [r7, #20]
 80048b8:	6849      	ldr	r1, [r1, #4]
 80048ba:	0849      	lsrs	r1, r1, #1
 80048bc:	2000      	movs	r0, #0
 80048be:	460c      	mov	r4, r1
 80048c0:	4605      	mov	r5, r0
 80048c2:	eb12 0804 	adds.w	r8, r2, r4
 80048c6:	eb43 0905 	adc.w	r9, r3, r5
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	469a      	mov	sl, r3
 80048d2:	4693      	mov	fp, r2
 80048d4:	4652      	mov	r2, sl
 80048d6:	465b      	mov	r3, fp
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fb fca0 	bl	8000220 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4613      	mov	r3, r2
 80048e6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ee:	d308      	bcc.n	8004902 <UART_SetConfig+0x322>
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f6:	d204      	bcs.n	8004902 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	e0c8      	b.n	8004a94 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004908:	e0c4      	b.n	8004a94 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004912:	d167      	bne.n	80049e4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004918:	2b08      	cmp	r3, #8
 800491a:	d828      	bhi.n	800496e <UART_SetConfig+0x38e>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <UART_SetConfig+0x344>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004949 	.word	0x08004949
 8004928:	08004951 	.word	0x08004951
 800492c:	08004959 	.word	0x08004959
 8004930:	0800496f 	.word	0x0800496f
 8004934:	0800495f 	.word	0x0800495f
 8004938:	0800496f 	.word	0x0800496f
 800493c:	0800496f 	.word	0x0800496f
 8004940:	0800496f 	.word	0x0800496f
 8004944:	08004967 	.word	0x08004967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7fe f928 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800494e:	e014      	b.n	800497a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7fe f936 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8004954:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004956:	e010      	b.n	800497a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004958:	4b5a      	ldr	r3, [pc, #360]	; (8004ac4 <UART_SetConfig+0x4e4>)
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800495c:	e00d      	b.n	800497a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495e:	f7fe f869 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004964:	e009      	b.n	800497a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800496c:	e005      	b.n	800497a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004978:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8089 	beq.w	8004a94 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	4a4e      	ldr	r2, [pc, #312]	; (8004ac0 <UART_SetConfig+0x4e0>)
 8004988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800498c:	461a      	mov	r2, r3
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	fbb3 f3f2 	udiv	r3, r3, r2
 8004994:	005a      	lsls	r2, r3, #1
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	441a      	add	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	d916      	bls.n	80049dc <UART_SetConfig+0x3fc>
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b4:	d212      	bcs.n	80049dc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f023 030f 	bic.w	r3, r3, #15
 80049be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	8bfb      	ldrh	r3, [r7, #30]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	8bfa      	ldrh	r2, [r7, #30]
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	e05b      	b.n	8004a94 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049e2:	e057      	b.n	8004a94 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d828      	bhi.n	8004a3e <UART_SetConfig+0x45e>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0x414>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a3f 	.word	0x08004a3f
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a3f 	.word	0x08004a3f
 8004a10:	08004a3f 	.word	0x08004a3f
 8004a14:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fe f8c0 	bl	8002b9c <HAL_RCC_GetPCLK1Freq>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a1e:	e014      	b.n	8004a4a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe f8ce 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a26:	e010      	b.n	8004a4a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <UART_SetConfig+0x4e4>)
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a2c:	e00d      	b.n	8004a4a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe f801 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a34:	e009      	b.n	8004a4a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a3c:	e005      	b.n	8004a4a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a48:	bf00      	nop
    }

    if (pclk != 0U)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <UART_SetConfig+0x4e0>)
 8004a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	441a      	add	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	d909      	bls.n	8004a8e <UART_SetConfig+0x4ae>
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a80:	d205      	bcs.n	8004a8e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60da      	str	r2, [r3, #12]
 8004a8c:	e002      	b.n	8004a94 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ab0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3730      	adds	r7, #48	; 0x30
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004abe:	bf00      	nop
 8004ac0:	080099c8 	.word	0x080099c8
 8004ac4:	00f42400 	.word	0x00f42400

08004ac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01a      	beq.n	8004bde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc6:	d10a      	bne.n	8004bde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	605a      	str	r2, [r3, #4]
  }
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b086      	sub	sp, #24
 8004c0e:	af02      	add	r7, sp, #8
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c1a:	f7fc fb87 	bl	800132c <HAL_GetTick>
 8004c1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d10e      	bne.n	8004c4c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f832 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e028      	b.n	8004c9e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d10e      	bne.n	8004c78 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f81c 	bl	8004ca6 <UART_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e012      	b.n	8004c9e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b09c      	sub	sp, #112	; 0x70
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb6:	e0a9      	b.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbe:	f000 80a5 	beq.w	8004e0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fc fb33 	bl	800132c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d140      	bne.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cec:	667b      	str	r3, [r7, #100]	; 0x64
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e6      	bne.n	8004cd8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3308      	adds	r3, #8
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	663b      	str	r3, [r7, #96]	; 0x60
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e5      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e069      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d051      	beq.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d76:	d149      	bne.n	8004e0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
 8004da2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e6      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3308      	adds	r3, #8
 8004dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f023 0301 	bic.w	r3, r3, #1
 8004dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dd4:	623a      	str	r2, [r7, #32]
 8004dd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	69f9      	ldr	r1, [r7, #28]
 8004dda:	6a3a      	ldr	r2, [r7, #32]
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e010      	b.n	8004e2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69da      	ldr	r2, [r3, #28]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	4013      	ands	r3, r2
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	bf0c      	ite	eq
 8004e1c:	2301      	moveq	r3, #1
 8004e1e:	2300      	movne	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	f43f af46 	beq.w	8004cb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3770      	adds	r7, #112	; 0x70
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_UARTEx_DisableFifoMode+0x16>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e027      	b.n	8004e9c <HAL_UARTEx_DisableFifoMode+0x66>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	; 0x24
 8004e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e02d      	b.n	8004f1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2224      	movs	r2, #36	; 0x24
 8004eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0201 	bic.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f850 	bl	8004fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e02d      	b.n	8004f96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2224      	movs	r2, #36	; 0x24
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f812 	bl	8004fa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d108      	bne.n	8004fc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fc0:	e031      	b.n	8005026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	0e5b      	lsrs	r3, r3, #25
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	0f5b      	lsrs	r3, r3, #29
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fea:	7bbb      	ldrb	r3, [r7, #14]
 8004fec:	7b3a      	ldrb	r2, [r7, #12]
 8004fee:	4910      	ldr	r1, [pc, #64]	; (8005030 <UARTEx_SetNbDataToProcess+0x90>)
 8004ff0:	5c8a      	ldrb	r2, [r1, r2]
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ff6:	7b3a      	ldrb	r2, [r7, #12]
 8004ff8:	490e      	ldr	r1, [pc, #56]	; (8005034 <UARTEx_SetNbDataToProcess+0x94>)
 8004ffa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	7b7a      	ldrb	r2, [r7, #13]
 800500c:	4908      	ldr	r1, [pc, #32]	; (8005030 <UARTEx_SetNbDataToProcess+0x90>)
 800500e:	5c8a      	ldrb	r2, [r1, r2]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005014:	7b7a      	ldrb	r2, [r7, #13]
 8005016:	4907      	ldr	r1, [pc, #28]	; (8005034 <UARTEx_SetNbDataToProcess+0x94>)
 8005018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800501a:	fb93 f3f2 	sdiv	r3, r3, r2
 800501e:	b29a      	uxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	080099e0 	.word	0x080099e0
 8005034:	080099e8 	.word	0x080099e8

08005038 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af02      	add	r7, sp, #8
 800503e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8005040:	4a24      	ldr	r2, [pc, #144]	; (80050d4 <RadioInit+0x9c>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8005046:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <RadioInit+0xa0>)
 8005048:	2200      	movs	r2, #0
 800504a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800504c:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <RadioInit+0xa0>)
 800504e:	2200      	movs	r2, #0
 8005050:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8005052:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <RadioInit+0xa0>)
 8005054:	2200      	movs	r2, #0
 8005056:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005058:	4b1f      	ldr	r3, [pc, #124]	; (80050d8 <RadioInit+0xa0>)
 800505a:	2200      	movs	r2, #0
 800505c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800505e:	481f      	ldr	r0, [pc, #124]	; (80050dc <RadioInit+0xa4>)
 8005060:	f001 ff88 	bl	8006f74 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8005064:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <RadioInit+0xa0>)
 8005066:	2200      	movs	r2, #0
 8005068:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <RadioInit+0xa0>)
 800506c:	2200      	movs	r2, #0
 800506e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8005070:	f002 fa1c 	bl	80074ac <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005074:	2100      	movs	r1, #0
 8005076:	2000      	movs	r0, #0
 8005078:	f002 fde8 	bl	8007c4c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800507c:	2204      	movs	r2, #4
 800507e:	2100      	movs	r1, #0
 8005080:	2001      	movs	r0, #1
 8005082:	f002 fba5 	bl	80077d0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005086:	2300      	movs	r3, #0
 8005088:	2200      	movs	r2, #0
 800508a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800508e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005092:	f002 fad5 	bl	8007640 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8005096:	f000 fe91 	bl	8005dbc <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800509a:	2300      	movs	r3, #0
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <RadioInit+0xa8>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050a6:	480f      	ldr	r0, [pc, #60]	; (80050e4 <RadioInit+0xac>)
 80050a8:	f003 fb32 	bl	8008710 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80050ac:	2300      	movs	r3, #0
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <RadioInit+0xb0>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050b8:	480c      	ldr	r0, [pc, #48]	; (80050ec <RadioInit+0xb4>)
 80050ba:	f003 fb29 	bl	8008710 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80050be:	4809      	ldr	r0, [pc, #36]	; (80050e4 <RadioInit+0xac>)
 80050c0:	f003 fbca 	bl	8008858 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80050c4:	4809      	ldr	r0, [pc, #36]	; (80050ec <RadioInit+0xb4>)
 80050c6:	f003 fbc7 	bl	8008858 <UTIL_TIMER_Stop>
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000384 	.word	0x20000384
 80050d8:	20000388 	.word	0x20000388
 80050dc:	080061b5 	.word	0x080061b5
 80050e0:	0800613d 	.word	0x0800613d
 80050e4:	200003e4 	.word	0x200003e4
 80050e8:	08006151 	.word	0x08006151
 80050ec:	200003fc 	.word	0x200003fc

080050f0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80050f4:	f001 ff86 	bl	8007004 <SUBGRF_GetOperatingMode>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b07      	cmp	r3, #7
 80050fc:	d00a      	beq.n	8005114 <RadioGetStatus+0x24>
 80050fe:	2b07      	cmp	r3, #7
 8005100:	dc0a      	bgt.n	8005118 <RadioGetStatus+0x28>
 8005102:	2b04      	cmp	r3, #4
 8005104:	d002      	beq.n	800510c <RadioGetStatus+0x1c>
 8005106:	2b05      	cmp	r3, #5
 8005108:	d002      	beq.n	8005110 <RadioGetStatus+0x20>
 800510a:	e005      	b.n	8005118 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800510c:	2302      	movs	r3, #2
 800510e:	e004      	b.n	800511a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8005110:	2301      	movs	r3, #1
 8005112:	e002      	b.n	800511a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8005114:	2303      	movs	r3, #3
 8005116:	e000      	b.n	800511a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8005118:	2300      	movs	r3, #0
    }
}
 800511a:	4618      	mov	r0, r3
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800512a:	4a2a      	ldr	r2, [pc, #168]	; (80051d4 <RadioSetModem+0xb4>)
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	4618      	mov	r0, r3
 8005134:	f003 f95d 	bl	80083f2 <RFW_SetRadioModem>
    switch( modem )
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	2b05      	cmp	r3, #5
 800513c:	d80e      	bhi.n	800515c <RadioSetModem+0x3c>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <RadioSetModem+0x24>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	0800516b 	.word	0x0800516b
 8005148:	08005179 	.word	0x08005179
 800514c:	0800515d 	.word	0x0800515d
 8005150:	0800519f 	.word	0x0800519f
 8005154:	080051ad 	.word	0x080051ad
 8005158:	080051bb 	.word	0x080051bb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800515c:	2003      	movs	r0, #3
 800515e:	f002 fb11 	bl	8007784 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005162:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <RadioSetModem+0xb4>)
 8005164:	2200      	movs	r2, #0
 8005166:	735a      	strb	r2, [r3, #13]
        break;
 8005168:	e02f      	b.n	80051ca <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800516a:	2000      	movs	r0, #0
 800516c:	f002 fb0a 	bl	8007784 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8005170:	4b18      	ldr	r3, [pc, #96]	; (80051d4 <RadioSetModem+0xb4>)
 8005172:	2200      	movs	r2, #0
 8005174:	735a      	strb	r2, [r3, #13]
        break;
 8005176:	e028      	b.n	80051ca <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8005178:	2001      	movs	r0, #1
 800517a:	f002 fb03 	bl	8007784 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800517e:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <RadioSetModem+0xb4>)
 8005180:	7b5a      	ldrb	r2, [r3, #13]
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <RadioSetModem+0xb4>)
 8005184:	7b1b      	ldrb	r3, [r3, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d01e      	beq.n	80051c8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800518a:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <RadioSetModem+0xb4>)
 800518c:	7b1a      	ldrb	r2, [r3, #12]
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <RadioSetModem+0xb4>)
 8005190:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8005192:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <RadioSetModem+0xb4>)
 8005194:	7b5b      	ldrb	r3, [r3, #13]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 ff9a 	bl	80060d0 <RadioSetPublicNetwork>
        }
        break;
 800519c:	e014      	b.n	80051c8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800519e:	2002      	movs	r0, #2
 80051a0:	f002 faf0 	bl	8007784 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <RadioSetModem+0xb4>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	735a      	strb	r2, [r3, #13]
        break;
 80051aa:	e00e      	b.n	80051ca <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80051ac:	2002      	movs	r0, #2
 80051ae:	f002 fae9 	bl	8007784 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <RadioSetModem+0xb4>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	735a      	strb	r2, [r3, #13]
        break;
 80051b8:	e007      	b.n	80051ca <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80051ba:	2000      	movs	r0, #0
 80051bc:	f002 fae2 	bl	8007784 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80051c0:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <RadioSetModem+0xb4>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	735a      	strb	r2, [r3, #13]
        break;
 80051c6:	e000      	b.n	80051ca <RadioSetModem+0xaa>
        break;
 80051c8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000388 	.word	0x20000388

080051d8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f002 fa89 	bl	80076f8 <SUBGRF_SetRfFrequency>
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b090      	sub	sp, #64	; 0x40
 80051f2:	af0a      	add	r7, sp, #40	; 0x28
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80051fe:	2301      	movs	r3, #1
 8005200:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800520a:	f000 fdea 	bl	8005de2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800520e:	2000      	movs	r0, #0
 8005210:	f7ff ff86 	bl	8005120 <RadioSetModem>

    RadioSetChannel( freq );
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff ffdf 	bl	80051d8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800521a:	2301      	movs	r3, #1
 800521c:	9309      	str	r3, [sp, #36]	; 0x24
 800521e:	2300      	movs	r3, #0
 8005220:	9308      	str	r3, [sp, #32]
 8005222:	2300      	movs	r3, #0
 8005224:	9307      	str	r3, [sp, #28]
 8005226:	2300      	movs	r3, #0
 8005228:	9306      	str	r3, [sp, #24]
 800522a:	2300      	movs	r3, #0
 800522c:	9305      	str	r3, [sp, #20]
 800522e:	2300      	movs	r3, #0
 8005230:	9304      	str	r3, [sp, #16]
 8005232:	2300      	movs	r3, #0
 8005234:	9303      	str	r3, [sp, #12]
 8005236:	2300      	movs	r3, #0
 8005238:	9302      	str	r3, [sp, #8]
 800523a:	2303      	movs	r3, #3
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	2000      	movs	r0, #0
 800524c:	f000 f83c 	bl	80052c8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8005250:	2000      	movs	r0, #0
 8005252:	f000 fdcd 	bl	8005df0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8005256:	f000 ff69 	bl	800612c <RadioGetWakeupTime>
 800525a:	4603      	mov	r3, r0
 800525c:	4618      	mov	r0, r3
 800525e:	f7fc f879 	bl	8001354 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8005262:	f003 fb93 	bl	800898c <UTIL_TIMER_GetCurrentTime>
 8005266:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005268:	e00d      	b.n	8005286 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800526a:	2000      	movs	r0, #0
 800526c:	f000 feae 	bl	8005fcc <RadioRssi>
 8005270:	4603      	mov	r3, r0
 8005272:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8005274:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527c:	429a      	cmp	r2, r3
 800527e:	dd02      	ble.n	8005286 <RadioIsChannelFree+0x98>
        {
            status = false;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]
            break;
 8005284:	e006      	b.n	8005294 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005286:	6938      	ldr	r0, [r7, #16]
 8005288:	f003 fb92 	bl	80089b0 <UTIL_TIMER_GetElapsedTime>
 800528c:	4602      	mov	r2, r0
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	4293      	cmp	r3, r2
 8005292:	d8ea      	bhi.n	800526a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8005294:	f000 fda5 	bl	8005de2 <RadioStandby>

    return status;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80052ac:	2300      	movs	r3, #0
 80052ae:	2200      	movs	r2, #0
 80052b0:	2100      	movs	r1, #0
 80052b2:	2000      	movs	r0, #0
 80052b4:	f002 f9c4 	bl	8007640 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80052b8:	f001 ff75 	bl	80071a6 <SUBGRF_GetRandom>
 80052bc:	6078      	str	r0, [r7, #4]

    return rnd;
 80052be:	687b      	ldr	r3, [r7, #4]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	461a      	mov	r2, r3
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	4613      	mov	r3, r2
 80052da:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80052dc:	4ab9      	ldr	r2, [pc, #740]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80052de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80052e2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80052e4:	f003 f843 	bl	800836e <RFW_DeInit>
    if( rxContinuous == true )
 80052e8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80052f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80052fc:	4ab2      	ldr	r2, [pc, #712]	; (80055c8 <RadioSetRxConfig+0x300>)
 80052fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005302:	7013      	strb	r3, [r2, #0]
 8005304:	e002      	b.n	800530c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8005306:	4bb0      	ldr	r3, [pc, #704]	; (80055c8 <RadioSetRxConfig+0x300>)
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b05      	cmp	r3, #5
 8005310:	d009      	beq.n	8005326 <RadioSetRxConfig+0x5e>
 8005312:	2b05      	cmp	r3, #5
 8005314:	f300 81d7 	bgt.w	80056c6 <RadioSetRxConfig+0x3fe>
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80bf 	beq.w	800549c <RadioSetRxConfig+0x1d4>
 800531e:	2b01      	cmp	r3, #1
 8005320:	f000 8124 	beq.w	800556c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8005324:	e1cf      	b.n	80056c6 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8005326:	2001      	movs	r0, #1
 8005328:	f002 f882 	bl	8007430 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800532c:	4ba5      	ldr	r3, [pc, #660]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005334:	4aa3      	ldr	r2, [pc, #652]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800533a:	4ba2      	ldr	r3, [pc, #648]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800533c:	2209      	movs	r2, #9
 800533e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8005342:	4ba0      	ldr	r3, [pc, #640]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005344:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005348:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800534a:	68b8      	ldr	r0, [r7, #8]
 800534c:	f002 ff42 	bl	80081d4 <SUBGRF_GetFskBandwidthRegValue>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	4b9b      	ldr	r3, [pc, #620]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800535a:	4b9a      	ldr	r3, [pc, #616]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800535c:	2200      	movs	r2, #0
 800535e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005360:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	b29a      	uxth	r2, r3
 8005366:	4b97      	ldr	r3, [pc, #604]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005368:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800536a:	4b96      	ldr	r3, [pc, #600]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800536c:	2200      	movs	r2, #0
 800536e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8005370:	4b94      	ldr	r3, [pc, #592]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005372:	2210      	movs	r2, #16
 8005374:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005376:	4b93      	ldr	r3, [pc, #588]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005378:	2200      	movs	r2, #0
 800537a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800537c:	4b91      	ldr	r3, [pc, #580]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800537e:	2200      	movs	r2, #0
 8005380:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8005382:	4b91      	ldr	r3, [pc, #580]	; (80055c8 <RadioSetRxConfig+0x300>)
 8005384:	781a      	ldrb	r2, [r3, #0]
 8005386:	4b8f      	ldr	r3, [pc, #572]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005388:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800538a:	4b8e      	ldr	r3, [pc, #568]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800538c:	2201      	movs	r2, #1
 800538e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8005390:	4b8c      	ldr	r3, [pc, #560]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005392:	2200      	movs	r2, #0
 8005394:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8005396:	2005      	movs	r0, #5
 8005398:	f7ff fec2 	bl	8005120 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800539c:	488b      	ldr	r0, [pc, #556]	; (80055cc <RadioSetRxConfig+0x304>)
 800539e:	f002 fae5 	bl	800796c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80053a2:	488b      	ldr	r0, [pc, #556]	; (80055d0 <RadioSetRxConfig+0x308>)
 80053a4:	f002 fbb4 	bl	8007b10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80053a8:	4a8a      	ldr	r2, [pc, #552]	; (80055d4 <RadioSetRxConfig+0x30c>)
 80053aa:	f107 031c 	add.w	r3, r7, #28
 80053ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80053b6:	f107 031c 	add.w	r3, r7, #28
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 fe71 	bl	80070a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80053c0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053c4:	f001 febc 	bl	8007140 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80053c8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80053cc:	f000 fe1d 	bl	800600a <RadioRead>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80053d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053da:	f023 0310 	bic.w	r3, r3, #16
 80053de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80053e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053e6:	4619      	mov	r1, r3
 80053e8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80053ec:	f000 fdfb 	bl	8005fe6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80053f0:	2104      	movs	r1, #4
 80053f2:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80053f6:	f000 fdf6 	bl	8005fe6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80053fa:	f640 009b 	movw	r0, #2203	; 0x89b
 80053fe:	f000 fe04 	bl	800600a <RadioRead>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800540c:	f023 031c 	bic.w	r3, r3, #28
 8005410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8005414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005418:	f043 0308 	orr.w	r3, r3, #8
 800541c:	b2db      	uxtb	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	f640 009b 	movw	r0, #2203	; 0x89b
 8005424:	f000 fddf 	bl	8005fe6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8005428:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800542c:	f000 fded 	bl	800600a <RadioRead>
 8005430:	4603      	mov	r3, r0
 8005432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8005436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800543a:	f023 0318 	bic.w	r3, r3, #24
 800543e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8005442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005446:	f043 0318 	orr.w	r3, r3, #24
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8005452:	f000 fdc8 	bl	8005fe6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8005456:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800545a:	f000 fdd6 	bl	800600a <RadioRead>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8005464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8005470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005474:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8005478:	b2db      	uxtb	r3, r3
 800547a:	4619      	mov	r1, r3
 800547c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8005480:	f000 fdb1 	bl	8005fe6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005484:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005486:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	461a      	mov	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	fbb2 f3f3 	udiv	r3, r2, r3
 8005496:	4a4b      	ldr	r2, [pc, #300]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005498:	6093      	str	r3, [r2, #8]
            break;
 800549a:	e115      	b.n	80056c8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800549c:	2000      	movs	r0, #0
 800549e:	f001 ffc7 	bl	8007430 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80054a2:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80054aa:	4a46      	ldr	r2, [pc, #280]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80054b0:	4b44      	ldr	r3, [pc, #272]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054b2:	220b      	movs	r2, #11
 80054b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80054b8:	68b8      	ldr	r0, [r7, #8]
 80054ba:	f002 fe8b 	bl	80081d4 <SUBGRF_GetFskBandwidthRegValue>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b40      	ldr	r3, [pc, #256]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80054c8:	4b3e      	ldr	r3, [pc, #248]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80054ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	4b3b      	ldr	r3, [pc, #236]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054d6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80054d8:	4b3a      	ldr	r3, [pc, #232]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054da:	2204      	movs	r2, #4
 80054dc:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80054de:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054e0:	2218      	movs	r2, #24
 80054e2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80054e4:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80054ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80054f8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80054fa:	4b33      	ldr	r3, [pc, #204]	; (80055c8 <RadioSetRxConfig+0x300>)
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005500:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8005502:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800550a:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800550c:	22f2      	movs	r2, #242	; 0xf2
 800550e:	75da      	strb	r2, [r3, #23]
 8005510:	e002      	b.n	8005518 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8005512:	4b2c      	ldr	r3, [pc, #176]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005514:	2201      	movs	r2, #1
 8005516:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005518:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800551a:	2201      	movs	r2, #1
 800551c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800551e:	f000 fc60 	bl	8005de2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8005522:	2000      	movs	r0, #0
 8005524:	f7ff fdfc 	bl	8005120 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005528:	4828      	ldr	r0, [pc, #160]	; (80055cc <RadioSetRxConfig+0x304>)
 800552a:	f002 fa1f 	bl	800796c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800552e:	4828      	ldr	r0, [pc, #160]	; (80055d0 <RadioSetRxConfig+0x308>)
 8005530:	f002 faee 	bl	8007b10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8005534:	4a28      	ldr	r2, [pc, #160]	; (80055d8 <RadioSetRxConfig+0x310>)
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800553e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fdab 	bl	80070a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800554c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005550:	f001 fdf6 	bl	8007140 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8005554:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005556:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005568:	6093      	str	r3, [r2, #8]
            break;
 800556a:	e0ad      	b.n	80056c8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800556c:	2000      	movs	r0, #0
 800556e:	f001 ff5f 	bl	8007430 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8005584:	4a15      	ldr	r2, [pc, #84]	; (80055dc <RadioSetRxConfig+0x314>)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4413      	add	r3, r2
 800558a:	781a      	ldrb	r2, [r3, #0]
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 800558e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8005592:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <RadioSetRxConfig+0x2e4>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b0b      	cmp	r3, #11
 80055a4:	d008      	beq.n	80055b8 <RadioSetRxConfig+0x2f0>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d005      	beq.n	80055b8 <RadioSetRxConfig+0x2f0>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d116      	bne.n	80055e0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b0c      	cmp	r3, #12
 80055b6:	d113      	bne.n	80055e0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80055b8:	4b02      	ldr	r3, [pc, #8]	; (80055c4 <RadioSetRxConfig+0x2fc>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80055c0:	e012      	b.n	80055e8 <RadioSetRxConfig+0x320>
 80055c2:	bf00      	nop
 80055c4:	20000388 	.word	0x20000388
 80055c8:	2000000d 	.word	0x2000000d
 80055cc:	200003c0 	.word	0x200003c0
 80055d0:	20000396 	.word	0x20000396
 80055d4:	080098d8 	.word	0x080098d8
 80055d8:	080098e0 	.word	0x080098e0
 80055dc:	08009a7c 	.word	0x08009a7c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80055e0:	4b3b      	ldr	r3, [pc, #236]	; (80056d0 <RadioSetRxConfig+0x408>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80055e8:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <RadioSetRxConfig+0x408>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80055ee:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <RadioSetRxConfig+0x408>)
 80055f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f4:	2b05      	cmp	r3, #5
 80055f6:	d004      	beq.n	8005602 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80055f8:	4b35      	ldr	r3, [pc, #212]	; (80056d0 <RadioSetRxConfig+0x408>)
 80055fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d10a      	bne.n	8005618 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8005602:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005604:	2b0b      	cmp	r3, #11
 8005606:	d803      	bhi.n	8005610 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8005608:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <RadioSetRxConfig+0x408>)
 800560a:	220c      	movs	r2, #12
 800560c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800560e:	e006      	b.n	800561e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005610:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <RadioSetRxConfig+0x408>)
 8005612:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005614:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005616:	e002      	b.n	800561e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005618:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <RadioSetRxConfig+0x408>)
 800561a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800561c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800561e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005622:	4b2b      	ldr	r3, [pc, #172]	; (80056d0 <RadioSetRxConfig+0x408>)
 8005624:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005626:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <RadioSetRxConfig+0x40c>)
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	4b29      	ldr	r3, [pc, #164]	; (80056d0 <RadioSetRxConfig+0x408>)
 800562c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800562e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8005632:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <RadioSetRxConfig+0x408>)
 8005634:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8005638:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <RadioSetRxConfig+0x408>)
 800563e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005642:	f000 fbce 	bl	8005de2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8005646:	2001      	movs	r0, #1
 8005648:	f7ff fd6a 	bl	8005120 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800564c:	4822      	ldr	r0, [pc, #136]	; (80056d8 <RadioSetRxConfig+0x410>)
 800564e:	f002 f98d 	bl	800796c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005652:	4822      	ldr	r0, [pc, #136]	; (80056dc <RadioSetRxConfig+0x414>)
 8005654:	f002 fa5c 	bl	8007b10 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8005658:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800565a:	b2db      	uxtb	r3, r3
 800565c:	4618      	mov	r0, r3
 800565e:	f001 fef6 	bl	800744e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8005662:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8005666:	f002 fbaf 	bl	8007dc8 <SUBGRF_ReadRegister>
 800566a:	4603      	mov	r3, r0
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	4619      	mov	r1, r3
 8005674:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8005678:	f002 fb92 	bl	8007da0 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800567c:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <RadioSetRxConfig+0x408>)
 800567e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10d      	bne.n	80056a2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8005686:	f240 7036 	movw	r0, #1846	; 0x736
 800568a:	f002 fb9d 	bl	8007dc8 <SUBGRF_ReadRegister>
 800568e:	4603      	mov	r3, r0
 8005690:	f023 0304 	bic.w	r3, r3, #4
 8005694:	b2db      	uxtb	r3, r3
 8005696:	4619      	mov	r1, r3
 8005698:	f240 7036 	movw	r0, #1846	; 0x736
 800569c:	f002 fb80 	bl	8007da0 <SUBGRF_WriteRegister>
 80056a0:	e00c      	b.n	80056bc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80056a2:	f240 7036 	movw	r0, #1846	; 0x736
 80056a6:	f002 fb8f 	bl	8007dc8 <SUBGRF_ReadRegister>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f043 0304 	orr.w	r3, r3, #4
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	4619      	mov	r1, r3
 80056b4:	f240 7036 	movw	r0, #1846	; 0x736
 80056b8:	f002 fb72 	bl	8007da0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <RadioSetRxConfig+0x408>)
 80056be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056c2:	609a      	str	r2, [r3, #8]
            break;
 80056c4:	e000      	b.n	80056c8 <RadioSetRxConfig+0x400>
            break;
 80056c6:	bf00      	nop
    }
}
 80056c8:	bf00      	nop
 80056ca:	3728      	adds	r7, #40	; 0x28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20000388 	.word	0x20000388
 80056d4:	2000000d 	.word	0x2000000d
 80056d8:	200003c0 	.word	0x200003c0
 80056dc:	20000396 	.word	0x20000396

080056e0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60ba      	str	r2, [r7, #8]
 80056e8:	607b      	str	r3, [r7, #4]
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	460b      	mov	r3, r1
 80056f0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80056f2:	f002 fe3c 	bl	800836e <RFW_DeInit>
    switch( modem )
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	f000 80c7 	beq.w	800588c <RadioSetTxConfig+0x1ac>
 80056fe:	2b04      	cmp	r3, #4
 8005700:	f300 80d6 	bgt.w	80058b0 <RadioSetTxConfig+0x1d0>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <RadioSetTxConfig+0x2e>
 8005708:	2b01      	cmp	r3, #1
 800570a:	d059      	beq.n	80057c0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800570c:	e0d0      	b.n	80058b0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800570e:	4b77      	ldr	r3, [pc, #476]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8005716:	4a75      	ldr	r2, [pc, #468]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800571c:	4b73      	ldr	r3, [pc, #460]	; (80058ec <RadioSetTxConfig+0x20c>)
 800571e:	220b      	movs	r2, #11
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f002 fd55 	bl	80081d4 <SUBGRF_GetFskBandwidthRegValue>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	4b6f      	ldr	r3, [pc, #444]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8005734:	4a6d      	ldr	r2, [pc, #436]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800573a:	4b6c      	ldr	r3, [pc, #432]	; (80058ec <RadioSetTxConfig+0x20c>)
 800573c:	2200      	movs	r2, #0
 800573e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8005740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	b29a      	uxth	r2, r3
 8005746:	4b69      	ldr	r3, [pc, #420]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005748:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800574a:	4b68      	ldr	r3, [pc, #416]	; (80058ec <RadioSetTxConfig+0x20c>)
 800574c:	2204      	movs	r2, #4
 800574e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8005750:	4b66      	ldr	r3, [pc, #408]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005752:	2218      	movs	r2, #24
 8005754:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8005756:	4b65      	ldr	r3, [pc, #404]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005758:	2200      	movs	r2, #0
 800575a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800575c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005760:	f083 0301 	eor.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	4b60      	ldr	r3, [pc, #384]	; (80058ec <RadioSetTxConfig+0x20c>)
 800576a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800576c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8005774:	4b5d      	ldr	r3, [pc, #372]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005776:	22f2      	movs	r2, #242	; 0xf2
 8005778:	75da      	strb	r2, [r3, #23]
 800577a:	e002      	b.n	8005782 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800577c:	4b5b      	ldr	r3, [pc, #364]	; (80058ec <RadioSetTxConfig+0x20c>)
 800577e:	2201      	movs	r2, #1
 8005780:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8005782:	4b5a      	ldr	r3, [pc, #360]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005784:	2201      	movs	r2, #1
 8005786:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8005788:	f000 fb2b 	bl	8005de2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800578c:	2000      	movs	r0, #0
 800578e:	f7ff fcc7 	bl	8005120 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005792:	4857      	ldr	r0, [pc, #348]	; (80058f0 <RadioSetTxConfig+0x210>)
 8005794:	f002 f8ea 	bl	800796c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005798:	4856      	ldr	r0, [pc, #344]	; (80058f4 <RadioSetTxConfig+0x214>)
 800579a:	f002 f9b9 	bl	8007b10 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800579e:	4a56      	ldr	r2, [pc, #344]	; (80058f8 <RadioSetTxConfig+0x218>)
 80057a0:	f107 0310 	add.w	r3, r7, #16
 80057a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 fc76 	bl	80070a2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80057b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ba:	f001 fcc1 	bl	8007140 <SUBGRF_SetWhiteningSeed>
            break;
 80057be:	e078      	b.n	80058b2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80057c0:	4b4a      	ldr	r3, [pc, #296]	; (80058ec <RadioSetTxConfig+0x20c>)
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	4b47      	ldr	r3, [pc, #284]	; (80058ec <RadioSetTxConfig+0x20c>)
 80057ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80057d2:	4a4a      	ldr	r2, [pc, #296]	; (80058fc <RadioSetTxConfig+0x21c>)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	4b44      	ldr	r3, [pc, #272]	; (80058ec <RadioSetTxConfig+0x20c>)
 80057dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80057e0:	4a42      	ldr	r2, [pc, #264]	; (80058ec <RadioSetTxConfig+0x20c>)
 80057e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057e6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <RadioSetTxConfig+0x11c>
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	2b0b      	cmp	r3, #11
 80057f4:	d008      	beq.n	8005808 <RadioSetTxConfig+0x128>
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d005      	beq.n	8005808 <RadioSetTxConfig+0x128>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d107      	bne.n	8005812 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d104      	bne.n	8005812 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8005808:	4b38      	ldr	r3, [pc, #224]	; (80058ec <RadioSetTxConfig+0x20c>)
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005810:	e003      	b.n	800581a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8005812:	4b36      	ldr	r3, [pc, #216]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800581a:	4b34      	ldr	r3, [pc, #208]	; (80058ec <RadioSetTxConfig+0x20c>)
 800581c:	2201      	movs	r2, #1
 800581e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005822:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005826:	2b05      	cmp	r3, #5
 8005828:	d004      	beq.n	8005834 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800582a:	4b30      	ldr	r3, [pc, #192]	; (80058ec <RadioSetTxConfig+0x20c>)
 800582c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8005830:	2b06      	cmp	r3, #6
 8005832:	d10a      	bne.n	800584a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8005834:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005836:	2b0b      	cmp	r3, #11
 8005838:	d803      	bhi.n	8005842 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800583a:	4b2c      	ldr	r3, [pc, #176]	; (80058ec <RadioSetTxConfig+0x20c>)
 800583c:	220c      	movs	r2, #12
 800583e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8005840:	e006      	b.n	8005850 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8005842:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005844:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005846:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8005848:	e002      	b.n	8005850 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800584a:	4a28      	ldr	r2, [pc, #160]	; (80058ec <RadioSetTxConfig+0x20c>)
 800584c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800584e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8005850:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005854:	4b25      	ldr	r3, [pc, #148]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005856:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8005858:	4b29      	ldr	r3, [pc, #164]	; (8005900 <RadioSetTxConfig+0x220>)
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <RadioSetTxConfig+0x20c>)
 800585e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8005860:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005864:	4b21      	ldr	r3, [pc, #132]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005866:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800586a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800586e:	4b1f      	ldr	r3, [pc, #124]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8005874:	f000 fab5 	bl	8005de2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8005878:	2001      	movs	r0, #1
 800587a:	f7ff fc51 	bl	8005120 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800587e:	481c      	ldr	r0, [pc, #112]	; (80058f0 <RadioSetTxConfig+0x210>)
 8005880:	f002 f874 	bl	800796c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005884:	481b      	ldr	r0, [pc, #108]	; (80058f4 <RadioSetTxConfig+0x214>)
 8005886:	f002 f943 	bl	8007b10 <SUBGRF_SetPacketParams>
            break;
 800588a:	e012      	b.n	80058b2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800588c:	2004      	movs	r0, #4
 800588e:	f7ff fc47 	bl	8005120 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005892:	4b16      	ldr	r3, [pc, #88]	; (80058ec <RadioSetTxConfig+0x20c>)
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800589a:	4a14      	ldr	r2, [pc, #80]	; (80058ec <RadioSetTxConfig+0x20c>)
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80058a0:	4b12      	ldr	r3, [pc, #72]	; (80058ec <RadioSetTxConfig+0x20c>)
 80058a2:	2216      	movs	r2, #22
 80058a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80058a8:	4811      	ldr	r0, [pc, #68]	; (80058f0 <RadioSetTxConfig+0x210>)
 80058aa:	f002 f85f 	bl	800796c <SUBGRF_SetModulationParams>
            break;
 80058ae:	e000      	b.n	80058b2 <RadioSetTxConfig+0x1d2>
            break;
 80058b0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80058b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f002 fb8e 	bl	8007fd8 <SUBGRF_SetRfTxPower>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <RadioSetTxConfig+0x20c>)
 80058c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80058c6:	210e      	movs	r1, #14
 80058c8:	f640 101f 	movw	r0, #2335	; 0x91f
 80058cc:	f002 fa68 	bl	8007da0 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <RadioSetTxConfig+0x20c>)
 80058d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80058d6:	4618      	mov	r0, r3
 80058d8:	f002 fd5d 	bl	8008396 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80058dc:	4a03      	ldr	r2, [pc, #12]	; (80058ec <RadioSetTxConfig+0x20c>)
 80058de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e0:	6053      	str	r3, [r2, #4]
}
 80058e2:	bf00      	nop
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000388 	.word	0x20000388
 80058f0:	200003c0 	.word	0x200003c0
 80058f4:	20000396 	.word	0x20000396
 80058f8:	080098e0 	.word	0x080098e0
 80058fc:	08009a7c 	.word	0x08009a7c
 8005900:	2000000d 	.word	0x2000000d

08005904 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
    return true;
 800590c:	2301      	movs	r3, #1
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	2b0a      	cmp	r3, #10
 800592a:	d83e      	bhi.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <RadioGetLoRaBandwidthInHz+0x1c>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	08005961 	.word	0x08005961
 8005938:	08005971 	.word	0x08005971
 800593c:	08005981 	.word	0x08005981
 8005940:	08005991 	.word	0x08005991
 8005944:	08005999 	.word	0x08005999
 8005948:	0800599f 	.word	0x0800599f
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059ab 	.word	0x080059ab
 8005954:	08005969 	.word	0x08005969
 8005958:	08005979 	.word	0x08005979
 800595c:	08005989 	.word	0x08005989
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8005960:	f641 6384 	movw	r3, #7812	; 0x1e84
 8005964:	60fb      	str	r3, [r7, #12]
        break;
 8005966:	e020      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8005968:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800596c:	60fb      	str	r3, [r7, #12]
        break;
 800596e:	e01c      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8005970:	f643 5309 	movw	r3, #15625	; 0x3d09
 8005974:	60fb      	str	r3, [r7, #12]
        break;
 8005976:	e018      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8005978:	f245 1361 	movw	r3, #20833	; 0x5161
 800597c:	60fb      	str	r3, [r7, #12]
        break;
 800597e:	e014      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8005980:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005984:	60fb      	str	r3, [r7, #12]
        break;
 8005986:	e010      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8005988:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800598c:	60fb      	str	r3, [r7, #12]
        break;
 800598e:	e00c      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8005990:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005994:	60fb      	str	r3, [r7, #12]
        break;
 8005996:	e008      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8005998:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <RadioGetLoRaBandwidthInHz+0xa0>)
 800599a:	60fb      	str	r3, [r7, #12]
        break;
 800599c:	e005      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <RadioGetLoRaBandwidthInHz+0xa4>)
 80059a0:	60fb      	str	r3, [r7, #12]
        break;
 80059a2:	e002      	b.n	80059aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80059a6:	60fb      	str	r3, [r7, #12]
        break;
 80059a8:	bf00      	nop
    }

    return bandwidthInHz;
 80059aa:	68fb      	ldr	r3, [r7, #12]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	0001e848 	.word	0x0001e848
 80059bc:	0003d090 	.word	0x0003d090
 80059c0:	0007a120 	.word	0x0007a120

080059c4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	70fb      	strb	r3, [r7, #3]
 80059d6:	460b      	mov	r3, r1
 80059d8:	803b      	strh	r3, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80059de:	883b      	ldrh	r3, [r7, #0]
 80059e0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80059e2:	78ba      	ldrb	r2, [r7, #2]
 80059e4:	f082 0201 	eor.w	r2, r2, #1
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	2a00      	cmp	r2, #0
 80059ec:	d001      	beq.n	80059f2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80059ee:	2208      	movs	r2, #8
 80059f0:	e000      	b.n	80059f4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80059f2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80059f4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80059f6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80059fa:	7c3b      	ldrb	r3, [r7, #16]
 80059fc:	7d39      	ldrb	r1, [r7, #20]
 80059fe:	2900      	cmp	r1, #0
 8005a00:	d001      	beq.n	8005a06 <RadioGetGfskTimeOnAirNumerator+0x42>
 8005a02:	2102      	movs	r1, #2
 8005a04:	e000      	b.n	8005a08 <RadioGetGfskTimeOnAirNumerator+0x44>
 8005a06:	2100      	movs	r1, #0
 8005a08:	440b      	add	r3, r1
 8005a0a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005a0c:	4413      	add	r3, r2
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b08b      	sub	sp, #44	; 0x2c
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4611      	mov	r1, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	460b      	mov	r3, r1
 8005a28:	71fb      	strb	r3, [r7, #7]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	3304      	adds	r3, #4
 8005a32:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005a34:	2300      	movs	r3, #0
 8005a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b05      	cmp	r3, #5
 8005a3e:	d002      	beq.n	8005a46 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b06      	cmp	r3, #6
 8005a44:	d104      	bne.n	8005a50 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8005a46:	88bb      	ldrh	r3, [r7, #4]
 8005a48:	2b0b      	cmp	r3, #11
 8005a4a:	d801      	bhi.n	8005a50 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8005a4c:	230c      	movs	r3, #12
 8005a4e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d105      	bne.n	8005a62 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b0b      	cmp	r3, #11
 8005a5a:	d008      	beq.n	8005a6e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b0c      	cmp	r3, #12
 8005a60:	d005      	beq.n	8005a6e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d102      	bne.n	8005a74 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005a74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005a78:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8005a7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	d001      	beq.n	8005a86 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8005a82:	2210      	movs	r2, #16
 8005a84:	e000      	b.n	8005a88 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8005a86:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005a88:	4413      	add	r3, r2
 8005a8a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8005a90:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8005a92:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	d001      	beq.n	8005a9e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	e000      	b.n	8005aa0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8005a9e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8005aa0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005aa2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b06      	cmp	r3, #6
 8005aa8:	d803      	bhi.n	8005ab2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	623b      	str	r3, [r7, #32]
 8005ab0:	e00e      	b.n	8005ad0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8005ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	3b02      	subs	r3, #2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	e002      	b.n	8005ad0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da01      	bge.n	8005ada <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	4413      	add	r3, r2
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	fb03 f202 	mul.w	r2, r3, r2
 8005aee:	88bb      	ldrh	r3, [r7, #4]
 8005af0:	4413      	add	r3, r2
    int32_t intermediate =
 8005af2:	330c      	adds	r3, #12
 8005af4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	d802      	bhi.n	8005b02 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	3302      	adds	r3, #2
 8005b00:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	3b02      	subs	r3, #2
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	372c      	adds	r7, #44	; 0x2c
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr
	...

08005b1c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af04      	add	r7, sp, #16
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	461a      	mov	r2, r3
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8005b34:	2301      	movs	r3, #1
 8005b36:	613b      	str	r3, [r7, #16]

    switch( modem )
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <RadioTimeOnAir+0x28>
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d017      	beq.n	8005b72 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8005b42:	e035      	b.n	8005bb0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005b44:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8005b48:	8c3a      	ldrh	r2, [r7, #32]
 8005b4a:	7bb9      	ldrb	r1, [r7, #14]
 8005b4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	4603      	mov	r3, r0
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff ff32 	bl	80059c4 <RadioGetGfskTimeOnAirNumerator>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	613b      	str	r3, [r7, #16]
        break;
 8005b70:	e01e      	b.n	8005bb0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005b72:	8c39      	ldrh	r1, [r7, #32]
 8005b74:	7bba      	ldrb	r2, [r7, #14]
 8005b76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005b7a:	9302      	str	r3, [sp, #8]
 8005b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	68b8      	ldr	r0, [r7, #8]
 8005b8e:	f7ff ff43 	bl	8005a18 <RadioGetLoRaTimeOnAirNumerator>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <RadioTimeOnAir+0xac>)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff feb6 	bl	8005918 <RadioGetLoRaBandwidthInHz>
 8005bac:	6138      	str	r0, [r7, #16]
        break;
 8005bae:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	1e5a      	subs	r2, r3, #1
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08009a7c 	.word	0x08009a7c

08005bcc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f240 2101 	movw	r1, #513	; 0x201
 8005be0:	f240 2001 	movw	r0, #513	; 0x201
 8005be4:	f001 fd2c 	bl	8007640 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005be8:	4b70      	ldr	r3, [pc, #448]	; (8005dac <RadioSend+0x1e0>)
 8005bea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f002 f9c9 	bl	8007f88 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8005bf6:	4b6d      	ldr	r3, [pc, #436]	; (8005dac <RadioSend+0x1e0>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d112      	bne.n	8005c24 <RadioSend+0x58>
 8005bfe:	4b6b      	ldr	r3, [pc, #428]	; (8005dac <RadioSend+0x1e0>)
 8005c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c04:	2b06      	cmp	r3, #6
 8005c06:	d10d      	bne.n	8005c24 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8005c08:	f640 0089 	movw	r0, #2185	; 0x889
 8005c0c:	f002 f8dc 	bl	8007dc8 <SUBGRF_ReadRegister>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f023 0304 	bic.w	r3, r3, #4
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f640 0089 	movw	r0, #2185	; 0x889
 8005c1e:	f002 f8bf 	bl	8007da0 <SUBGRF_WriteRegister>
 8005c22:	e00c      	b.n	8005c3e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005c24:	f640 0089 	movw	r0, #2185	; 0x889
 8005c28:	f002 f8ce 	bl	8007dc8 <SUBGRF_ReadRegister>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f043 0304 	orr.w	r3, r3, #4
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	4619      	mov	r1, r3
 8005c36:	f640 0089 	movw	r0, #2185	; 0x889
 8005c3a:	f002 f8b1 	bl	8007da0 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8005c3e:	4b5b      	ldr	r3, [pc, #364]	; (8005dac <RadioSend+0x1e0>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	f200 80a2 	bhi.w	8005d8c <RadioSend+0x1c0>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <RadioSend+0x84>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c7f 	.word	0x08005c7f
 8005c54:	08005c65 	.word	0x08005c65
 8005c58:	08005c7f 	.word	0x08005c7f
 8005c5c:	08005cd5 	.word	0x08005cd5
 8005c60:	08005cf5 	.word	0x08005cf5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8005c64:	4a51      	ldr	r2, [pc, #324]	; (8005dac <RadioSend+0x1e0>)
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005c6a:	4851      	ldr	r0, [pc, #324]	; (8005db0 <RadioSend+0x1e4>)
 8005c6c:	f001 ff50 	bl	8007b10 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	2200      	movs	r2, #0
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fa00 	bl	800707c <SUBGRF_SendPayload>
            break;
 8005c7c:	e087      	b.n	8005d8e <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8005c7e:	f002 fb7c 	bl	800837a <RFW_Is_Init>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d118      	bne.n	8005cba <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8005c88:	f107 020d 	add.w	r2, r7, #13
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f002 fb8a 	bl	80083aa <RFW_TransmitInit>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10c      	bne.n	8005cb6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8005c9c:	7b7a      	ldrb	r2, [r7, #13]
 8005c9e:	4b43      	ldr	r3, [pc, #268]	; (8005dac <RadioSend+0x1e0>)
 8005ca0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ca2:	4843      	ldr	r0, [pc, #268]	; (8005db0 <RadioSend+0x1e4>)
 8005ca4:	f001 ff34 	bl	8007b10 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8005ca8:	7b7b      	ldrb	r3, [r7, #13]
 8005caa:	2200      	movs	r2, #0
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 f9e4 	bl	800707c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8005cb4:	e06b      	b.n	8005d8e <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e073      	b.n	8005da2 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8005cba:	4a3c      	ldr	r2, [pc, #240]	; (8005dac <RadioSend+0x1e0>)
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005cc0:	483b      	ldr	r0, [pc, #236]	; (8005db0 <RadioSend+0x1e4>)
 8005cc2:	f001 ff25 	bl	8007b10 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 f9d5 	bl	800707c <SUBGRF_SendPayload>
            break;
 8005cd2:	e05c      	b.n	8005d8e <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005cd4:	4b35      	ldr	r3, [pc, #212]	; (8005dac <RadioSend+0x1e0>)
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8005cda:	4a34      	ldr	r2, [pc, #208]	; (8005dac <RadioSend+0x1e0>)
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005ce0:	4833      	ldr	r0, [pc, #204]	; (8005db0 <RadioSend+0x1e4>)
 8005ce2:	f001 ff15 	bl	8007b10 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4619      	mov	r1, r3
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f9c5 	bl	800707c <SUBGRF_SendPayload>
            break;
 8005cf2:	e04c      	b.n	8005d8e <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8005cf4:	78fb      	ldrb	r3, [r7, #3]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	482e      	ldr	r0, [pc, #184]	; (8005db4 <RadioSend+0x1e8>)
 8005cfc:	f000 fc98 	bl	8006630 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <RadioSend+0x1e0>)
 8005d02:	2202      	movs	r2, #2
 8005d04:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8005d06:	78fb      	ldrb	r3, [r7, #3]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	4b27      	ldr	r3, [pc, #156]	; (8005dac <RadioSend+0x1e0>)
 8005d0e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8005d10:	4827      	ldr	r0, [pc, #156]	; (8005db0 <RadioSend+0x1e4>)
 8005d12:	f001 fefd 	bl	8007b10 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8005d16:	2100      	movs	r1, #0
 8005d18:	20f1      	movs	r0, #241	; 0xf1
 8005d1a:	f000 f964 	bl	8005fe6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8005d1e:	2100      	movs	r1, #0
 8005d20:	20f0      	movs	r0, #240	; 0xf0
 8005d22:	f000 f960 	bl	8005fe6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8005d26:	4b21      	ldr	r3, [pc, #132]	; (8005dac <RadioSend+0x1e0>)
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d108      	bne.n	8005d40 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8005d2e:	2170      	movs	r1, #112	; 0x70
 8005d30:	20f3      	movs	r0, #243	; 0xf3
 8005d32:	f000 f958 	bl	8005fe6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8005d36:	211d      	movs	r1, #29
 8005d38:	20f2      	movs	r0, #242	; 0xf2
 8005d3a:	f000 f954 	bl	8005fe6 <RadioWrite>
 8005d3e:	e007      	b.n	8005d50 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8005d40:	21e1      	movs	r1, #225	; 0xe1
 8005d42:	20f3      	movs	r0, #243	; 0xf3
 8005d44:	f000 f94f 	bl	8005fe6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8005d48:	2104      	movs	r1, #4
 8005d4a:	20f2      	movs	r0, #242	; 0xf2
 8005d4c:	f000 f94b 	bl	8005fe6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3302      	adds	r3, #2
 8005d5a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8005d5c:	89fb      	ldrh	r3, [r7, #14]
 8005d5e:	0a1b      	lsrs	r3, r3, #8
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	4619      	mov	r1, r3
 8005d66:	20f4      	movs	r0, #244	; 0xf4
 8005d68:	f000 f93d 	bl	8005fe6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8005d6c:	89fb      	ldrh	r3, [r7, #14]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	4619      	mov	r1, r3
 8005d72:	20f5      	movs	r0, #245	; 0xf5
 8005d74:	f000 f937 	bl	8005fe6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8005d82:	4619      	mov	r1, r3
 8005d84:	480b      	ldr	r0, [pc, #44]	; (8005db4 <RadioSend+0x1e8>)
 8005d86:	f001 f979 	bl	800707c <SUBGRF_SendPayload>
            break;
 8005d8a:	e000      	b.n	8005d8e <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8005d8c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8005d8e:	4b07      	ldr	r3, [pc, #28]	; (8005dac <RadioSend+0x1e0>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4619      	mov	r1, r3
 8005d94:	4808      	ldr	r0, [pc, #32]	; (8005db8 <RadioSend+0x1ec>)
 8005d96:	f002 fdcf 	bl	8008938 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8005d9a:	4807      	ldr	r0, [pc, #28]	; (8005db8 <RadioSend+0x1ec>)
 8005d9c:	f002 fcee 	bl	800877c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000388 	.word	0x20000388
 8005db0:	20000396 	.word	0x20000396
 8005db4:	20000284 	.word	0x20000284
 8005db8:	200003e4 	.word	0x200003e4

08005dbc <RadioSleep>:

static void RadioSleep( void )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8005dc6:	793b      	ldrb	r3, [r7, #4]
 8005dc8:	f043 0304 	orr.w	r3, r3, #4
 8005dcc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8005dce:	7938      	ldrb	r0, [r7, #4]
 8005dd0:	f001 fa30 	bl	8007234 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	f7fb fabd 	bl	8001354 <HAL_Delay>
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <RadioStandby>:

static void RadioStandby( void )
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8005de6:	2000      	movs	r0, #0
 8005de8:	f001 fa56 	bl	8007298 <SUBGRF_SetStandby>
}
 8005dec:	bf00      	nop
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8005df8:	f002 fabf 	bl	800837a <RFW_Is_Init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d102      	bne.n	8005e08 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8005e02:	f002 fae2 	bl	80083ca <RFW_ReceiveInit>
 8005e06:	e007      	b.n	8005e18 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f240 2162 	movw	r1, #610	; 0x262
 8005e10:	f240 2062 	movw	r0, #610	; 0x262
 8005e14:	f001 fc14 	bl	8007640 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d006      	beq.n	8005e2c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4811      	ldr	r0, [pc, #68]	; (8005e68 <RadioRx+0x78>)
 8005e22:	f002 fd89 	bl	8008938 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005e26:	4810      	ldr	r0, [pc, #64]	; (8005e68 <RadioRx+0x78>)
 8005e28:	f002 fca8 	bl	800877c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <RadioRx+0x7c>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005e32:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <RadioRx+0x7c>)
 8005e34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e38:	2100      	movs	r1, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f002 f8a4 	bl	8007f88 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <RadioRx+0x7c>)
 8005e42:	785b      	ldrb	r3, [r3, #1]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005e48:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005e4c:	f001 fa60 	bl	8007310 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8005e50:	e005      	b.n	8005e5e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <RadioRx+0x7c>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	019b      	lsls	r3, r3, #6
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 fa59 	bl	8007310 <SUBGRF_SetRx>
}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	200003fc 	.word	0x200003fc
 8005e6c:	20000388 	.word	0x20000388

08005e70 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8005e78:	f002 fa7f 	bl	800837a <RFW_Is_Init>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d102      	bne.n	8005e88 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8005e82:	f002 faa2 	bl	80083ca <RFW_ReceiveInit>
 8005e86:	e007      	b.n	8005e98 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f240 2162 	movw	r1, #610	; 0x262
 8005e90:	f240 2062 	movw	r0, #610	; 0x262
 8005e94:	f001 fbd4 	bl	8007640 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d006      	beq.n	8005eac <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4811      	ldr	r0, [pc, #68]	; (8005ee8 <RadioRxBoosted+0x78>)
 8005ea2:	f002 fd49 	bl	8008938 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8005ea6:	4810      	ldr	r0, [pc, #64]	; (8005ee8 <RadioRxBoosted+0x78>)
 8005ea8:	f002 fc68 	bl	800877c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <RadioRxBoosted+0x7c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <RadioRxBoosted+0x7c>)
 8005eb4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f002 f864 	bl	8007f88 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <RadioRxBoosted+0x7c>)
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d004      	beq.n	8005ed2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8005ec8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005ecc:	f001 fa40 	bl	8007350 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8005ed0:	e005      	b.n	8005ede <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <RadioRxBoosted+0x7c>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	019b      	lsls	r3, r3, #6
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 fa39 	bl	8007350 <SUBGRF_SetRxBoosted>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200003fc 	.word	0x200003fc
 8005eec:	20000388 	.word	0x20000388

08005ef0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	005a      	lsls	r2, r3, #1
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	4a0c      	ldr	r2, [pc, #48]	; (8005f34 <RadioSetRxDutyCycle+0x44>)
 8005f04:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005f06:	2300      	movs	r3, #0
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f0e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f12:	f001 fb95 	bl	8007640 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <RadioSetRxDutyCycle+0x44>)
 8005f18:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f002 f832 	bl	8007f88 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fa36 	bl	8007398 <SUBGRF_SetRxDutyCycle>
}
 8005f2c:	bf00      	nop
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000388 	.word	0x20000388

08005f38 <RadioStartCad>:

static void RadioStartCad( void )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8005f3c:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <RadioStartCad+0x2c>)
 8005f3e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f002 f81f 	bl	8007f88 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8005f52:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8005f56:	f001 fb73 	bl	8007640 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8005f5a:	f001 fa49 	bl	80073f0 <SUBGRF_SetCad>
}
 8005f5e:	bf00      	nop
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000388 	.word	0x20000388

08005f68 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
 8005f74:	4613      	mov	r3, r2
 8005f76:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8005f78:	883b      	ldrh	r3, [r7, #0]
 8005f7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 fbb7 	bl	80076f8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8005f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f002 f822 	bl	8007fd8 <SUBGRF_SetRfTxPower>
 8005f94:	4603      	mov	r3, r0
 8005f96:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8005f98:	210e      	movs	r1, #14
 8005f9a:	f640 101f 	movw	r0, #2335	; 0x91f
 8005f9e:	f001 feff 	bl	8007da0 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 ffee 	bl	8007f88 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8005fac:	f001 fa2e 	bl	800740c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8005fb0:	68f9      	ldr	r1, [r7, #12]
 8005fb2:	4805      	ldr	r0, [pc, #20]	; (8005fc8 <RadioSetTxContinuousWave+0x60>)
 8005fb4:	f002 fcc0 	bl	8008938 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8005fb8:	4803      	ldr	r0, [pc, #12]	; (8005fc8 <RadioSetTxContinuousWave+0x60>)
 8005fba:	f002 fbdf 	bl	800877c <UTIL_TIMER_Start>
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	200003e4 	.word	0x200003e4

08005fcc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8005fd6:	f001 fe50 	bl	8007c7a <SUBGRF_GetRssiInst>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	b21b      	sxth	r3, r3
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	4603      	mov	r3, r0
 8005fee:	460a      	mov	r2, r1
 8005ff0:	80fb      	strh	r3, [r7, #6]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8005ff6:	797a      	ldrb	r2, [r7, #5]
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fecf 	bl	8007da0 <SUBGRF_WriteRegister>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	4603      	mov	r3, r0
 8006012:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	4618      	mov	r0, r3
 8006018:	f001 fed6 	bl	8007dc8 <SUBGRF_ReadRegister>
 800601c:	4603      	mov	r3, r0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	4603      	mov	r3, r0
 800602e:	6039      	str	r1, [r7, #0]
 8006030:	80fb      	strh	r3, [r7, #6]
 8006032:	4613      	mov	r3, r2
 8006034:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006036:	797b      	ldrb	r3, [r7, #5]
 8006038:	b29a      	uxth	r2, r3
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	6839      	ldr	r1, [r7, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f001 fed6 	bl	8007df0 <SUBGRF_WriteRegisters>
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	6039      	str	r1, [r7, #0]
 8006056:	80fb      	strh	r3, [r7, #6]
 8006058:	4613      	mov	r3, r2
 800605a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800605c:	797b      	ldrb	r3, [r7, #5]
 800605e:	b29a      	uxth	r2, r3
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fee5 	bl	8007e34 <SUBGRF_ReadRegisters>
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	460a      	mov	r2, r1
 800607e:	71fb      	strb	r3, [r7, #7]
 8006080:	4613      	mov	r3, r2
 8006082:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10a      	bne.n	80060a0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800608a:	4a0e      	ldr	r2, [pc, #56]	; (80060c4 <RadioSetMaxPayloadLength+0x50>)
 800608c:	79bb      	ldrb	r3, [r7, #6]
 800608e:	7013      	strb	r3, [r2, #0]
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <RadioSetMaxPayloadLength+0x50>)
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <RadioSetMaxPayloadLength+0x54>)
 8006096:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006098:	480c      	ldr	r0, [pc, #48]	; (80060cc <RadioSetMaxPayloadLength+0x58>)
 800609a:	f001 fd39 	bl	8007b10 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800609e:	e00d      	b.n	80060bc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <RadioSetMaxPayloadLength+0x54>)
 80060a2:	7d5b      	ldrb	r3, [r3, #21]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d109      	bne.n	80060bc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80060a8:	4a06      	ldr	r2, [pc, #24]	; (80060c4 <RadioSetMaxPayloadLength+0x50>)
 80060aa:	79bb      	ldrb	r3, [r7, #6]
 80060ac:	7013      	strb	r3, [r2, #0]
 80060ae:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <RadioSetMaxPayloadLength+0x50>)
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <RadioSetMaxPayloadLength+0x54>)
 80060b4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80060b6:	4805      	ldr	r0, [pc, #20]	; (80060cc <RadioSetMaxPayloadLength+0x58>)
 80060b8:	f001 fd2a 	bl	8007b10 <SUBGRF_SetPacketParams>
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	2000000d 	.word	0x2000000d
 80060c8:	20000388 	.word	0x20000388
 80060cc:	20000396 	.word	0x20000396

080060d0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80060da:	4a13      	ldr	r2, [pc, #76]	; (8006128 <RadioSetPublicNetwork+0x58>)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	7313      	strb	r3, [r2, #12]
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <RadioSetPublicNetwork+0x58>)
 80060e2:	7b1a      	ldrb	r2, [r3, #12]
 80060e4:	4b10      	ldr	r3, [pc, #64]	; (8006128 <RadioSetPublicNetwork+0x58>)
 80060e6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80060e8:	2001      	movs	r0, #1
 80060ea:	f7ff f819 	bl	8005120 <RadioSetModem>
    if( enable == true )
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80060f4:	2134      	movs	r1, #52	; 0x34
 80060f6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80060fa:	f001 fe51 	bl	8007da0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80060fe:	2144      	movs	r1, #68	; 0x44
 8006100:	f240 7041 	movw	r0, #1857	; 0x741
 8006104:	f001 fe4c 	bl	8007da0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8006108:	e009      	b.n	800611e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800610a:	2114      	movs	r1, #20
 800610c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006110:	f001 fe46 	bl	8007da0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006114:	2124      	movs	r1, #36	; 0x24
 8006116:	f240 7041 	movw	r0, #1857	; 0x741
 800611a:	f001 fe41 	bl	8007da0 <SUBGRF_WriteRegister>
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000388 	.word	0x20000388

0800612c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8006130:	f001 ff86 	bl	8008040 <SUBGRF_GetRadioWakeUpTime>
 8006134:	4603      	mov	r3, r0
 8006136:	3303      	adds	r3, #3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}

0800613c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8006144:	f000 f80e 	bl	8006164 <RadioOnTxTimeoutProcess>
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8006158:	f000 f818 	bl	800618c <RadioOnRxTimeoutProcess>
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006168:	4b07      	ldr	r3, [pc, #28]	; (8006188 <RadioOnTxTimeoutProcess+0x24>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <RadioOnTxTimeoutProcess+0x1e>
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <RadioOnTxTimeoutProcess+0x24>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800617a:	4b03      	ldr	r3, [pc, #12]	; (8006188 <RadioOnTxTimeoutProcess+0x24>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4798      	blx	r3
    }
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000384 	.word	0x20000384

0800618c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <RadioOnRxTimeoutProcess+0x24>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <RadioOnRxTimeoutProcess+0x1e>
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <RadioOnRxTimeoutProcess+0x24>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80061a2:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <RadioOnRxTimeoutProcess+0x24>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4798      	blx	r3
    }
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000384 	.word	0x20000384

080061b4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80061be:	4a05      	ldr	r2, [pc, #20]	; (80061d4 <RadioOnDioIrq+0x20>)
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80061c6:	f000 f807 	bl	80061d8 <RadioIrqProcess>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000388 	.word	0x20000388

080061d8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80061d8:	b5b0      	push	{r4, r5, r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80061e6:	4ba5      	ldr	r3, [pc, #660]	; (800647c <RadioIrqProcess+0x2a4>)
 80061e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80061ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f0:	f000 810d 	beq.w	800640e <RadioIrqProcess+0x236>
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f8:	f300 81c0 	bgt.w	800657c <RadioIrqProcess+0x3a4>
 80061fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006200:	f000 80f1 	beq.w	80063e6 <RadioIrqProcess+0x20e>
 8006204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006208:	f300 81b8 	bgt.w	800657c <RadioIrqProcess+0x3a4>
 800620c:	2b80      	cmp	r3, #128	; 0x80
 800620e:	f000 80d6 	beq.w	80063be <RadioIrqProcess+0x1e6>
 8006212:	2b80      	cmp	r3, #128	; 0x80
 8006214:	f300 81b2 	bgt.w	800657c <RadioIrqProcess+0x3a4>
 8006218:	2b20      	cmp	r3, #32
 800621a:	dc49      	bgt.n	80062b0 <RadioIrqProcess+0xd8>
 800621c:	2b00      	cmp	r3, #0
 800621e:	f340 81ad 	ble.w	800657c <RadioIrqProcess+0x3a4>
 8006222:	3b01      	subs	r3, #1
 8006224:	2b1f      	cmp	r3, #31
 8006226:	f200 81a9 	bhi.w	800657c <RadioIrqProcess+0x3a4>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <RadioIrqProcess+0x58>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	080062b9 	.word	0x080062b9
 8006234:	080062f3 	.word	0x080062f3
 8006238:	0800657d 	.word	0x0800657d
 800623c:	08006499 	.word	0x08006499
 8006240:	0800657d 	.word	0x0800657d
 8006244:	0800657d 	.word	0x0800657d
 8006248:	0800657d 	.word	0x0800657d
 800624c:	08006507 	.word	0x08006507
 8006250:	0800657d 	.word	0x0800657d
 8006254:	0800657d 	.word	0x0800657d
 8006258:	0800657d 	.word	0x0800657d
 800625c:	0800657d 	.word	0x0800657d
 8006260:	0800657d 	.word	0x0800657d
 8006264:	0800657d 	.word	0x0800657d
 8006268:	0800657d 	.word	0x0800657d
 800626c:	0800657d 	.word	0x0800657d
 8006270:	0800657d 	.word	0x0800657d
 8006274:	0800657d 	.word	0x0800657d
 8006278:	0800657d 	.word	0x0800657d
 800627c:	0800657d 	.word	0x0800657d
 8006280:	0800657d 	.word	0x0800657d
 8006284:	0800657d 	.word	0x0800657d
 8006288:	0800657d 	.word	0x0800657d
 800628c:	0800657d 	.word	0x0800657d
 8006290:	0800657d 	.word	0x0800657d
 8006294:	0800657d 	.word	0x0800657d
 8006298:	0800657d 	.word	0x0800657d
 800629c:	0800657d 	.word	0x0800657d
 80062a0:	0800657d 	.word	0x0800657d
 80062a4:	0800657d 	.word	0x0800657d
 80062a8:	0800657d 	.word	0x0800657d
 80062ac:	08006517 	.word	0x08006517
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	f000 814b 	beq.w	800654c <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80062b6:	e161      	b.n	800657c <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80062b8:	4871      	ldr	r0, [pc, #452]	; (8006480 <RadioIrqProcess+0x2a8>)
 80062ba:	f002 facd 	bl	8008858 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80062be:	2000      	movs	r0, #0
 80062c0:	f000 ffea 	bl	8007298 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80062c4:	f002 f860 	bl	8008388 <RFW_Is_LongPacketModeEnabled>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80062ce:	f002 f884 	bl	80083da <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80062d2:	4b6c      	ldr	r3, [pc, #432]	; (8006484 <RadioIrqProcess+0x2ac>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8152 	beq.w	8006580 <RadioIrqProcess+0x3a8>
 80062dc:	4b69      	ldr	r3, [pc, #420]	; (8006484 <RadioIrqProcess+0x2ac>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 814c 	beq.w	8006580 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 80062e8:	4b66      	ldr	r3, [pc, #408]	; (8006484 <RadioIrqProcess+0x2ac>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4798      	blx	r3
        break;
 80062f0:	e146      	b.n	8006580 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 80062f2:	4865      	ldr	r0, [pc, #404]	; (8006488 <RadioIrqProcess+0x2b0>)
 80062f4:	f002 fab0 	bl	8008858 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80062f8:	4b60      	ldr	r3, [pc, #384]	; (800647c <RadioIrqProcess+0x2a4>)
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	f083 0301 	eor.w	r3, r3, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8006306:	2000      	movs	r0, #0
 8006308:	f000 ffc6 	bl	8007298 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800630c:	2100      	movs	r1, #0
 800630e:	f640 1002 	movw	r0, #2306	; 0x902
 8006312:	f001 fd45 	bl	8007da0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8006316:	f640 1044 	movw	r0, #2372	; 0x944
 800631a:	f001 fd55 	bl	8007dc8 <SUBGRF_ReadRegister>
 800631e:	4603      	mov	r3, r0
 8006320:	f043 0302 	orr.w	r3, r3, #2
 8006324:	b2db      	uxtb	r3, r3
 8006326:	4619      	mov	r1, r3
 8006328:	f640 1044 	movw	r0, #2372	; 0x944
 800632c:	f001 fd38 	bl	8007da0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8006330:	1dfb      	adds	r3, r7, #7
 8006332:	22ff      	movs	r2, #255	; 0xff
 8006334:	4619      	mov	r1, r3
 8006336:	4855      	ldr	r0, [pc, #340]	; (800648c <RadioIrqProcess+0x2b4>)
 8006338:	f000 fe7e 	bl	8007038 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800633c:	4854      	ldr	r0, [pc, #336]	; (8006490 <RadioIrqProcess+0x2b8>)
 800633e:	f001 fcdd 	bl	8007cfc <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8006342:	4b50      	ldr	r3, [pc, #320]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 811c 	beq.w	8006584 <RadioIrqProcess+0x3ac>
 800634c:	4b4d      	ldr	r3, [pc, #308]	; (8006484 <RadioIrqProcess+0x2ac>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8116 	beq.w	8006584 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8006358:	4b48      	ldr	r3, [pc, #288]	; (800647c <RadioIrqProcess+0x2a4>)
 800635a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10e      	bne.n	8006380 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8006362:	4b48      	ldr	r3, [pc, #288]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689c      	ldr	r4, [r3, #8]
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	b299      	uxth	r1, r3
 800636c:	4b43      	ldr	r3, [pc, #268]	; (800647c <RadioIrqProcess+0x2a4>)
 800636e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8006372:	b21a      	sxth	r2, r3
 8006374:	4b41      	ldr	r3, [pc, #260]	; (800647c <RadioIrqProcess+0x2a4>)
 8006376:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800637a:	4844      	ldr	r0, [pc, #272]	; (800648c <RadioIrqProcess+0x2b4>)
 800637c:	47a0      	blx	r4
                break;
 800637e:	e01d      	b.n	80063bc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8006380:	4b3e      	ldr	r3, [pc, #248]	; (800647c <RadioIrqProcess+0x2a4>)
 8006382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006384:	463a      	mov	r2, r7
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f001 ff4b 	bl	8008224 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800638e:	4b3d      	ldr	r3, [pc, #244]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689c      	ldr	r4, [r3, #8]
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	b299      	uxth	r1, r3
 8006398:	4b38      	ldr	r3, [pc, #224]	; (800647c <RadioIrqProcess+0x2a4>)
 800639a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800639e:	b218      	sxth	r0, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80063a6:	4a3b      	ldr	r2, [pc, #236]	; (8006494 <RadioIrqProcess+0x2bc>)
 80063a8:	fb82 5203 	smull	r5, r2, r2, r3
 80063ac:	1192      	asrs	r2, r2, #6
 80063ae:	17db      	asrs	r3, r3, #31
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	b25b      	sxtb	r3, r3
 80063b4:	4602      	mov	r2, r0
 80063b6:	4835      	ldr	r0, [pc, #212]	; (800648c <RadioIrqProcess+0x2b4>)
 80063b8:	47a0      	blx	r4
                break;
 80063ba:	bf00      	nop
        break;
 80063bc:	e0e2      	b.n	8006584 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80063be:	2000      	movs	r0, #0
 80063c0:	f000 ff6a 	bl	8007298 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80063c4:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <RadioIrqProcess+0x2ac>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80dd 	beq.w	8006588 <RadioIrqProcess+0x3b0>
 80063ce:	4b2d      	ldr	r3, [pc, #180]	; (8006484 <RadioIrqProcess+0x2ac>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80d7 	beq.w	8006588 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 80063da:	4b2a      	ldr	r3, [pc, #168]	; (8006484 <RadioIrqProcess+0x2ac>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2000      	movs	r0, #0
 80063e2:	4798      	blx	r3
        break;
 80063e4:	e0d0      	b.n	8006588 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 80063e6:	2000      	movs	r0, #0
 80063e8:	f000 ff56 	bl	8007298 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <RadioIrqProcess+0x2ac>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80cb 	beq.w	800658c <RadioIrqProcess+0x3b4>
 80063f6:	4b23      	ldr	r3, [pc, #140]	; (8006484 <RadioIrqProcess+0x2ac>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80c5 	beq.w	800658c <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	2001      	movs	r0, #1
 800640a:	4798      	blx	r3
        break;
 800640c:	e0be      	b.n	800658c <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800640e:	f000 fdf9 	bl	8007004 <SUBGRF_GetOperatingMode>
 8006412:	4603      	mov	r3, r0
 8006414:	2b04      	cmp	r3, #4
 8006416:	d115      	bne.n	8006444 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8006418:	4819      	ldr	r0, [pc, #100]	; (8006480 <RadioIrqProcess+0x2a8>)
 800641a:	f002 fa1d 	bl	8008858 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800641e:	2000      	movs	r0, #0
 8006420:	f000 ff3a 	bl	8007298 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006424:	4b17      	ldr	r3, [pc, #92]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80b1 	beq.w	8006590 <RadioIrqProcess+0x3b8>
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80ab 	beq.w	8006590 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <RadioIrqProcess+0x2ac>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4798      	blx	r3
        break;
 8006442:	e0a5      	b.n	8006590 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8006444:	f000 fdde 	bl	8007004 <SUBGRF_GetOperatingMode>
 8006448:	4603      	mov	r3, r0
 800644a:	2b05      	cmp	r3, #5
 800644c:	f040 80a0 	bne.w	8006590 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8006450:	480d      	ldr	r0, [pc, #52]	; (8006488 <RadioIrqProcess+0x2b0>)
 8006452:	f002 fa01 	bl	8008858 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8006456:	2000      	movs	r0, #0
 8006458:	f000 ff1e 	bl	8007298 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <RadioIrqProcess+0x2ac>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8095 	beq.w	8006590 <RadioIrqProcess+0x3b8>
 8006466:	4b07      	ldr	r3, [pc, #28]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 808f 	beq.w	8006590 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8006472:	4b04      	ldr	r3, [pc, #16]	; (8006484 <RadioIrqProcess+0x2ac>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4798      	blx	r3
        break;
 800647a:	e089      	b.n	8006590 <RadioIrqProcess+0x3b8>
 800647c:	20000388 	.word	0x20000388
 8006480:	200003e4 	.word	0x200003e4
 8006484:	20000384 	.word	0x20000384
 8006488:	200003fc 	.word	0x200003fc
 800648c:	20000284 	.word	0x20000284
 8006490:	200003ac 	.word	0x200003ac
 8006494:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8006498:	4b44      	ldr	r3, [pc, #272]	; (80065ac <RadioIrqProcess+0x3d4>)
 800649a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649c:	2b00      	cmp	r3, #0
 800649e:	d079      	beq.n	8006594 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80064a0:	4a43      	ldr	r2, [pc, #268]	; (80065b0 <RadioIrqProcess+0x3d8>)
 80064a2:	4b42      	ldr	r3, [pc, #264]	; (80065ac <RadioIrqProcess+0x3d4>)
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	0c1b      	lsrs	r3, r3, #16
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	4619      	mov	r1, r3
 80064ac:	f640 1003 	movw	r0, #2307	; 0x903
 80064b0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80064b2:	4a3f      	ldr	r2, [pc, #252]	; (80065b0 <RadioIrqProcess+0x3d8>)
 80064b4:	4b3d      	ldr	r3, [pc, #244]	; (80065ac <RadioIrqProcess+0x3d4>)
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	0a1b      	lsrs	r3, r3, #8
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4619      	mov	r1, r3
 80064be:	f640 1004 	movw	r0, #2308	; 0x904
 80064c2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80064c4:	4a3a      	ldr	r2, [pc, #232]	; (80065b0 <RadioIrqProcess+0x3d8>)
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <RadioIrqProcess+0x3d4>)
 80064c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	4619      	mov	r1, r3
 80064ce:	f640 1005 	movw	r0, #2309	; 0x905
 80064d2:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80064d4:	4c36      	ldr	r4, [pc, #216]	; (80065b0 <RadioIrqProcess+0x3d8>)
 80064d6:	4b37      	ldr	r3, [pc, #220]	; (80065b4 <RadioIrqProcess+0x3dc>)
 80064d8:	f640 1002 	movw	r0, #2306	; 0x902
 80064dc:	4798      	blx	r3
 80064de:	4603      	mov	r3, r0
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	4619      	mov	r1, r3
 80064e8:	f640 1002 	movw	r0, #2306	; 0x902
 80064ec:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80064ee:	4b2f      	ldr	r3, [pc, #188]	; (80065ac <RadioIrqProcess+0x3d4>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80064f4:	2300      	movs	r3, #0
 80064f6:	2200      	movs	r2, #0
 80064f8:	f240 2162 	movw	r1, #610	; 0x262
 80064fc:	f240 2062 	movw	r0, #610	; 0x262
 8006500:	f001 f89e 	bl	8007640 <SUBGRF_SetDioIrqParams>
        break;
 8006504:	e046      	b.n	8006594 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8006506:	f001 ff38 	bl	800837a <RFW_Is_Init>
 800650a:	4603      	mov	r3, r0
 800650c:	2b01      	cmp	r3, #1
 800650e:	d143      	bne.n	8006598 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8006510:	f001 ff69 	bl	80083e6 <RFW_ReceivePayload>
        break;
 8006514:	e040      	b.n	8006598 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8006516:	4828      	ldr	r0, [pc, #160]	; (80065b8 <RadioIrqProcess+0x3e0>)
 8006518:	f002 f99e 	bl	8008858 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800651c:	4b23      	ldr	r3, [pc, #140]	; (80065ac <RadioIrqProcess+0x3d4>)
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	f083 0301 	eor.w	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800652a:	2000      	movs	r0, #0
 800652c:	f000 feb4 	bl	8007298 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8006530:	4b22      	ldr	r3, [pc, #136]	; (80065bc <RadioIrqProcess+0x3e4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d031      	beq.n	800659c <RadioIrqProcess+0x3c4>
 8006538:	4b20      	ldr	r3, [pc, #128]	; (80065bc <RadioIrqProcess+0x3e4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d02c      	beq.n	800659c <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 8006542:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <RadioIrqProcess+0x3e4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4798      	blx	r3
        break;
 800654a:	e027      	b.n	800659c <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 800654c:	4b17      	ldr	r3, [pc, #92]	; (80065ac <RadioIrqProcess+0x3d4>)
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	f083 0301 	eor.w	r3, r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800655a:	2000      	movs	r0, #0
 800655c:	f000 fe9c 	bl	8007298 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006560:	4b16      	ldr	r3, [pc, #88]	; (80065bc <RadioIrqProcess+0x3e4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <RadioIrqProcess+0x3c8>
 8006568:	4b14      	ldr	r3, [pc, #80]	; (80065bc <RadioIrqProcess+0x3e4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d016      	beq.n	80065a0 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8006572:	4b12      	ldr	r3, [pc, #72]	; (80065bc <RadioIrqProcess+0x3e4>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	4798      	blx	r3
        break;
 800657a:	e011      	b.n	80065a0 <RadioIrqProcess+0x3c8>
        break;
 800657c:	bf00      	nop
 800657e:	e010      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 8006580:	bf00      	nop
 8006582:	e00e      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 8006584:	bf00      	nop
 8006586:	e00c      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 8006588:	bf00      	nop
 800658a:	e00a      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 800658c:	bf00      	nop
 800658e:	e008      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 8006590:	bf00      	nop
 8006592:	e006      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 8006594:	bf00      	nop
 8006596:	e004      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 8006598:	bf00      	nop
 800659a:	e002      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 800659c:	bf00      	nop
 800659e:	e000      	b.n	80065a2 <RadioIrqProcess+0x3ca>
        break;
 80065a0:	bf00      	nop
    }
}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bdb0      	pop	{r4, r5, r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000388 	.word	0x20000388
 80065b0:	08005fe7 	.word	0x08005fe7
 80065b4:	0800600b 	.word	0x0800600b
 80065b8:	200003fc 	.word	0x200003fc
 80065bc:	20000384 	.word	0x20000384

080065c0 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80065c4:	4b09      	ldr	r3, [pc, #36]	; (80065ec <RadioTxPrbs+0x2c>)
 80065c6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80065ca:	2101      	movs	r1, #1
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 fcdb 	bl	8007f88 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <RadioTxPrbs+0x30>)
 80065d4:	212d      	movs	r1, #45	; 0x2d
 80065d6:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80065da:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80065dc:	f000 ff1f 	bl	800741e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80065e0:	4804      	ldr	r0, [pc, #16]	; (80065f4 <RadioTxPrbs+0x34>)
 80065e2:	f000 fe75 	bl	80072d0 <SUBGRF_SetTx>
}
 80065e6:	bf00      	nop
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000388 	.word	0x20000388
 80065f0:	08005fe7 	.word	0x08005fe7
 80065f4:	000fffff 	.word	0x000fffff

080065f8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8006602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006606:	4618      	mov	r0, r3
 8006608:	f001 fce6 	bl	8007fd8 <SUBGRF_SetRfTxPower>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006610:	210e      	movs	r1, #14
 8006612:	f640 101f 	movw	r0, #2335	; 0x91f
 8006616:	f001 fbc3 	bl	8007da0 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	2101      	movs	r1, #1
 800661e:	4618      	mov	r0, r3
 8006620:	f001 fcb2 	bl	8007f88 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8006624:	f000 fef2 	bl	800740c <SUBGRF_SetTxContinuousWave>
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8006630:	b480      	push	{r7}
 8006632:	b089      	sub	sp, #36	; 0x24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8006646:	2300      	movs	r3, #0
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	e011      	b.n	8006670 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	4413      	add	r3, r2
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	440b      	add	r3, r1
 800665a:	43d2      	mvns	r2, r2
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	2200      	movs	r2, #0
 8006668:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	3301      	adds	r3, #1
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	429a      	cmp	r2, r3
 8006676:	dbe9      	blt.n	800664c <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8006678:	2300      	movs	r3, #0
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e049      	b.n	8006712 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	425a      	negs	r2, r3
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	f002 0207 	and.w	r2, r2, #7
 800668a:	bf58      	it	pl
 800668c:	4253      	negpl	r3, r2
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f1c3 0307 	rsb	r3, r3, #7
 8006694:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	da00      	bge.n	800669e <payload_integration+0x6e>
 800669c:	3307      	adds	r3, #7
 800669e:	10db      	asrs	r3, r3, #3
 80066a0:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	3301      	adds	r3, #1
 80066a6:	425a      	negs	r2, r3
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	f002 0207 	and.w	r2, r2, #7
 80066b0:	bf58      	it	pl
 80066b2:	4253      	negpl	r3, r2
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f1c3 0307 	rsb	r3, r3, #7
 80066ba:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	3301      	adds	r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da00      	bge.n	80066c6 <payload_integration+0x96>
 80066c4:	3307      	adds	r3, #7
 80066c6:	10db      	asrs	r3, r3, #3
 80066c8:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80066ca:	7dbb      	ldrb	r3, [r7, #22]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	4413      	add	r3, r2
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	fa42 f303 	asr.w	r3, r2, r3
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80066e2:	7ffa      	ldrb	r2, [r7, #31]
 80066e4:	7cfb      	ldrb	r3, [r7, #19]
 80066e6:	4053      	eors	r3, r2
 80066e8:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80066ea:	7d3b      	ldrb	r3, [r7, #20]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b25a      	sxtb	r2, r3
 80066f4:	7ff9      	ldrb	r1, [r7, #31]
 80066f6:	7d7b      	ldrb	r3, [r7, #21]
 80066f8:	fa01 f303 	lsl.w	r3, r1, r3
 80066fc:	b25b      	sxtb	r3, r3
 80066fe:	4313      	orrs	r3, r2
 8006700:	b259      	sxtb	r1, r3
 8006702:	7d3b      	ldrb	r3, [r7, #20]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	b2ca      	uxtb	r2, r1
 800670a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	3301      	adds	r3, #1
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	dbb0      	blt.n	800667e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800671c:	7ffb      	ldrb	r3, [r7, #31]
 800671e:	01db      	lsls	r3, r3, #7
 8006720:	b25a      	sxtb	r2, r3
 8006722:	7ffb      	ldrb	r3, [r7, #31]
 8006724:	019b      	lsls	r3, r3, #6
 8006726:	b25b      	sxtb	r3, r3
 8006728:	4313      	orrs	r3, r2
 800672a:	b25b      	sxtb	r3, r3
 800672c:	7ffa      	ldrb	r2, [r7, #31]
 800672e:	2a00      	cmp	r2, #0
 8006730:	d101      	bne.n	8006736 <payload_integration+0x106>
 8006732:	2220      	movs	r2, #32
 8006734:	e000      	b.n	8006738 <payload_integration+0x108>
 8006736:	2200      	movs	r2, #0
 8006738:	4313      	orrs	r3, r2
 800673a:	b259      	sxtb	r1, r3
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	b2ca      	uxtb	r2, r1
 8006744:	701a      	strb	r2, [r3, #0]
}
 8006746:	bf00      	nop
 8006748:	3724      	adds	r7, #36	; 0x24
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08c      	sub	sp, #48	; 0x30
 8006754:	af00      	add	r7, sp, #0
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	603b      	str	r3, [r7, #0]
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8006764:	2300      	movs	r3, #0
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	2300      	movs	r3, #0
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800676c:	f001 fdff 	bl	800836e <RFW_DeInit>

    if( rxContinuous != 0 )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf14      	ite	ne
 8006780:	2301      	movne	r3, #1
 8006782:	2300      	moveq	r3, #0
 8006784:	b2da      	uxtb	r2, r3
 8006786:	4ba3      	ldr	r3, [pc, #652]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006788:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <RadioSetRxGenericConfig+0x48>
 8006790:	2b01      	cmp	r3, #1
 8006792:	f000 80dc 	beq.w	800694e <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8006796:	e194      	b.n	8006ac2 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <RadioSetRxGenericConfig+0x58>
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <RadioSetRxGenericConfig+0x5e>
            return -1;
 80067a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ac:	e18a      	b.n	8006ac4 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	7f9b      	ldrb	r3, [r3, #30]
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d902      	bls.n	80067bc <RadioSetRxGenericConfig+0x6c>
            return -1;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ba:	e183      	b.n	8006ac4 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6919      	ldr	r1, [r3, #16]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	7f9b      	ldrb	r3, [r3, #30]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	f107 0320 	add.w	r3, r7, #32
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 ff66 	bl	800869c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bf14      	ite	ne
 80067d8:	2301      	movne	r3, #1
 80067da:	2300      	moveq	r3, #0
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fe26 	bl	8007430 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80067e4:	4b8b      	ldr	r3, [pc, #556]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a88      	ldr	r2, [pc, #544]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80067f2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80067fa:	4b86      	ldr	r3, [pc, #536]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80067fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4618      	mov	r0, r3
 8006806:	f001 fce5 	bl	80081d4 <SUBGRF_GetFskBandwidthRegValue>
 800680a:	4603      	mov	r3, r0
 800680c:	461a      	mov	r2, r3
 800680e:	4b81      	ldr	r3, [pc, #516]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006814:	4b7f      	ldr	r3, [pc, #508]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006816:	2200      	movs	r2, #0
 8006818:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	b29b      	uxth	r3, r3
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	b29a      	uxth	r2, r3
 8006824:	4b7b      	ldr	r3, [pc, #492]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006826:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	7fda      	ldrb	r2, [r3, #31]
 800682c:	4b79      	ldr	r3, [pc, #484]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 800682e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	7f9b      	ldrb	r3, [r3, #30]
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	b2da      	uxtb	r2, r3
 8006838:	4b76      	ldr	r3, [pc, #472]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 800683a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006842:	4b74      	ldr	r3, [pc, #464]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006844:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4b6f      	ldr	r3, [pc, #444]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006858:	759a      	strb	r2, [r3, #22]
 800685a:	e00b      	b.n	8006874 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006862:	2b02      	cmp	r3, #2
 8006864:	d103      	bne.n	800686e <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006866:	4b6b      	ldr	r3, [pc, #428]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006868:	22ff      	movs	r2, #255	; 0xff
 800686a:	759a      	strb	r2, [r3, #22]
 800686c:	e002      	b.n	8006874 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800686e:	4b69      	ldr	r3, [pc, #420]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006870:	22ff      	movs	r2, #255	; 0xff
 8006872:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800687a:	2b02      	cmp	r3, #2
 800687c:	d004      	beq.n	8006888 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006884:	2b02      	cmp	r3, #2
 8006886:	d12d      	bne.n	80068e4 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800688e:	2bf1      	cmp	r3, #241	; 0xf1
 8006890:	d00c      	beq.n	80068ac <RadioSetRxGenericConfig+0x15c>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006898:	2bf2      	cmp	r3, #242	; 0xf2
 800689a:	d007      	beq.n	80068ac <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d002      	beq.n	80068ac <RadioSetRxGenericConfig+0x15c>
                return -1;
 80068a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068aa:	e10b      	b.n	8006ac4 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80068ac:	2300      	movs	r3, #0
 80068ae:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80068b4:	4b58      	ldr	r3, [pc, #352]	; (8006a18 <RadioSetRxGenericConfig+0x2c8>)
 80068b6:	6819      	ldr	r1, [r3, #0]
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	4a57      	ldr	r2, [pc, #348]	; (8006a1c <RadioSetRxGenericConfig+0x2cc>)
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fd48 	bl	8008354 <RFW_Init>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <RadioSetRxGenericConfig+0x180>
                return -1;
 80068ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ce:	e0f9      	b.n	8006ac4 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80068d0:	4b50      	ldr	r3, [pc, #320]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80068d6:	4b4f      	ldr	r3, [pc, #316]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80068d8:	2201      	movs	r2, #1
 80068da:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80068dc:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80068de:	2200      	movs	r2, #0
 80068e0:	755a      	strb	r2, [r3, #21]
        {
 80068e2:	e00e      	b.n	8006902 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80068ea:	4b4a      	ldr	r3, [pc, #296]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80068ec:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80068f4:	4b47      	ldr	r3, [pc, #284]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80068f6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80068fe:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006900:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006902:	f7ff fa6e 	bl	8005de2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006906:	2000      	movs	r0, #0
 8006908:	f7fe fc0a 	bl	8005120 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800690c:	4844      	ldr	r0, [pc, #272]	; (8006a20 <RadioSetRxGenericConfig+0x2d0>)
 800690e:	f001 f82d 	bl	800796c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006912:	4844      	ldr	r0, [pc, #272]	; (8006a24 <RadioSetRxGenericConfig+0x2d4>)
 8006914:	f001 f8fc 	bl	8007b10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006918:	f107 0320 	add.w	r3, r7, #32
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fbc0 	bl	80070a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	8b9b      	ldrh	r3, [r3, #28]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fc0a 	bl	8007140 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	8b1b      	ldrh	r3, [r3, #24]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fbe5 	bl	8007100 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800693c:	fb03 f202 	mul.w	r2, r3, r2
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	fbb2 f3f3 	udiv	r3, r2, r3
 8006948:	4a32      	ldr	r2, [pc, #200]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 800694a:	6093      	str	r3, [r2, #8]
        break;
 800694c:	e0b9      	b.n	8006ac2 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <RadioSetRxGenericConfig+0x20c>
            return -1;
 8006956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800695a:	e0b3      	b.n	8006ac4 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006962:	2b01      	cmp	r3, #1
 8006964:	d104      	bne.n	8006970 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800696e:	e002      	b.n	8006976 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8006970:	23ff      	movs	r3, #255	; 0xff
 8006972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fd53 	bl	8007430 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fd5d 	bl	800744e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006994:	4b1f      	ldr	r3, [pc, #124]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069a2:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80069a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80069ae:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80069b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80069ba:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80069bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d010      	beq.n	80069ec <RadioSetRxGenericConfig+0x29c>
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	dc2c      	bgt.n	8006a28 <RadioSetRxGenericConfig+0x2d8>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <RadioSetRxGenericConfig+0x288>
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d005      	beq.n	80069e2 <RadioSetRxGenericConfig+0x292>
            break;
 80069d6:	e027      	b.n	8006a28 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80069d8:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80069e0:	e023      	b.n	8006a2a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80069e2:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80069ea:	e01e      	b.n	8006a2a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069f2:	2b0b      	cmp	r3, #11
 80069f4:	d004      	beq.n	8006a00 <RadioSetRxGenericConfig+0x2b0>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069fc:	2b0c      	cmp	r3, #12
 80069fe:	d104      	bne.n	8006a0a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a08:	e00f      	b.n	8006a2a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a0a:	4b02      	ldr	r3, [pc, #8]	; (8006a14 <RadioSetRxGenericConfig+0x2c4>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a12:	e00a      	b.n	8006a2a <RadioSetRxGenericConfig+0x2da>
 8006a14:	20000388 	.word	0x20000388
 8006a18:	20000384 	.word	0x20000384
 8006a1c:	200003fc 	.word	0x200003fc
 8006a20:	200003c0 	.word	0x200003c0
 8006a24:	20000396 	.word	0x20000396
            break;
 8006a28:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006a2a:	4b28      	ldr	r3, [pc, #160]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8006a34:	4b25      	ldr	r3, [pc, #148]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006a36:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006a3e:	4b23      	ldr	r3, [pc, #140]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006a40:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006a42:	4a22      	ldr	r2, [pc, #136]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a48:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8006a50:	4b1e      	ldr	r3, [pc, #120]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006a52:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8006a5c:	4b1b      	ldr	r3, [pc, #108]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8006a62:	f7ff f9be 	bl	8005de2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006a66:	2001      	movs	r0, #1
 8006a68:	f7fe fb5a 	bl	8005120 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a6c:	4818      	ldr	r0, [pc, #96]	; (8006ad0 <RadioSetRxGenericConfig+0x380>)
 8006a6e:	f000 ff7d 	bl	800796c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006a72:	4818      	ldr	r0, [pc, #96]	; (8006ad4 <RadioSetRxGenericConfig+0x384>)
 8006a74:	f001 f84c 	bl	8007b10 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006a78:	4b14      	ldr	r3, [pc, #80]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006a7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d10d      	bne.n	8006a9e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006a82:	f240 7036 	movw	r0, #1846	; 0x736
 8006a86:	f001 f99f 	bl	8007dc8 <SUBGRF_ReadRegister>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	4619      	mov	r1, r3
 8006a94:	f240 7036 	movw	r0, #1846	; 0x736
 8006a98:	f001 f982 	bl	8007da0 <SUBGRF_WriteRegister>
 8006a9c:	e00c      	b.n	8006ab8 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006a9e:	f240 7036 	movw	r0, #1846	; 0x736
 8006aa2:	f001 f991 	bl	8007dc8 <SUBGRF_ReadRegister>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f043 0304 	orr.w	r3, r3, #4
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	4619      	mov	r1, r3
 8006ab0:	f240 7036 	movw	r0, #1846	; 0x736
 8006ab4:	f001 f974 	bl	8007da0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006ab8:	4b04      	ldr	r3, [pc, #16]	; (8006acc <RadioSetRxGenericConfig+0x37c>)
 8006aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006abe:	609a      	str	r2, [r3, #8]
        break;
 8006ac0:	bf00      	nop
    }
    return status;
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3730      	adds	r7, #48	; 0x30
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000388 	.word	0x20000388
 8006ad0:	200003c0 	.word	0x200003c0
 8006ad4:	20000396 	.word	0x20000396

08006ad8 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8006aea:	2300      	movs	r3, #0
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aee:	2300      	movs	r3, #0
 8006af0:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006af2:	f001 fc3c 	bl	800836e <RFW_DeInit>
    switch( modem )
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	f200 8204 	bhi.w	8006f06 <RadioSetTxGenericConfig+0x42e>
 8006afe:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <RadioSetTxGenericConfig+0x2c>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006c89 	.word	0x08006c89
 8006b08:	08006dd1 	.word	0x08006dd1
 8006b0c:	08006ec9 	.word	0x08006ec9
 8006b10:	08006b15 	.word	0x08006b15
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	7c9b      	ldrb	r3, [r3, #18]
 8006b18:	2b08      	cmp	r3, #8
 8006b1a:	d902      	bls.n	8006b22 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b20:	e206      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6899      	ldr	r1, [r3, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	7c9b      	ldrb	r3, [r3, #18]
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 fdb3 	bl	800869c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b42:	e1f5      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d813      	bhi.n	8006b78 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8006b56:	4b99      	ldr	r3, [pc, #612]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b58:	2203      	movs	r2, #3
 8006b5a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8006b5c:	4b97      	ldr	r3, [pc, #604]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b5e:	2203      	movs	r2, #3
 8006b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a94      	ldr	r2, [pc, #592]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b6a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	7cda      	ldrb	r2, [r3, #19]
 8006b70:	4b92      	ldr	r3, [pc, #584]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b76:	e017      	b.n	8006ba8 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006b7e:	4b8f      	ldr	r3, [pc, #572]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006b84:	4b8d      	ldr	r3, [pc, #564]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a8a      	ldr	r2, [pc, #552]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b92:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	7cda      	ldrb	r2, [r3, #19]
 8006b98:	4b88      	ldr	r3, [pc, #544]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	089b      	lsrs	r3, r3, #2
 8006ba4:	4a85      	ldr	r2, [pc, #532]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006ba6:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	4b82      	ldr	r3, [pc, #520]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006bb4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006bb6:	4b81      	ldr	r3, [pc, #516]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006bb8:	2204      	movs	r2, #4
 8006bba:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	7c9b      	ldrb	r3, [r3, #18]
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	4b7d      	ldr	r3, [pc, #500]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006bc6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006bc8:	4b7c      	ldr	r3, [pc, #496]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	7d9b      	ldrb	r3, [r3, #22]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d003      	beq.n	8006bde <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	7d1b      	ldrb	r3, [r3, #20]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d12b      	bne.n	8006c36 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	7d5b      	ldrb	r3, [r3, #21]
 8006be2:	2bf1      	cmp	r3, #241	; 0xf1
 8006be4:	d00a      	beq.n	8006bfc <RadioSetTxGenericConfig+0x124>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	7d5b      	ldrb	r3, [r3, #21]
 8006bea:	2bf2      	cmp	r3, #242	; 0xf2
 8006bec:	d006      	beq.n	8006bfc <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	7d5b      	ldrb	r3, [r3, #21]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d002      	beq.n	8006bfc <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8006bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bfa:	e199      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006c06:	4b6e      	ldr	r3, [pc, #440]	; (8006dc0 <RadioSetTxGenericConfig+0x2e8>)
 8006c08:	6819      	ldr	r1, [r3, #0]
 8006c0a:	f107 0320 	add.w	r3, r7, #32
 8006c0e:	4a6d      	ldr	r2, [pc, #436]	; (8006dc4 <RadioSetTxGenericConfig+0x2ec>)
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fb9f 	bl	8008354 <RFW_Init>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d002      	beq.n	8006c22 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c20:	e186      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006c22:	4b66      	ldr	r3, [pc, #408]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006c24:	2200      	movs	r2, #0
 8006c26:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006c28:	4b64      	ldr	r3, [pc, #400]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006c2e:	4b63      	ldr	r3, [pc, #396]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	755a      	strb	r2, [r3, #21]
        {
 8006c34:	e00b      	b.n	8006c4e <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	7d5a      	ldrb	r2, [r3, #21]
 8006c3a:	4b60      	ldr	r3, [pc, #384]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006c3c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	7d9a      	ldrb	r2, [r3, #22]
 8006c42:	4b5e      	ldr	r3, [pc, #376]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006c44:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	7d1a      	ldrb	r2, [r3, #20]
 8006c4a:	4b5c      	ldr	r3, [pc, #368]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006c4c:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8006c4e:	f7ff f8c8 	bl	8005de2 <RadioStandby>
        RadioSetModem( radio_modem );
 8006c52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fa62 	bl	8005120 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c5c:	485a      	ldr	r0, [pc, #360]	; (8006dc8 <RadioSetTxGenericConfig+0x2f0>)
 8006c5e:	f000 fe85 	bl	800796c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c62:	485a      	ldr	r0, [pc, #360]	; (8006dcc <RadioSetTxGenericConfig+0x2f4>)
 8006c64:	f000 ff54 	bl	8007b10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fa18 	bl	80070a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	8a1b      	ldrh	r3, [r3, #16]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fa62 	bl	8007140 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	899b      	ldrh	r3, [r3, #12]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fa3d 	bl	8007100 <SUBGRF_SetCrcPolynomial>
        break;
 8006c86:	e13f      	b.n	8006f08 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d102      	bne.n	8006c96 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8006c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c94:	e14c      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	7c9b      	ldrb	r3, [r3, #18]
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d902      	bls.n	8006ca4 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca2:	e145      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6899      	ldr	r1, [r3, #8]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	7c9b      	ldrb	r3, [r3, #18]
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 fcf2 	bl	800869c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006cb8:	4b40      	ldr	r3, [pc, #256]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3d      	ldr	r2, [pc, #244]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cc6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	7cda      	ldrb	r2, [r3, #19]
 8006ccc:	4b3b      	ldr	r3, [pc, #236]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	4a39      	ldr	r2, [pc, #228]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cd8:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006cda:	4b38      	ldr	r3, [pc, #224]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	4b34      	ldr	r3, [pc, #208]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cec:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006cee:	4b33      	ldr	r3, [pc, #204]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	7c9b      	ldrb	r3, [r3, #18]
 8006cf8:	00db      	lsls	r3, r3, #3
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b2f      	ldr	r3, [pc, #188]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006cfe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8006d00:	4b2e      	ldr	r3, [pc, #184]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	7d9b      	ldrb	r3, [r3, #22]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d003      	beq.n	8006d16 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	7d1b      	ldrb	r3, [r3, #20]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d12a      	bne.n	8006d6c <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	7d5b      	ldrb	r3, [r3, #21]
 8006d1a:	2bf1      	cmp	r3, #241	; 0xf1
 8006d1c:	d00a      	beq.n	8006d34 <RadioSetTxGenericConfig+0x25c>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	7d5b      	ldrb	r3, [r3, #21]
 8006d22:	2bf2      	cmp	r3, #242	; 0xf2
 8006d24:	d006      	beq.n	8006d34 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	7d5b      	ldrb	r3, [r3, #21]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d002      	beq.n	8006d34 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8006d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d32:	e0fd      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8006d34:	2301      	movs	r3, #1
 8006d36:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006d3c:	4b20      	ldr	r3, [pc, #128]	; (8006dc0 <RadioSetTxGenericConfig+0x2e8>)
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	f107 0314 	add.w	r3, r7, #20
 8006d44:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <RadioSetTxGenericConfig+0x2ec>)
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fb04 	bl	8008354 <RFW_Init>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8006d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d56:	e0eb      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006d58:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006d60:	2201      	movs	r2, #1
 8006d62:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006d64:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	755a      	strb	r2, [r3, #21]
        {
 8006d6a:	e00b      	b.n	8006d84 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	7d5a      	ldrb	r2, [r3, #21]
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006d72:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	7d9a      	ldrb	r2, [r3, #22]
 8006d78:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006d7a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	7d1a      	ldrb	r2, [r3, #20]
 8006d80:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <RadioSetTxGenericConfig+0x2e4>)
 8006d82:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8006d84:	f7ff f82d 	bl	8005de2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006d88:	2000      	movs	r0, #0
 8006d8a:	f7fe f9c9 	bl	8005120 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006d8e:	480e      	ldr	r0, [pc, #56]	; (8006dc8 <RadioSetTxGenericConfig+0x2f0>)
 8006d90:	f000 fdec 	bl	800796c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006d94:	480d      	ldr	r0, [pc, #52]	; (8006dcc <RadioSetTxGenericConfig+0x2f4>)
 8006d96:	f000 febb 	bl	8007b10 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f97f 	bl	80070a2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	8a1b      	ldrh	r3, [r3, #16]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 f9c9 	bl	8007140 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	899b      	ldrh	r3, [r3, #12]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f9a4 	bl	8007100 <SUBGRF_SetCrcPolynomial>
        break;
 8006db8:	e0a6      	b.n	8006f08 <RadioSetTxGenericConfig+0x430>
 8006dba:	bf00      	nop
 8006dbc:	20000388 	.word	0x20000388
 8006dc0:	20000384 	.word	0x20000384
 8006dc4:	200003e4 	.word	0x200003e4
 8006dc8:	200003c0 	.word	0x200003c0
 8006dcc:	20000396 	.word	0x20000396
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006dd0:	4b59      	ldr	r3, [pc, #356]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	4b56      	ldr	r3, [pc, #344]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	785a      	ldrb	r2, [r3, #1]
 8006de6:	4b54      	ldr	r3, [pc, #336]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	789a      	ldrb	r2, [r3, #2]
 8006df0:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006df2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	78db      	ldrb	r3, [r3, #3]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d010      	beq.n	8006e20 <RadioSetTxGenericConfig+0x348>
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	dc20      	bgt.n	8006e44 <RadioSetTxGenericConfig+0x36c>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <RadioSetTxGenericConfig+0x334>
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d005      	beq.n	8006e16 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8006e0a:	e01b      	b.n	8006e44 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006e0c:	4b4a      	ldr	r3, [pc, #296]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e14:	e017      	b.n	8006e46 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006e16:	4b48      	ldr	r3, [pc, #288]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e1e:	e012      	b.n	8006e46 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b0b      	cmp	r3, #11
 8006e26:	d003      	beq.n	8006e30 <RadioSetTxGenericConfig+0x358>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b0c      	cmp	r3, #12
 8006e2e:	d104      	bne.n	8006e3a <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006e30:	4b41      	ldr	r3, [pc, #260]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e38:	e005      	b.n	8006e46 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006e3a:	4b3f      	ldr	r3, [pc, #252]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006e42:	e000      	b.n	8006e46 <RadioSetTxGenericConfig+0x36e>
            break;
 8006e44:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006e46:	4b3c      	ldr	r3, [pc, #240]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	889a      	ldrh	r2, [r3, #4]
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e52:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	799a      	ldrb	r2, [r3, #6]
 8006e58:	4b37      	ldr	r3, [pc, #220]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e5a:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	79da      	ldrb	r2, [r3, #7]
 8006e60:	4b35      	ldr	r3, [pc, #212]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e62:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	7a1a      	ldrb	r2, [r3, #8]
 8006e6a:	4b33      	ldr	r3, [pc, #204]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8006e70:	f7fe ffb7 	bl	8005de2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006e74:	2001      	movs	r0, #1
 8006e76:	f7fe f953 	bl	8005120 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e7a:	4830      	ldr	r0, [pc, #192]	; (8006f3c <RadioSetTxGenericConfig+0x464>)
 8006e7c:	f000 fd76 	bl	800796c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e80:	482f      	ldr	r0, [pc, #188]	; (8006f40 <RadioSetTxGenericConfig+0x468>)
 8006e82:	f000 fe45 	bl	8007b10 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006e86:	4b2c      	ldr	r3, [pc, #176]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d10d      	bne.n	8006eac <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006e90:	f640 0089 	movw	r0, #2185	; 0x889
 8006e94:	f000 ff98 	bl	8007dc8 <SUBGRF_ReadRegister>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	f023 0304 	bic.w	r3, r3, #4
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f640 0089 	movw	r0, #2185	; 0x889
 8006ea6:	f000 ff7b 	bl	8007da0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8006eaa:	e02d      	b.n	8006f08 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006eac:	f640 0089 	movw	r0, #2185	; 0x889
 8006eb0:	f000 ff8a 	bl	8007dc8 <SUBGRF_ReadRegister>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f043 0304 	orr.w	r3, r3, #4
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f640 0089 	movw	r0, #2185	; 0x889
 8006ec2:	f000 ff6d 	bl	8007da0 <SUBGRF_WriteRegister>
        break;
 8006ec6:	e01f      	b.n	8006f08 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <RadioSetTxGenericConfig+0x402>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ed8:	d902      	bls.n	8006ee0 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ede:	e027      	b.n	8006f30 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8006ee0:	2003      	movs	r0, #3
 8006ee2:	f7fe f91d 	bl	8005120 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a11      	ldr	r2, [pc, #68]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006ef4:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006ef8:	2216      	movs	r2, #22
 8006efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006efe:	480f      	ldr	r0, [pc, #60]	; (8006f3c <RadioSetTxGenericConfig+0x464>)
 8006f00:	f000 fd34 	bl	800796c <SUBGRF_SetModulationParams>
        break;
 8006f04:	e000      	b.n	8006f08 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8006f06:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f001 f863 	bl	8007fd8 <SUBGRF_SetRfTxPower>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006f18:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006f1e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 fa37 	bl	8008396 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006f28:	4a03      	ldr	r2, [pc, #12]	; (8006f38 <RadioSetTxGenericConfig+0x460>)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6053      	str	r3, [r2, #4]
    return 0;
 8006f2e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3738      	adds	r7, #56	; 0x38
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000388 	.word	0x20000388
 8006f3c:	200003c0 	.word	0x200003c0
 8006f40:	20000396 	.word	0x20000396

08006f44 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8006f66:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr
	...

08006f74 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8006f82:	4a1d      	ldr	r2, [pc, #116]	; (8006ff8 <SUBGRF_Init+0x84>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8006f88:	f7f9 fdec 	bl	8000b64 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8006f8c:	2002      	movs	r0, #2
 8006f8e:	f001 f8ff 	bl	8008190 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8006f92:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <SUBGRF_Init+0x88>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f000 f97d 	bl	8007298 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8006f9e:	f001 fb52 	bl	8008646 <RBI_IsTCXO>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d10e      	bne.n	8006fc6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8006fa8:	2140      	movs	r1, #64	; 0x40
 8006faa:	2001      	movs	r0, #1
 8006fac:	f000 fb82 	bl	80076b4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f640 1011 	movw	r0, #2321	; 0x911
 8006fb6:	f000 fef3 	bl	8007da0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8006fba:	237f      	movs	r3, #127	; 0x7f
 8006fbc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8006fbe:	7b38      	ldrb	r0, [r7, #12]
 8006fc0:	f000 fa8b 	bl	80074da <SUBGRF_Calibrate>
 8006fc4:	e009      	b.n	8006fda <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006fc6:	2120      	movs	r1, #32
 8006fc8:	f640 1011 	movw	r0, #2321	; 0x911
 8006fcc:	f000 fee8 	bl	8007da0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8006fd0:	2120      	movs	r1, #32
 8006fd2:	f640 1012 	movw	r0, #2322	; 0x912
 8006fd6:	f000 fee3 	bl	8007da0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006fda:	210e      	movs	r1, #14
 8006fdc:	f640 101f 	movw	r0, #2335	; 0x91f
 8006fe0:	f000 fede 	bl	8007da0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8006fe4:	f001 fa86 	bl	80084f4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8006fe8:	4b05      	ldr	r3, [pc, #20]	; (8007000 <SUBGRF_Init+0x8c>)
 8006fea:	2201      	movs	r2, #1
 8006fec:	701a      	strb	r2, [r3, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000420 	.word	0x20000420
 8006ffc:	2000041c 	.word	0x2000041c
 8007000:	20000414 	.word	0x20000414

08007004 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
    return OperatingMode;
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <SUBGRF_GetOperatingMode+0x10>)
 800700a:	781b      	ldrb	r3, [r3, #0]
}
 800700c:	4618      	mov	r0, r3
 800700e:	46bd      	mov	sp, r7
 8007010:	bc80      	pop	{r7}
 8007012:	4770      	bx	lr
 8007014:	20000414 	.word	0x20000414

08007018 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	461a      	mov	r2, r3
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	2000      	movs	r0, #0
 800702c:	f000 ff24 	bl	8007e78 <SUBGRF_WriteBuffer>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	4613      	mov	r3, r2
 8007044:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800704a:	f107 0317 	add.w	r3, r7, #23
 800704e:	4619      	mov	r1, r3
 8007050:	68b8      	ldr	r0, [r7, #8]
 8007052:	f000 fe27 	bl	8007ca4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	79fa      	ldrb	r2, [r7, #7]
 800705c:	429a      	cmp	r2, r3
 800705e:	d201      	bcs.n	8007064 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8007060:	2301      	movs	r3, #1
 8007062:	e007      	b.n	8007074 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007064:	7df8      	ldrb	r0, [r7, #23]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	68f9      	ldr	r1, [r7, #12]
 800706e:	f000 ff25 	bl	8007ebc <SUBGRF_ReadBuffer>

    return 0;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	460b      	mov	r3, r1
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	4619      	mov	r1, r3
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff ffc2 	bl	8007018 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f91b 	bl	80072d0 <SUBGRF_SetTx>
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80070aa:	2208      	movs	r2, #8
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80070b2:	f000 fe9d 	bl	8007df0 <SUBGRF_WriteRegisters>
    return 0;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80070da:	f000 fb6f 	bl	80077bc <SUBGRF_GetPacketType>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d108      	bne.n	80070f6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80070e4:	f107 030c 	add.w	r3, r7, #12
 80070e8:	2202      	movs	r2, #2
 80070ea:	4619      	mov	r1, r3
 80070ec:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80070f0:	f000 fe7e 	bl	8007df0 <SUBGRF_WriteRegisters>
            break;
 80070f4:	e000      	b.n	80070f8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80070f6:	bf00      	nop
    }
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	0a1b      	lsrs	r3, r3, #8
 800710e:	b29b      	uxth	r3, r3
 8007110:	b2db      	uxtb	r3, r3
 8007112:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800711a:	f000 fb4f 	bl	80077bc <SUBGRF_GetPacketType>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d108      	bne.n	8007136 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8007124:	f107 030c 	add.w	r3, r7, #12
 8007128:	2202      	movs	r2, #2
 800712a:	4619      	mov	r1, r3
 800712c:	f240 60be 	movw	r0, #1726	; 0x6be
 8007130:	f000 fe5e 	bl	8007df0 <SUBGRF_WriteRegisters>
            break;
 8007134:	e000      	b.n	8007138 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8007136:	bf00      	nop
    }
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800714e:	f000 fb35 	bl	80077bc <SUBGRF_GetPacketType>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d121      	bne.n	800719c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007158:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800715c:	f000 fe34 	bl	8007dc8 <SUBGRF_ReadRegister>
 8007160:	4603      	mov	r3, r0
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	b29b      	uxth	r3, r3
 800716e:	b25b      	sxtb	r3, r3
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	b25a      	sxtb	r2, r3
 8007176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717a:	4313      	orrs	r3, r2
 800717c:	b25b      	sxtb	r3, r3
 800717e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	4619      	mov	r1, r3
 8007184:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007188:	f000 fe0a 	bl	8007da0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800718c:	88fb      	ldrh	r3, [r7, #6]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	4619      	mov	r1, r3
 8007192:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8007196:	f000 fe03 	bl	8007da0 <SUBGRF_WriteRegister>
            break;
 800719a:	e000      	b.n	800719e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800719c:	bf00      	nop
    }
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80071b8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80071bc:	f000 fe04 	bl	8007dc8 <SUBGRF_ReadRegister>
 80071c0:	4603      	mov	r3, r0
 80071c2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80071d2:	f000 fde5 	bl	8007da0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80071d6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80071da:	f000 fdf5 	bl	8007dc8 <SUBGRF_ReadRegister>
 80071de:	4603      	mov	r3, r0
 80071e0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80071e2:	79bb      	ldrb	r3, [r7, #6]
 80071e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	4619      	mov	r1, r3
 80071ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80071f0:	f000 fdd6 	bl	8007da0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80071f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80071f8:	f000 f88a 	bl	8007310 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80071fc:	463b      	mov	r3, r7
 80071fe:	2204      	movs	r2, #4
 8007200:	4619      	mov	r1, r3
 8007202:	f640 0019 	movw	r0, #2073	; 0x819
 8007206:	f000 fe15 	bl	8007e34 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800720a:	2000      	movs	r0, #0
 800720c:	f000 f844 	bl	8007298 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	4619      	mov	r1, r3
 8007214:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007218:	f000 fdc2 	bl	8007da0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800721c:	79bb      	ldrb	r3, [r7, #6]
 800721e:	4619      	mov	r1, r3
 8007220:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007224:	f000 fdbc 	bl	8007da0 <SUBGRF_WriteRegister>

    return number;
 8007228:	683b      	ldr	r3, [r7, #0]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800723c:	2000      	movs	r0, #0
 800723e:	f001 f999 	bl	8008574 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007242:	2002      	movs	r0, #2
 8007244:	f000 ffa4 	bl	8008190 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007248:	793b      	ldrb	r3, [r7, #4]
 800724a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800724e:	b2db      	uxtb	r3, r3
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007254:	793b      	ldrb	r3, [r7, #4]
 8007256:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800725a:	b2db      	uxtb	r3, r3
 800725c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800725e:	b25b      	sxtb	r3, r3
 8007260:	4313      	orrs	r3, r2
 8007262:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8007264:	793b      	ldrb	r3, [r7, #4]
 8007266:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800726e:	4313      	orrs	r3, r2
 8007270:	b25b      	sxtb	r3, r3
 8007272:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007274:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8007276:	f107 030f 	add.w	r3, r7, #15
 800727a:	2201      	movs	r2, #1
 800727c:	4619      	mov	r1, r3
 800727e:	2084      	movs	r0, #132	; 0x84
 8007280:	f000 fe3e 	bl	8007f00 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <SUBGRF_SetSleep+0x60>)
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
}
 800728a:	bf00      	nop
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20000414 	.word	0x20000414

08007298 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80072a2:	1dfb      	adds	r3, r7, #7
 80072a4:	2201      	movs	r2, #1
 80072a6:	4619      	mov	r1, r3
 80072a8:	2080      	movs	r0, #128	; 0x80
 80072aa:	f000 fe29 	bl	8007f00 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d103      	bne.n	80072bc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <SUBGRF_SetStandby+0x34>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80072ba:	e002      	b.n	80072c2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80072bc:	4b03      	ldr	r3, [pc, #12]	; (80072cc <SUBGRF_SetStandby+0x34>)
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000414 	.word	0x20000414

080072d0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <SUBGRF_SetTx+0x3c>)
 80072da:	2204      	movs	r2, #4
 80072dc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	0a1b      	lsrs	r3, r3, #8
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80072f4:	f107 030c 	add.w	r3, r7, #12
 80072f8:	2203      	movs	r2, #3
 80072fa:	4619      	mov	r1, r3
 80072fc:	2083      	movs	r0, #131	; 0x83
 80072fe:	f000 fdff 	bl	8007f00 <SUBGRF_WriteCommand>
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000414 	.word	0x20000414

08007310 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007318:	4b0c      	ldr	r3, [pc, #48]	; (800734c <SUBGRF_SetRx+0x3c>)
 800731a:	2205      	movs	r2, #5
 800731c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0c1b      	lsrs	r3, r3, #16
 8007322:	b2db      	uxtb	r3, r3
 8007324:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0a1b      	lsrs	r3, r3, #8
 800732a:	b2db      	uxtb	r3, r3
 800732c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	2203      	movs	r2, #3
 800733a:	4619      	mov	r1, r3
 800733c:	2082      	movs	r0, #130	; 0x82
 800733e:	f000 fddf 	bl	8007f00 <SUBGRF_WriteCommand>
}
 8007342:	bf00      	nop
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000414 	.word	0x20000414

08007350 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8007358:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <SUBGRF_SetRxBoosted+0x44>)
 800735a:	2205      	movs	r2, #5
 800735c:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800735e:	2197      	movs	r1, #151	; 0x97
 8007360:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8007364:	f000 fd1c 	bl	8007da0 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	b2db      	uxtb	r3, r3
 800736e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	0a1b      	lsrs	r3, r3, #8
 8007374:	b2db      	uxtb	r3, r3
 8007376:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800737e:	f107 030c 	add.w	r3, r7, #12
 8007382:	2203      	movs	r2, #3
 8007384:	4619      	mov	r1, r3
 8007386:	2082      	movs	r0, #130	; 0x82
 8007388:	f000 fdba 	bl	8007f00 <SUBGRF_WriteCommand>
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000414 	.word	0x20000414

08007398 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	0a1b      	lsrs	r3, r3, #8
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	0c1b      	lsrs	r3, r3, #16
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	0a1b      	lsrs	r3, r3, #8
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80073ce:	f107 0308 	add.w	r3, r7, #8
 80073d2:	2206      	movs	r2, #6
 80073d4:	4619      	mov	r1, r3
 80073d6:	2094      	movs	r0, #148	; 0x94
 80073d8:	f000 fd92 	bl	8007f00 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <SUBGRF_SetRxDutyCycle+0x54>)
 80073de:	2206      	movs	r2, #6
 80073e0:	701a      	strb	r2, [r3, #0]
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000414 	.word	0x20000414

080073f0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	20c5      	movs	r0, #197	; 0xc5
 80073fa:	f000 fd81 	bl	8007f00 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80073fe:	4b02      	ldr	r3, [pc, #8]	; (8007408 <SUBGRF_SetCad+0x18>)
 8007400:	2207      	movs	r2, #7
 8007402:	701a      	strb	r2, [r3, #0]
}
 8007404:	bf00      	nop
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20000414 	.word	0x20000414

0800740c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8007410:	2200      	movs	r2, #0
 8007412:	2100      	movs	r1, #0
 8007414:	20d1      	movs	r0, #209	; 0xd1
 8007416:	f000 fd73 	bl	8007f00 <SUBGRF_WriteCommand>
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}

0800741e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800741e:	b580      	push	{r7, lr}
 8007420:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	20d2      	movs	r0, #210	; 0xd2
 8007428:	f000 fd6a 	bl	8007f00 <SUBGRF_WriteCommand>
}
 800742c:	bf00      	nop
 800742e:	bd80      	pop	{r7, pc}

08007430 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800743a:	1dfb      	adds	r3, r7, #7
 800743c:	2201      	movs	r2, #1
 800743e:	4619      	mov	r1, r3
 8007440:	209f      	movs	r0, #159	; 0x9f
 8007442:	f000 fd5d 	bl	8007f00 <SUBGRF_WriteCommand>
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	4603      	mov	r3, r0
 8007456:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007458:	1dfb      	adds	r3, r7, #7
 800745a:	2201      	movs	r2, #1
 800745c:	4619      	mov	r1, r3
 800745e:	20a0      	movs	r0, #160	; 0xa0
 8007460:	f000 fd4e 	bl	8007f00 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b3f      	cmp	r3, #63	; 0x3f
 8007468:	d91c      	bls.n	80074a4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800746a:	79fb      	ldrb	r3, [r7, #7]
 800746c:	085b      	lsrs	r3, r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8007478:	e005      	b.n	8007486 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	089b      	lsrs	r3, r3, #2
 800747e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	3301      	adds	r3, #1
 8007484:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2b1f      	cmp	r3, #31
 800748a:	d8f6      	bhi.n	800747a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	b2da      	uxtb	r2, r3
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	4413      	add	r3, r2
 8007496:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8007498:	7b7b      	ldrb	r3, [r7, #13]
 800749a:	4619      	mov	r1, r3
 800749c:	f240 7006 	movw	r0, #1798	; 0x706
 80074a0:	f000 fc7e 	bl	8007da0 <SUBGRF_WriteRegister>
    }
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80074b2:	f001 f8d3 	bl	800865c <RBI_IsDCDC>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d102      	bne.n	80074c2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80074bc:	2301      	movs	r3, #1
 80074be:	71fb      	strb	r3, [r7, #7]
 80074c0:	e001      	b.n	80074c6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80074c2:	2300      	movs	r3, #0
 80074c4:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80074c6:	1dfb      	adds	r3, r7, #7
 80074c8:	2201      	movs	r2, #1
 80074ca:	4619      	mov	r1, r3
 80074cc:	2096      	movs	r0, #150	; 0x96
 80074ce:	f000 fd17 	bl	8007f00 <SUBGRF_WriteCommand>
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80074e2:	793b      	ldrb	r3, [r7, #4]
 80074e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	019b      	lsls	r3, r3, #6
 80074ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80074ee:	793b      	ldrb	r3, [r7, #4]
 80074f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80074f8:	b25b      	sxtb	r3, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80074fe:	793b      	ldrb	r3, [r7, #4]
 8007500:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007504:	b2db      	uxtb	r3, r3
 8007506:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8007508:	b25b      	sxtb	r3, r3
 800750a:	4313      	orrs	r3, r2
 800750c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800750e:	793b      	ldrb	r3, [r7, #4]
 8007510:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007514:	b2db      	uxtb	r3, r3
 8007516:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8007518:	b25b      	sxtb	r3, r3
 800751a:	4313      	orrs	r3, r2
 800751c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800751e:	793b      	ldrb	r3, [r7, #4]
 8007520:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8007528:	b25b      	sxtb	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800752e:	793b      	ldrb	r3, [r7, #4]
 8007530:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007534:	b2db      	uxtb	r3, r3
 8007536:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007538:	b25b      	sxtb	r3, r3
 800753a:	4313      	orrs	r3, r2
 800753c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800753e:	793b      	ldrb	r3, [r7, #4]
 8007540:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007544:	b2db      	uxtb	r3, r3
 8007546:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007548:	4313      	orrs	r3, r2
 800754a:	b25b      	sxtb	r3, r3
 800754c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800754e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8007550:	f107 030f 	add.w	r3, r7, #15
 8007554:	2201      	movs	r2, #1
 8007556:	4619      	mov	r1, r3
 8007558:	2089      	movs	r0, #137	; 0x89
 800755a:	f000 fcd1 	bl	8007f00 <SUBGRF_WriteCommand>
}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <SUBGRF_CalibrateImage+0x80>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d904      	bls.n	8007582 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8007578:	23e1      	movs	r3, #225	; 0xe1
 800757a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800757c:	23e9      	movs	r3, #233	; 0xe9
 800757e:	737b      	strb	r3, [r7, #13]
 8007580:	e027      	b.n	80075d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a19      	ldr	r2, [pc, #100]	; (80075ec <SUBGRF_CalibrateImage+0x84>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d904      	bls.n	8007594 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800758a:	23d7      	movs	r3, #215	; 0xd7
 800758c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800758e:	23db      	movs	r3, #219	; 0xdb
 8007590:	737b      	strb	r3, [r7, #13]
 8007592:	e01e      	b.n	80075d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a16      	ldr	r2, [pc, #88]	; (80075f0 <SUBGRF_CalibrateImage+0x88>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d904      	bls.n	80075a6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800759c:	23c1      	movs	r3, #193	; 0xc1
 800759e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80075a0:	23c5      	movs	r3, #197	; 0xc5
 80075a2:	737b      	strb	r3, [r7, #13]
 80075a4:	e015      	b.n	80075d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <SUBGRF_CalibrateImage+0x8c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d904      	bls.n	80075b8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80075ae:	2375      	movs	r3, #117	; 0x75
 80075b0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80075b2:	2381      	movs	r3, #129	; 0x81
 80075b4:	737b      	strb	r3, [r7, #13]
 80075b6:	e00c      	b.n	80075d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <SUBGRF_CalibrateImage+0x90>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d904      	bls.n	80075ca <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80075c0:	236b      	movs	r3, #107	; 0x6b
 80075c2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80075c4:	236f      	movs	r3, #111	; 0x6f
 80075c6:	737b      	strb	r3, [r7, #13]
 80075c8:	e003      	b.n	80075d2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80075ca:	2329      	movs	r3, #41	; 0x29
 80075cc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80075ce:	232b      	movs	r3, #43	; 0x2b
 80075d0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80075d2:	f107 030c 	add.w	r3, r7, #12
 80075d6:	2202      	movs	r2, #2
 80075d8:	4619      	mov	r1, r3
 80075da:	2098      	movs	r0, #152	; 0x98
 80075dc:	f000 fc90 	bl	8007f00 <SUBGRF_WriteCommand>
}
 80075e0:	bf00      	nop
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	35a4e900 	.word	0x35a4e900
 80075ec:	32a9f880 	.word	0x32a9f880
 80075f0:	2de54480 	.word	0x2de54480
 80075f4:	1b6b0b00 	.word	0x1b6b0b00
 80075f8:	1954fc40 	.word	0x1954fc40

080075fc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80075fc:	b590      	push	{r4, r7, lr}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	4604      	mov	r4, r0
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	461a      	mov	r2, r3
 800760a:	4623      	mov	r3, r4
 800760c:	71fb      	strb	r3, [r7, #7]
 800760e:	4603      	mov	r3, r0
 8007610:	71bb      	strb	r3, [r7, #6]
 8007612:	460b      	mov	r3, r1
 8007614:	717b      	strb	r3, [r7, #5]
 8007616:	4613      	mov	r3, r2
 8007618:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800761e:	79bb      	ldrb	r3, [r7, #6]
 8007620:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8007622:	797b      	ldrb	r3, [r7, #5]
 8007624:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8007626:	793b      	ldrb	r3, [r7, #4]
 8007628:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800762a:	f107 030c 	add.w	r3, r7, #12
 800762e:	2204      	movs	r2, #4
 8007630:	4619      	mov	r1, r3
 8007632:	2095      	movs	r0, #149	; 0x95
 8007634:	f000 fc64 	bl	8007f00 <SUBGRF_WriteCommand>
}
 8007638:	bf00      	nop
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	bd90      	pop	{r4, r7, pc}

08007640 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	4604      	mov	r4, r0
 8007648:	4608      	mov	r0, r1
 800764a:	4611      	mov	r1, r2
 800764c:	461a      	mov	r2, r3
 800764e:	4623      	mov	r3, r4
 8007650:	80fb      	strh	r3, [r7, #6]
 8007652:	4603      	mov	r3, r0
 8007654:	80bb      	strh	r3, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	807b      	strh	r3, [r7, #2]
 800765a:	4613      	mov	r3, r2
 800765c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800765e:	88fb      	ldrh	r3, [r7, #6]
 8007660:	0a1b      	lsrs	r3, r3, #8
 8007662:	b29b      	uxth	r3, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8007668:	88fb      	ldrh	r3, [r7, #6]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800766e:	88bb      	ldrh	r3, [r7, #4]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	b29b      	uxth	r3, r3
 8007674:	b2db      	uxtb	r3, r3
 8007676:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8007678:	88bb      	ldrh	r3, [r7, #4]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	b29b      	uxth	r3, r3
 8007684:	b2db      	uxtb	r3, r3
 8007686:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8007688:	887b      	ldrh	r3, [r7, #2]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800768e:	883b      	ldrh	r3, [r7, #0]
 8007690:	0a1b      	lsrs	r3, r3, #8
 8007692:	b29b      	uxth	r3, r3
 8007694:	b2db      	uxtb	r3, r3
 8007696:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007698:	883b      	ldrh	r3, [r7, #0]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	2208      	movs	r2, #8
 80076a4:	4619      	mov	r1, r3
 80076a6:	2008      	movs	r0, #8
 80076a8:	f000 fc2a 	bl	8007f00 <SUBGRF_WriteCommand>
}
 80076ac:	bf00      	nop
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd90      	pop	{r4, r7, pc}

080076b4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	0a1b      	lsrs	r3, r3, #8
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80076e0:	f107 030c 	add.w	r3, r7, #12
 80076e4:	2204      	movs	r2, #4
 80076e6:	4619      	mov	r1, r3
 80076e8:	2097      	movs	r0, #151	; 0x97
 80076ea:	f000 fc09 	bl	8007f00 <SUBGRF_WriteCommand>
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80076f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8007706:	4b1d      	ldr	r3, [pc, #116]	; (800777c <SUBGRF_SetRfFrequency+0x84>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	f083 0301 	eor.w	r3, r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff ff27 	bl	8007568 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800771a:	4b18      	ldr	r3, [pc, #96]	; (800777c <SUBGRF_SetRfFrequency+0x84>)
 800771c:	2201      	movs	r2, #1
 800771e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	461c      	mov	r4, r3
 8007726:	4615      	mov	r5, r2
 8007728:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800772c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8007730:	4a13      	ldr	r2, [pc, #76]	; (8007780 <SUBGRF_SetRfFrequency+0x88>)
 8007732:	f04f 0300 	mov.w	r3, #0
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f8 fd71 	bl	8000220 <__aeabi_uldivmod>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	4613      	mov	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	b2db      	uxtb	r3, r3
 800774c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	b2db      	uxtb	r3, r3
 8007754:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	0a1b      	lsrs	r3, r3, #8
 800775a:	b2db      	uxtb	r3, r3
 800775c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8007764:	f107 0308 	add.w	r3, r7, #8
 8007768:	2204      	movs	r2, #4
 800776a:	4619      	mov	r1, r3
 800776c:	2086      	movs	r0, #134	; 0x86
 800776e:	f000 fbc7 	bl	8007f00 <SUBGRF_WriteCommand>
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800777c:	2000041c 	.word	0x2000041c
 8007780:	01e84800 	.word	0x01e84800

08007784 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800778e:	79fa      	ldrb	r2, [r7, #7]
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <SUBGRF_SetPacketType+0x34>)
 8007792:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800779a:	2100      	movs	r1, #0
 800779c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80077a0:	f000 fafe 	bl	8007da0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80077a4:	1dfb      	adds	r3, r7, #7
 80077a6:	2201      	movs	r2, #1
 80077a8:	4619      	mov	r1, r3
 80077aa:	208a      	movs	r0, #138	; 0x8a
 80077ac:	f000 fba8 	bl	8007f00 <SUBGRF_WriteCommand>
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000415 	.word	0x20000415

080077bc <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
    return PacketType;
 80077c0:	4b02      	ldr	r3, [pc, #8]	; (80077cc <SUBGRF_GetPacketType+0x10>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr
 80077cc:	20000415 	.word	0x20000415

080077d0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
 80077da:	460b      	mov	r3, r1
 80077dc:	71bb      	strb	r3, [r7, #6]
 80077de:	4613      	mov	r3, r2
 80077e0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d149      	bne.n	800787c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80077e8:	2000      	movs	r0, #0
 80077ea:	f000 ff42 	bl	8008672 <RBI_GetRFOMaxPowerConfig>
 80077ee:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80077f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	da01      	bge.n	80077fe <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b0e      	cmp	r3, #14
 8007802:	d10e      	bne.n	8007822 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8007804:	2301      	movs	r3, #1
 8007806:	2201      	movs	r2, #1
 8007808:	2100      	movs	r1, #0
 800780a:	2004      	movs	r0, #4
 800780c:	f7ff fef6 	bl	80075fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007810:	79ba      	ldrb	r2, [r7, #6]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	b2db      	uxtb	r3, r3
 800781a:	330e      	adds	r3, #14
 800781c:	b2db      	uxtb	r3, r3
 800781e:	71bb      	strb	r3, [r7, #6]
 8007820:	e01f      	b.n	8007862 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b0a      	cmp	r3, #10
 8007826:	d10e      	bne.n	8007846 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8007828:	2301      	movs	r3, #1
 800782a:	2201      	movs	r2, #1
 800782c:	2100      	movs	r1, #0
 800782e:	2001      	movs	r0, #1
 8007830:	f7ff fee4 	bl	80075fc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8007834:	79ba      	ldrb	r2, [r7, #6]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	b2db      	uxtb	r3, r3
 800783e:	330d      	adds	r3, #13
 8007840:	b2db      	uxtb	r3, r3
 8007842:	71bb      	strb	r3, [r7, #6]
 8007844:	e00d      	b.n	8007862 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8007846:	2301      	movs	r3, #1
 8007848:	2201      	movs	r2, #1
 800784a:	2100      	movs	r1, #0
 800784c:	2007      	movs	r0, #7
 800784e:	f7ff fed5 	bl	80075fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007852:	79ba      	ldrb	r2, [r7, #6]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	b2db      	uxtb	r3, r3
 800785c:	330e      	adds	r3, #14
 800785e:	b2db      	uxtb	r3, r3
 8007860:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8007862:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007866:	f113 0f11 	cmn.w	r3, #17
 800786a:	da01      	bge.n	8007870 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800786c:	23ef      	movs	r3, #239	; 0xef
 800786e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8007870:	2118      	movs	r1, #24
 8007872:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007876:	f000 fa93 	bl	8007da0 <SUBGRF_WriteRegister>
 800787a:	e067      	b.n	800794c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800787c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007880:	f000 faa2 	bl	8007dc8 <SUBGRF_ReadRegister>
 8007884:	4603      	mov	r3, r0
 8007886:	f043 031e 	orr.w	r3, r3, #30
 800788a:	b2db      	uxtb	r3, r3
 800788c:	4619      	mov	r1, r3
 800788e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007892:	f000 fa85 	bl	8007da0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8007896:	2001      	movs	r0, #1
 8007898:	f000 feeb 	bl	8008672 <RBI_GetRFOMaxPowerConfig>
 800789c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800789e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	da01      	bge.n	80078ac <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b14      	cmp	r3, #20
 80078b0:	d10e      	bne.n	80078d0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80078b2:	2301      	movs	r3, #1
 80078b4:	2200      	movs	r2, #0
 80078b6:	2105      	movs	r1, #5
 80078b8:	2003      	movs	r0, #3
 80078ba:	f7ff fe9f 	bl	80075fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80078be:	79ba      	ldrb	r2, [r7, #6]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	3316      	adds	r3, #22
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	71bb      	strb	r3, [r7, #6]
 80078ce:	e031      	b.n	8007934 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b11      	cmp	r3, #17
 80078d4:	d10e      	bne.n	80078f4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80078d6:	2301      	movs	r3, #1
 80078d8:	2200      	movs	r2, #0
 80078da:	2103      	movs	r1, #3
 80078dc:	2002      	movs	r0, #2
 80078de:	f7ff fe8d 	bl	80075fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80078e2:	79ba      	ldrb	r2, [r7, #6]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	3316      	adds	r3, #22
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	71bb      	strb	r3, [r7, #6]
 80078f2:	e01f      	b.n	8007934 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b0e      	cmp	r3, #14
 80078f8:	d10e      	bne.n	8007918 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80078fa:	2301      	movs	r3, #1
 80078fc:	2200      	movs	r2, #0
 80078fe:	2102      	movs	r1, #2
 8007900:	2002      	movs	r0, #2
 8007902:	f7ff fe7b 	bl	80075fc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007906:	79ba      	ldrb	r2, [r7, #6]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	b2db      	uxtb	r3, r3
 8007910:	330e      	adds	r3, #14
 8007912:	b2db      	uxtb	r3, r3
 8007914:	71bb      	strb	r3, [r7, #6]
 8007916:	e00d      	b.n	8007934 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8007918:	2301      	movs	r3, #1
 800791a:	2200      	movs	r2, #0
 800791c:	2107      	movs	r1, #7
 800791e:	2004      	movs	r0, #4
 8007920:	f7ff fe6c 	bl	80075fc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007924:	79ba      	ldrb	r2, [r7, #6]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	b2db      	uxtb	r3, r3
 800792e:	3316      	adds	r3, #22
 8007930:	b2db      	uxtb	r3, r3
 8007932:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8007934:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007938:	f113 0f09 	cmn.w	r3, #9
 800793c:	da01      	bge.n	8007942 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800793e:	23f7      	movs	r3, #247	; 0xf7
 8007940:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8007942:	2138      	movs	r1, #56	; 0x38
 8007944:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007948:	f000 fa2a 	bl	8007da0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800794c:	79bb      	ldrb	r3, [r7, #6]
 800794e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8007950:	797b      	ldrb	r3, [r7, #5]
 8007952:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8007954:	f107 0308 	add.w	r3, r7, #8
 8007958:	2202      	movs	r2, #2
 800795a:	4619      	mov	r1, r3
 800795c:	208e      	movs	r0, #142	; 0x8e
 800795e:	f000 facf 	bl	8007f00 <SUBGRF_WriteCommand>
}
 8007962:	bf00      	nop
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800796c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007970:	b086      	sub	sp, #24
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800797a:	4a61      	ldr	r2, [pc, #388]	; (8007b00 <SUBGRF_SetModulationParams+0x194>)
 800797c:	f107 0308 	add.w	r3, r7, #8
 8007980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007984:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	4b5d      	ldr	r3, [pc, #372]	; (8007b04 <SUBGRF_SetModulationParams+0x198>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d004      	beq.n	800799e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff fef3 	bl	8007784 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	f200 80a5 	bhi.w	8007af2 <SUBGRF_SetModulationParams+0x186>
 80079a8:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <SUBGRF_SetModulationParams+0x44>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079c1 	.word	0x080079c1
 80079b4:	08007a81 	.word	0x08007a81
 80079b8:	08007a43 	.word	0x08007a43
 80079bc:	08007aaf 	.word	0x08007aaf
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80079c0:	2308      	movs	r3, #8
 80079c2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4a4f      	ldr	r2, [pc, #316]	; (8007b08 <SUBGRF_SetModulationParams+0x19c>)
 80079ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ce:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	0c1b      	lsrs	r3, r3, #16
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7b1b      	ldrb	r3, [r3, #12]
 80079ea:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7b5b      	ldrb	r3, [r3, #13]
 80079f0:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2200      	movs	r2, #0
 80079f8:	461c      	mov	r4, r3
 80079fa:	4615      	mov	r5, r2
 80079fc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8007a00:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8007a04:	4a41      	ldr	r2, [pc, #260]	; (8007b0c <SUBGRF_SetModulationParams+0x1a0>)
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f8 fc07 	bl	8000220 <__aeabi_uldivmod>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4613      	mov	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	0c1b      	lsrs	r3, r3, #16
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a30:	7cfb      	ldrb	r3, [r7, #19]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f107 0308 	add.w	r3, r7, #8
 8007a38:	4619      	mov	r1, r3
 8007a3a:	208b      	movs	r0, #139	; 0x8b
 8007a3c:	f000 fa60 	bl	8007f00 <SUBGRF_WriteCommand>
        break;
 8007a40:	e058      	b.n	8007af4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8007a42:	2304      	movs	r3, #4
 8007a44:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	4a2f      	ldr	r2, [pc, #188]	; (8007b08 <SUBGRF_SetModulationParams+0x19c>)
 8007a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a50:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	0a1b      	lsrs	r3, r3, #8
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	7d1b      	ldrb	r3, [r3, #20]
 8007a6c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a6e:	7cfb      	ldrb	r3, [r7, #19]
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	f107 0308 	add.w	r3, r7, #8
 8007a76:	4619      	mov	r1, r3
 8007a78:	208b      	movs	r0, #139	; 0x8b
 8007a7a:	f000 fa41 	bl	8007f00 <SUBGRF_WriteCommand>
        break;
 8007a7e:	e039      	b.n	8007af4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8007a80:	2304      	movs	r3, #4
 8007a82:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	7e1b      	ldrb	r3, [r3, #24]
 8007a88:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7e5b      	ldrb	r3, [r3, #25]
 8007a8e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7e9b      	ldrb	r3, [r3, #26]
 8007a94:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	7edb      	ldrb	r3, [r3, #27]
 8007a9a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007a9c:	7cfb      	ldrb	r3, [r7, #19]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f107 0308 	add.w	r3, r7, #8
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	208b      	movs	r0, #139	; 0x8b
 8007aa8:	f000 fa2a 	bl	8007f00 <SUBGRF_WriteCommand>

        break;
 8007aac:	e022      	b.n	8007af4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8007aae:	2305      	movs	r3, #5
 8007ab0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	4a14      	ldr	r2, [pc, #80]	; (8007b08 <SUBGRF_SetModulationParams+0x19c>)
 8007ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	7b1b      	ldrb	r3, [r3, #12]
 8007ad8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7b5b      	ldrb	r3, [r3, #13]
 8007ade:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007ae0:	7cfb      	ldrb	r3, [r7, #19]
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	f107 0308 	add.w	r3, r7, #8
 8007ae8:	4619      	mov	r1, r3
 8007aea:	208b      	movs	r0, #139	; 0x8b
 8007aec:	f000 fa08 	bl	8007f00 <SUBGRF_WriteCommand>
        break;
 8007af0:	e000      	b.n	8007af4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8007af2:	bf00      	nop
    }
}
 8007af4:	bf00      	nop
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007afe:	bf00      	nop
 8007b00:	080098e8 	.word	0x080098e8
 8007b04:	20000415 	.word	0x20000415
 8007b08:	3d090000 	.word	0x3d090000
 8007b0c:	01e84800 	.word	0x01e84800

08007b10 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007b1c:	4a48      	ldr	r2, [pc, #288]	; (8007c40 <SUBGRF_SetPacketParams+0x130>)
 8007b1e:	f107 030c 	add.w	r3, r7, #12
 8007b22:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b24:	c303      	stmia	r3!, {r0, r1}
 8007b26:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	781a      	ldrb	r2, [r3, #0]
 8007b2c:	4b45      	ldr	r3, [pc, #276]	; (8007c44 <SUBGRF_SetPacketParams+0x134>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d004      	beq.n	8007b3e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fe23 	bl	8007784 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d878      	bhi.n	8007c38 <SUBGRF_SetPacketParams+0x128>
 8007b46:	a201      	add	r2, pc, #4	; (adr r2, 8007b4c <SUBGRF_SetPacketParams+0x3c>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b5d 	.word	0x08007b5d
 8007b50:	08007bed 	.word	0x08007bed
 8007b54:	08007be1 	.word	0x08007be1
 8007b58:	08007b5d 	.word	0x08007b5d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7a5b      	ldrb	r3, [r3, #9]
 8007b60:	2bf1      	cmp	r3, #241	; 0xf1
 8007b62:	d10a      	bne.n	8007b7a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007b64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007b68:	f7ff faaa 	bl	80070c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007b6c:	f248 0005 	movw	r0, #32773	; 0x8005
 8007b70:	f7ff fac6 	bl	8007100 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007b74:	2302      	movs	r3, #2
 8007b76:	75bb      	strb	r3, [r7, #22]
 8007b78:	e011      	b.n	8007b9e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7a5b      	ldrb	r3, [r3, #9]
 8007b7e:	2bf2      	cmp	r3, #242	; 0xf2
 8007b80:	d10a      	bne.n	8007b98 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007b82:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007b86:	f7ff fa9b 	bl	80070c0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007b8a:	f241 0021 	movw	r0, #4129	; 0x1021
 8007b8e:	f7ff fab7 	bl	8007100 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007b92:	2306      	movs	r3, #6
 8007b94:	75bb      	strb	r3, [r7, #22]
 8007b96:	e002      	b.n	8007b9e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7a5b      	ldrb	r3, [r3, #9]
 8007b9c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8007b9e:	2309      	movs	r3, #9
 8007ba0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	885b      	ldrh	r3, [r3, #2]
 8007ba6:	0a1b      	lsrs	r3, r3, #8
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	885b      	ldrh	r3, [r3, #2]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	791b      	ldrb	r3, [r3, #4]
 8007bba:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	795b      	ldrb	r3, [r3, #5]
 8007bc0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	799b      	ldrb	r3, [r3, #6]
 8007bc6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	79db      	ldrb	r3, [r3, #7]
 8007bcc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7a1b      	ldrb	r3, [r3, #8]
 8007bd2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8007bd4:	7dbb      	ldrb	r3, [r7, #22]
 8007bd6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7a9b      	ldrb	r3, [r3, #10]
 8007bdc:	753b      	strb	r3, [r7, #20]
        break;
 8007bde:	e022      	b.n	8007c26 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7b1b      	ldrb	r3, [r3, #12]
 8007be8:	733b      	strb	r3, [r7, #12]
        break;
 8007bea:	e01c      	b.n	8007c26 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8007bec:	2306      	movs	r3, #6
 8007bee:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	89db      	ldrh	r3, [r3, #14]
 8007bf4:	0a1b      	lsrs	r3, r3, #8
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	89db      	ldrh	r3, [r3, #14]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	7c1a      	ldrb	r2, [r3, #16]
 8007c08:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <SUBGRF_SetPacketParams+0x138>)
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	7019      	strb	r1, [r3, #0]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7c5b      	ldrb	r3, [r3, #17]
 8007c16:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7c9b      	ldrb	r3, [r3, #18]
 8007c1c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	7cdb      	ldrb	r3, [r3, #19]
 8007c22:	747b      	strb	r3, [r7, #17]
        break;
 8007c24:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f107 030c 	add.w	r3, r7, #12
 8007c2e:	4619      	mov	r1, r3
 8007c30:	208c      	movs	r0, #140	; 0x8c
 8007c32:	f000 f965 	bl	8007f00 <SUBGRF_WriteCommand>
 8007c36:	e000      	b.n	8007c3a <SUBGRF_SetPacketParams+0x12a>
        return;
 8007c38:	bf00      	nop
}
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	080098f0 	.word	0x080098f0
 8007c44:	20000415 	.word	0x20000415
 8007c48:	20000416 	.word	0x20000416

08007c4c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	4603      	mov	r3, r0
 8007c54:	460a      	mov	r2, r1
 8007c56:	71fb      	strb	r3, [r7, #7]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8007c60:	79bb      	ldrb	r3, [r7, #6]
 8007c62:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	2202      	movs	r2, #2
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	208f      	movs	r0, #143	; 0x8f
 8007c6e:	f000 f947 	bl	8007f00 <SUBGRF_WriteCommand>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8007c84:	1d3b      	adds	r3, r7, #4
 8007c86:	2201      	movs	r2, #1
 8007c88:	4619      	mov	r1, r3
 8007c8a:	2015      	movs	r0, #21
 8007c8c:	f000 f95a 	bl	8007f44 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007c90:	793b      	ldrb	r3, [r7, #4]
 8007c92:	425b      	negs	r3, r3
 8007c94:	105b      	asrs	r3, r3, #1
 8007c96:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8007c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	2013      	movs	r0, #19
 8007cb8:	f000 f944 	bl	8007f44 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007cbc:	f7ff fd7e 	bl	80077bc <SUBGRF_GetPacketType>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d10d      	bne.n	8007ce2 <SUBGRF_GetRxBufferStatus+0x3e>
 8007cc6:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <SUBGRF_GetRxBufferStatus+0x54>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d108      	bne.n	8007ce2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007cd0:	f240 7002 	movw	r0, #1794	; 0x702
 8007cd4:	f000 f878 	bl	8007dc8 <SUBGRF_ReadRegister>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	e002      	b.n	8007ce8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8007ce2:	7b3a      	ldrb	r2, [r7, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8007ce8:	7b7a      	ldrb	r2, [r7, #13]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	701a      	strb	r2, [r3, #0]
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000416 	.word	0x20000416

08007cfc <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007d04:	f107 030c 	add.w	r3, r7, #12
 8007d08:	2203      	movs	r2, #3
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	2014      	movs	r0, #20
 8007d0e:	f000 f919 	bl	8007f44 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007d12:	f7ff fd53 	bl	80077bc <SUBGRF_GetPacketType>
 8007d16:	4603      	mov	r3, r0
 8007d18:	461a      	mov	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <SUBGRF_GetPacketStatus+0x30>
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d013      	beq.n	8007d52 <SUBGRF_GetPacketStatus+0x56>
 8007d2a:	e02a      	b.n	8007d82 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007d2c:	7b3a      	ldrb	r2, [r7, #12]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007d32:	7b7b      	ldrb	r3, [r7, #13]
 8007d34:	425b      	negs	r3, r3
 8007d36:	105b      	asrs	r3, r3, #1
 8007d38:	b25a      	sxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	425b      	negs	r3, r3
 8007d42:	105b      	asrs	r3, r3, #1
 8007d44:	b25a      	sxtb	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
            break;
 8007d50:	e020      	b.n	8007d94 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007d52:	7b3b      	ldrb	r3, [r7, #12]
 8007d54:	425b      	negs	r3, r3
 8007d56:	105b      	asrs	r3, r3, #1
 8007d58:	b25a      	sxtb	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007d5e:	7b7b      	ldrb	r3, [r7, #13]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	3302      	adds	r3, #2
 8007d64:	109b      	asrs	r3, r3, #2
 8007d66:	b25a      	sxtb	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	425b      	negs	r3, r3
 8007d70:	105b      	asrs	r3, r3, #1
 8007d72:	b25a      	sxtb	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007d78:	4b08      	ldr	r3, [pc, #32]	; (8007d9c <SUBGRF_GetPacketStatus+0xa0>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	611a      	str	r2, [r3, #16]
            break;
 8007d80:	e008      	b.n	8007d94 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007d82:	2214      	movs	r2, #20
 8007d84:	2100      	movs	r1, #0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fca7 	bl	80086da <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	220f      	movs	r2, #15
 8007d90:	701a      	strb	r2, [r3, #0]
            break;
 8007d92:	bf00      	nop
    }
}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20000418 	.word	0x20000418

08007da0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	460a      	mov	r2, r1
 8007daa:	80fb      	strh	r3, [r7, #6]
 8007dac:	4613      	mov	r3, r2
 8007dae:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8007db0:	1d7a      	adds	r2, r7, #5
 8007db2:	88f9      	ldrh	r1, [r7, #6]
 8007db4:	2301      	movs	r3, #1
 8007db6:	4803      	ldr	r0, [pc, #12]	; (8007dc4 <SUBGRF_WriteRegister+0x24>)
 8007db8:	f7fb fad2 	bl	8003360 <HAL_SUBGHZ_WriteRegisters>
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200000ac 	.word	0x200000ac

08007dc8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8007dd2:	f107 020f 	add.w	r2, r7, #15
 8007dd6:	88f9      	ldrh	r1, [r7, #6]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	4804      	ldr	r0, [pc, #16]	; (8007dec <SUBGRF_ReadRegister+0x24>)
 8007ddc:	f7fb fb1f 	bl	800341e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	200000ac 	.word	0x200000ac

08007df0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	6039      	str	r1, [r7, #0]
 8007dfa:	80fb      	strh	r3, [r7, #6]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e00:	f3ef 8310 	mrs	r3, PRIMASK
 8007e04:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e06:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e0a:	b672      	cpsid	i
}
 8007e0c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8007e0e:	88bb      	ldrh	r3, [r7, #4]
 8007e10:	88f9      	ldrh	r1, [r7, #6]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	4806      	ldr	r0, [pc, #24]	; (8007e30 <SUBGRF_WriteRegisters+0x40>)
 8007e16:	f7fb faa3 	bl	8003360 <HAL_SUBGHZ_WriteRegisters>
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f383 8810 	msr	PRIMASK, r3
}
 8007e24:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007e26:	bf00      	nop
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200000ac 	.word	0x200000ac

08007e34 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	80fb      	strh	r3, [r7, #6]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e44:	f3ef 8310 	mrs	r3, PRIMASK
 8007e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e4e:	b672      	cpsid	i
}
 8007e50:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8007e52:	88bb      	ldrh	r3, [r7, #4]
 8007e54:	88f9      	ldrh	r1, [r7, #6]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4806      	ldr	r0, [pc, #24]	; (8007e74 <SUBGRF_ReadRegisters+0x40>)
 8007e5a:	f7fb fae0 	bl	800341e <HAL_SUBGHZ_ReadRegisters>
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f383 8810 	msr	PRIMASK, r3
}
 8007e68:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007e6a:	bf00      	nop
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	200000ac 	.word	0x200000ac

08007e78 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	71fb      	strb	r3, [r7, #7]
 8007e84:	4613      	mov	r3, r2
 8007e86:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e88:	f3ef 8310 	mrs	r3, PRIMASK
 8007e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007e90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e92:	b672      	cpsid	i
}
 8007e94:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8007e96:	79bb      	ldrb	r3, [r7, #6]
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	79f9      	ldrb	r1, [r7, #7]
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	4806      	ldr	r0, [pc, #24]	; (8007eb8 <SUBGRF_WriteBuffer+0x40>)
 8007ea0:	f7fb fbd1 	bl	8003646 <HAL_SUBGHZ_WriteBuffer>
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f383 8810 	msr	PRIMASK, r3
}
 8007eae:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007eb0:	bf00      	nop
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	200000ac 	.word	0x200000ac

08007ebc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007ed4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ed6:	b672      	cpsid	i
}
 8007ed8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8007eda:	79bb      	ldrb	r3, [r7, #6]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	79f9      	ldrb	r1, [r7, #7]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	4806      	ldr	r0, [pc, #24]	; (8007efc <SUBGRF_ReadBuffer+0x40>)
 8007ee4:	f7fb fc02 	bl	80036ec <HAL_SUBGHZ_ReadBuffer>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007ef4:	bf00      	nop
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	200000ac 	.word	0x200000ac

08007f00 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f10:	f3ef 8310 	mrs	r3, PRIMASK
 8007f14:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f16:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007f18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f1a:	b672      	cpsid	i
}
 8007f1c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8007f1e:	88bb      	ldrh	r3, [r7, #4]
 8007f20:	79f9      	ldrb	r1, [r7, #7]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	4806      	ldr	r0, [pc, #24]	; (8007f40 <SUBGRF_WriteCommand+0x40>)
 8007f26:	f7fb fadb 	bl	80034e0 <HAL_SUBGHZ_ExecSetCmd>
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f383 8810 	msr	PRIMASK, r3
}
 8007f34:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007f36:	bf00      	nop
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200000ac 	.word	0x200000ac

08007f44 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
 8007f50:	4613      	mov	r3, r2
 8007f52:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f54:	f3ef 8310 	mrs	r3, PRIMASK
 8007f58:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8007f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f5e:	b672      	cpsid	i
}
 8007f60:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007f62:	88bb      	ldrh	r3, [r7, #4]
 8007f64:	79f9      	ldrb	r1, [r7, #7]
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4806      	ldr	r0, [pc, #24]	; (8007f84 <SUBGRF_ReadCommand+0x40>)
 8007f6a:	f7fb fb18 	bl	800359e <HAL_SUBGHZ_ExecGetCmd>
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f383 8810 	msr	PRIMASK, r3
}
 8007f78:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	200000ac 	.word	0x200000ac

08007f88 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	460a      	mov	r2, r1
 8007f92:	71fb      	strb	r3, [r7, #7]
 8007f94:	4613      	mov	r3, r2
 8007f96:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8007f9c:	79bb      	ldrb	r3, [r7, #6]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d10d      	bne.n	8007fbe <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d104      	bne.n	8007fb2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007fac:	2004      	movs	r0, #4
 8007fae:	f000 f8ef 	bl	8008190 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d107      	bne.n	8007fc8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	73fb      	strb	r3, [r7, #15]
 8007fbc:	e004      	b.n	8007fc8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8007fbe:	79bb      	ldrb	r3, [r7, #6]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fad2 	bl	8008574 <RBI_ConfigRFSwitch>
}
 8007fd0:	bf00      	nop
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8007fe6:	f000 fb23 	bl	8008630 <RBI_GetTxConfig>
 8007fea:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d016      	beq.n	8008020 <SUBGRF_SetRfTxPower+0x48>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	dc16      	bgt.n	8008026 <SUBGRF_SetRfTxPower+0x4e>
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <SUBGRF_SetRfTxPower+0x2e>
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d00a      	beq.n	800801a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8008004:	e00f      	b.n	8008026 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8008006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800a:	2b0f      	cmp	r3, #15
 800800c:	dd02      	ble.n	8008014 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800800e:	2302      	movs	r3, #2
 8008010:	73fb      	strb	r3, [r7, #15]
            break;
 8008012:	e009      	b.n	8008028 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
            break;
 8008018:	e006      	b.n	8008028 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800801a:	2301      	movs	r3, #1
 800801c:	73fb      	strb	r3, [r7, #15]
            break;
 800801e:	e003      	b.n	8008028 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8008020:	2302      	movs	r3, #2
 8008022:	73fb      	strb	r3, [r7, #15]
            break;
 8008024:	e000      	b.n	8008028 <SUBGRF_SetRfTxPower+0x50>
            break;
 8008026:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8008028:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2202      	movs	r2, #2
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff fbcd 	bl	80077d0 <SUBGRF_SetTxParams>

    return paSelect;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8008044:	2301      	movs	r3, #1
}
 8008046:	4618      	mov	r0, r3
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr
	...

08008050 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2001      	movs	r0, #1
 800805e:	4798      	blx	r3
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20000420 	.word	0x20000420

0800806c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8008074:	4b03      	ldr	r3, [pc, #12]	; (8008084 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2002      	movs	r0, #2
 800807a:	4798      	blx	r3
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000420 	.word	0x20000420

08008088 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8008090:	4b03      	ldr	r3, [pc, #12]	; (80080a0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2040      	movs	r0, #64	; 0x40
 8008096:	4798      	blx	r3
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000420 	.word	0x20000420

080080a4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <HAL_SUBGHZ_CADStatusCallback+0x18>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d005      	beq.n	80080c6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80080ba:	e00a      	b.n	80080d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2080      	movs	r0, #128	; 0x80
 80080c2:	4798      	blx	r3
            break;
 80080c4:	e005      	b.n	80080d2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080ce:	4798      	blx	r3
            break;
 80080d0:	bf00      	nop
    }
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000420 	.word	0x20000420

080080e0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80080f0:	4798      	blx	r3
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000420 	.word	0x20000420

08008100 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008108:	4b03      	ldr	r3, [pc, #12]	; (8008118 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2020      	movs	r0, #32
 800810e:	4798      	blx	r3
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20000420 	.word	0x20000420

0800811c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008124:	4b03      	ldr	r3, [pc, #12]	; (8008134 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2004      	movs	r0, #4
 800812a:	4798      	blx	r3
}
 800812c:	bf00      	nop
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000420 	.word	0x20000420

08008138 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8008140:	4b03      	ldr	r3, [pc, #12]	; (8008150 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2008      	movs	r0, #8
 8008146:	4798      	blx	r3
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000420 	.word	0x20000420

08008154 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800815c:	4b03      	ldr	r3, [pc, #12]	; (800816c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2010      	movs	r0, #16
 8008162:	4798      	blx	r3
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20000420 	.word	0x20000420

08008170 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8008178:	4b04      	ldr	r3, [pc, #16]	; (800818c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008180:	4798      	blx	r3
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000420 	.word	0x20000420

08008190 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800819a:	f000 fa5f 	bl	800865c <RBI_IsDCDC>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d112      	bne.n	80081ca <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80081a4:	f640 1023 	movw	r0, #2339	; 0x923
 80081a8:	f7ff fe0e 	bl	8007dc8 <SUBGRF_ReadRegister>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	f023 0306 	bic.w	r3, r3, #6
 80081b6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80081b8:	7bfa      	ldrb	r2, [r7, #15]
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	4313      	orrs	r3, r2
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	4619      	mov	r1, r3
 80081c2:	f640 1023 	movw	r0, #2339	; 0x923
 80081c6:	f7ff fdeb 	bl	8007da0 <SUBGRF_WriteRegister>
  }
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80081e2:	231f      	movs	r3, #31
 80081e4:	e016      	b.n	8008214 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]
 80081ea:	e00f      	b.n	800820c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80081f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d205      	bcs.n	8008206 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	4a08      	ldr	r2, [pc, #32]	; (8008220 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	4413      	add	r3, r2
 8008202:	791b      	ldrb	r3, [r3, #4]
 8008204:	e006      	b.n	8008214 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	3301      	adds	r3, #1
 800820a:	73fb      	strb	r3, [r7, #15]
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	2b15      	cmp	r3, #21
 8008210:	d9ec      	bls.n	80081ec <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8008212:	e7fe      	b.n	8008212 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	08009a80 	.word	0x08009a80

08008224 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800822e:	4b35      	ldr	r3, [pc, #212]	; (8008304 <SUBGRF_GetCFO+0xe0>)
 8008230:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8008232:	f640 0007 	movw	r0, #2055	; 0x807
 8008236:	f7ff fdc7 	bl	8007dc8 <SUBGRF_ReadRegister>
 800823a:	4603      	mov	r3, r0
 800823c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800823e:	7ffb      	ldrb	r3, [r7, #31]
 8008240:	08db      	lsrs	r3, r3, #3
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 0303 	and.w	r3, r3, #3
 8008248:	3328      	adds	r3, #40	; 0x28
 800824a:	443b      	add	r3, r7
 800824c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008250:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8008252:	7ffb      	ldrb	r3, [r7, #31]
 8008254:	f003 0307 	and.w	r3, r3, #7
 8008258:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800825a:	7fba      	ldrb	r2, [r7, #30]
 800825c:	7f7b      	ldrb	r3, [r7, #29]
 800825e:	3301      	adds	r3, #1
 8008260:	fa02 f303 	lsl.w	r3, r2, r3
 8008264:	461a      	mov	r2, r3
 8008266:	4b28      	ldr	r3, [pc, #160]	; (8008308 <SUBGRF_GetCFO+0xe4>)
 8008268:	fbb3 f3f2 	udiv	r3, r3, r2
 800826c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	fbb2 f3f3 	udiv	r3, r2, r3
 8008276:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8008278:	2301      	movs	r3, #1
 800827a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800827e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	fb02 f303 	mul.w	r3, r2, r3
 8008288:	2b07      	cmp	r3, #7
 800828a:	d802      	bhi.n	8008292 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800828c:	2302      	movs	r3, #2
 800828e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8008292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	fb02 f303 	mul.w	r3, r2, r3
 800829c:	2b03      	cmp	r3, #3
 800829e:	d802      	bhi.n	80082a6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80082a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	fb02 f303 	mul.w	r3, r2, r3
 80082b0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80082b2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80082b6:	f7ff fd87 	bl	8007dc8 <SUBGRF_ReadRegister>
 80082ba:	4603      	mov	r3, r0
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80082c2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80082c4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80082c8:	f7ff fd7e 	bl	8007dc8 <SUBGRF_ReadRegister>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	6a3b      	ldr	r3, [r7, #32]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80082e6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80082ea:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	6a3a      	ldr	r2, [r7, #32]
 80082f2:	fb02 f303 	mul.w	r3, r2, r3
 80082f6:	11da      	asrs	r2, r3, #7
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	601a      	str	r2, [r3, #0]
}
 80082fc:	bf00      	nop
 80082fe:	3728      	adds	r7, #40	; 0x28
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	0c0a0804 	.word	0x0c0a0804
 8008308:	01e84800 	.word	0x01e84800

0800830c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800831e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008322:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8008324:	697b      	ldr	r3, [r7, #20]
}
 8008326:	4618      	mov	r0, r3
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	bc80      	pop	{r7}
 800832e:	4770      	bx	lr

08008330 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8008342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008346:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8008348:	697b      	ldr	r3, [r7, #20]
}
 800834a:	4618      	mov	r0, r3
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8008360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr

0800836e <RFW_DeInit>:

void RFW_DeInit( void )
{
 800836e:	b480      	push	{r7}
 8008370:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8008372:	bf00      	nop
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr

0800837a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800837a:	b480      	push	{r7}
 800837c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800837e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8008380:	4618      	mov	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800838c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800838e:	4618      	mov	r0, r3
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	4603      	mov	r3, r0
 800839e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr

080083aa <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 80083aa:	b480      	push	{r7}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	460b      	mov	r3, r1
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 80083b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083bc:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 80083be:	697b      	ldr	r3, [r7, #20]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 80083ca:	b480      	push	{r7}
 80083cc:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 80083ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr

080083da <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 80083da:	b480      	push	{r7}
 80083dc:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80083de:	bf00      	nop
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr

080083e6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80083e6:	b480      	push	{r7}
 80083e8:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80083ea:	bf00      	nop
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr

080083f2 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	4603      	mov	r3, r0
 80083fa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr

08008406 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800840a:	f7f8 ff89 	bl	8001320 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800840e:	f000 f809 	bl	8008424 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8008412:	bf00      	nop
 8008414:	bd80      	pop	{r7, pc}

08008416 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8008416:	b480      	push	{r7}
 8008418:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800841a:	bf00      	nop
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
	...

08008424 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8008428:	4b0a      	ldr	r3, [pc, #40]	; (8008454 <SubghzApp_Init+0x30>)
 800842a:	4a0b      	ldr	r2, [pc, #44]	; (8008458 <SubghzApp_Init+0x34>)
 800842c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <SubghzApp_Init+0x30>)
 8008430:	4a0a      	ldr	r2, [pc, #40]	; (800845c <SubghzApp_Init+0x38>)
 8008432:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8008434:	4b07      	ldr	r3, [pc, #28]	; (8008454 <SubghzApp_Init+0x30>)
 8008436:	4a0a      	ldr	r2, [pc, #40]	; (8008460 <SubghzApp_Init+0x3c>)
 8008438:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800843a:	4b06      	ldr	r3, [pc, #24]	; (8008454 <SubghzApp_Init+0x30>)
 800843c:	4a09      	ldr	r2, [pc, #36]	; (8008464 <SubghzApp_Init+0x40>)
 800843e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <SubghzApp_Init+0x30>)
 8008442:	4a09      	ldr	r2, [pc, #36]	; (8008468 <SubghzApp_Init+0x44>)
 8008444:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <SubghzApp_Init+0x48>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4802      	ldr	r0, [pc, #8]	; (8008454 <SubghzApp_Init+0x30>)
 800844c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800844e:	bf00      	nop
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000424 	.word	0x20000424
 8008458:	08008471 	.word	0x08008471
 800845c:	0800847d 	.word	0x0800847d
 8008460:	080084a1 	.word	0x080084a1
 8008464:	080084ad 	.word	0x080084ad
 8008468:	080084b9 	.word	0x080084b9
 800846c:	080099f0 	.word	0x080099f0

08008470 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8008474:	bf00      	nop
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	461a      	mov	r2, r3
 800848a:	4603      	mov	r3, r0
 800848c:	817b      	strh	r3, [r7, #10]
 800848e:	460b      	mov	r3, r1
 8008490:	813b      	strh	r3, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8008496:	bf00      	nop
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 80084a4:	bf00      	nop
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr

080084ac <OnRxTimeout>:

static void OnRxTimeout(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 80084b0:	bf00      	nop
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <OnRxError>:

static void OnRxError(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 80084bc:	bf00      	nop
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr

080084c4 <LL_AHB2_GRP1_EnableClock>:
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80084cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4313      	orrs	r3, r2
 80084da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80084dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4013      	ands	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80084e8:	68fb      	ldr	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 80084fe:	463b      	mov	r3, r7
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	605a      	str	r2, [r3, #4]
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	60da      	str	r2, [r3, #12]
 800850a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800850c:	2004      	movs	r0, #4
 800850e:	f7ff ffd9 	bl	80084c4 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8008512:	2310      	movs	r3, #16
 8008514:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8008516:	2301      	movs	r3, #1
 8008518:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800851a:	2300      	movs	r3, #0
 800851c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800851e:	2303      	movs	r3, #3
 8008520:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8008522:	463b      	mov	r3, r7
 8008524:	4619      	mov	r1, r3
 8008526:	4812      	ldr	r0, [pc, #72]	; (8008570 <RBI_Init+0x7c>)
 8008528:	f7f9 f976 	bl	8001818 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800852c:	2320      	movs	r3, #32
 800852e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8008530:	463b      	mov	r3, r7
 8008532:	4619      	mov	r1, r3
 8008534:	480e      	ldr	r0, [pc, #56]	; (8008570 <RBI_Init+0x7c>)
 8008536:	f7f9 f96f 	bl	8001818 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800853a:	2308      	movs	r3, #8
 800853c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800853e:	463b      	mov	r3, r7
 8008540:	4619      	mov	r1, r3
 8008542:	480b      	ldr	r0, [pc, #44]	; (8008570 <RBI_Init+0x7c>)
 8008544:	f7f9 f968 	bl	8001818 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8008548:	2200      	movs	r2, #0
 800854a:	2120      	movs	r1, #32
 800854c:	4808      	ldr	r0, [pc, #32]	; (8008570 <RBI_Init+0x7c>)
 800854e:	f7f9 fac3 	bl	8001ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8008552:	2200      	movs	r2, #0
 8008554:	2110      	movs	r1, #16
 8008556:	4806      	ldr	r0, [pc, #24]	; (8008570 <RBI_Init+0x7c>)
 8008558:	f7f9 fabe 	bl	8001ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800855c:	2200      	movs	r2, #0
 800855e:	2108      	movs	r1, #8
 8008560:	4803      	ldr	r0, [pc, #12]	; (8008570 <RBI_Init+0x7c>)
 8008562:	f7f9 fab9 	bl	8001ad8 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8008566:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	48000800 	.word	0x48000800

08008574 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	2b03      	cmp	r3, #3
 8008586:	d84b      	bhi.n	8008620 <RBI_ConfigRFSwitch+0xac>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <RBI_ConfigRFSwitch+0x1c>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085c1 	.word	0x080085c1
 8008598:	080085e1 	.word	0x080085e1
 800859c:	08008601 	.word	0x08008601
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 80085a0:	2200      	movs	r2, #0
 80085a2:	2108      	movs	r1, #8
 80085a4:	4821      	ldr	r0, [pc, #132]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085a6:	f7f9 fa97 	bl	8001ad8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 80085aa:	2200      	movs	r2, #0
 80085ac:	2110      	movs	r1, #16
 80085ae:	481f      	ldr	r0, [pc, #124]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085b0:	f7f9 fa92 	bl	8001ad8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 80085b4:	2200      	movs	r2, #0
 80085b6:	2120      	movs	r1, #32
 80085b8:	481c      	ldr	r0, [pc, #112]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085ba:	f7f9 fa8d 	bl	8001ad8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 80085be:	e030      	b.n	8008622 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80085c0:	2201      	movs	r2, #1
 80085c2:	2108      	movs	r1, #8
 80085c4:	4819      	ldr	r0, [pc, #100]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085c6:	f7f9 fa87 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 80085ca:	2201      	movs	r2, #1
 80085cc:	2110      	movs	r1, #16
 80085ce:	4817      	ldr	r0, [pc, #92]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085d0:	f7f9 fa82 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 80085d4:	2200      	movs	r2, #0
 80085d6:	2120      	movs	r1, #32
 80085d8:	4814      	ldr	r0, [pc, #80]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085da:	f7f9 fa7d 	bl	8001ad8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 80085de:	e020      	b.n	8008622 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80085e0:	2201      	movs	r2, #1
 80085e2:	2108      	movs	r1, #8
 80085e4:	4811      	ldr	r0, [pc, #68]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085e6:	f7f9 fa77 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 80085ea:	2201      	movs	r2, #1
 80085ec:	2110      	movs	r1, #16
 80085ee:	480f      	ldr	r0, [pc, #60]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085f0:	f7f9 fa72 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 80085f4:	2201      	movs	r2, #1
 80085f6:	2120      	movs	r1, #32
 80085f8:	480c      	ldr	r0, [pc, #48]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 80085fa:	f7f9 fa6d 	bl	8001ad8 <HAL_GPIO_WritePin>
		break;
 80085fe:	e010      	b.n	8008622 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8008600:	2201      	movs	r2, #1
 8008602:	2108      	movs	r1, #8
 8008604:	4809      	ldr	r0, [pc, #36]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 8008606:	f7f9 fa67 	bl	8001ad8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800860a:	2200      	movs	r2, #0
 800860c:	2110      	movs	r1, #16
 800860e:	4807      	ldr	r0, [pc, #28]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 8008610:	f7f9 fa62 	bl	8001ad8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8008614:	2201      	movs	r2, #1
 8008616:	2120      	movs	r1, #32
 8008618:	4804      	ldr	r0, [pc, #16]	; (800862c <RBI_ConfigRFSwitch+0xb8>)
 800861a:	f7f9 fa5d 	bl	8001ad8 <HAL_GPIO_WritePin>
		break;
 800861e:	e000      	b.n	8008622 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 8008620:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8008622:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	48000800 	.word	0x48000800

08008630 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8008636:	2300      	movs	r3, #0
 8008638:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800863a:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800864c:	2301      	movs	r3, #1
 800864e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 8008650:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8008662:	2301      	movs	r3, #1
 8008664:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 8008666:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	bc80      	pop	{r7}
 8008670:	4770      	bx	lr

08008672 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	4603      	mov	r3, r0
 800867a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d102      	bne.n	800868c <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 8008686:	230f      	movs	r3, #15
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	e001      	b.n	8008690 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800868c:	2316      	movs	r3, #22
 800868e:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8008690:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4613      	mov	r3, r2
 80086a8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	613b      	str	r3, [r7, #16]

  while( size-- )
 80086b2:	e007      	b.n	80086c4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	1c53      	adds	r3, r2, #1
 80086b8:	613b      	str	r3, [r7, #16]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	1c59      	adds	r1, r3, #1
 80086be:	6179      	str	r1, [r7, #20]
 80086c0:	7812      	ldrb	r2, [r2, #0]
 80086c2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	1e5a      	subs	r2, r3, #1
 80086c8:	80fa      	strh	r2, [r7, #6]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1f2      	bne.n	80086b4 <UTIL_MEM_cpy_8+0x18>
    }
}
 80086ce:	bf00      	nop
 80086d0:	bf00      	nop
 80086d2:	371c      	adds	r7, #28
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr

080086da <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80086da:	b480      	push	{r7}
 80086dc:	b085      	sub	sp, #20
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
 80086e6:	4613      	mov	r3, r2
 80086e8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80086ee:	e004      	b.n	80086fa <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	60fa      	str	r2, [r7, #12]
 80086f6:	78fa      	ldrb	r2, [r7, #3]
 80086f8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80086fa:	883b      	ldrh	r3, [r7, #0]
 80086fc:	1e5a      	subs	r2, r3, #1
 80086fe:	803a      	strh	r2, [r7, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1f5      	bne.n	80086f0 <UTIL_MEM_set_8+0x16>
  }
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d023      	beq.n	800876e <UTIL_TIMER_Create+0x5e>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d020      	beq.n	800876e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8008732:	4b11      	ldr	r3, [pc, #68]	; (8008778 <UTIL_TIMER_Create+0x68>)
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	68b8      	ldr	r0, [r7, #8]
 8008738:	4798      	blx	r3
 800873a:	4602      	mov	r2, r0
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	79fa      	ldrb	r2, [r7, #7]
 8008762:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e000      	b.n	8008770 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800876e:	2301      	movs	r3, #1
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	0800999c 	.word	0x0800999c

0800877c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	; 0x28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d056      	beq.n	800883e <UTIL_TIMER_Start+0xc2>
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f929 	bl	80089e8 <TimerExists>
 8008796:	4603      	mov	r3, r0
 8008798:	f083 0301 	eor.w	r3, r3, #1
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d04d      	beq.n	800883e <UTIL_TIMER_Start+0xc2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7a5b      	ldrb	r3, [r3, #9]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d149      	bne.n	800883e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087aa:	f3ef 8310 	mrs	r3, PRIMASK
 80087ae:	613b      	str	r3, [r7, #16]
  return(result);
 80087b0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80087b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80087b4:	b672      	cpsid	i
}
 80087b6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <UTIL_TIMER_Start+0xd4>)
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	4798      	blx	r3
 80087c4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80087c6:	6a3a      	ldr	r2, [r7, #32]
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d201      	bcs.n	80087d2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a3a      	ldr	r2, [r7, #32]
 80087d6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80087ea:	4b1a      	ldr	r3, [pc, #104]	; (8008854 <UTIL_TIMER_Start+0xd8>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80087f2:	4b17      	ldr	r3, [pc, #92]	; (8008850 <UTIL_TIMER_Start+0xd4>)
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f96b 	bl	8008ad4 <TimerInsertNewHeadTimer>
 80087fe:	e017      	b.n	8008830 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8008800:	4b13      	ldr	r3, [pc, #76]	; (8008850 <UTIL_TIMER_Start+0xd4>)
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4798      	blx	r3
 8008806:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	441a      	add	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4b0e      	ldr	r3, [pc, #56]	; (8008854 <UTIL_TIMER_Start+0xd8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d203      	bcs.n	800882a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f956 	bl	8008ad4 <TimerInsertNewHeadTimer>
 8008828:	e002      	b.n	8008830 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f922 	bl	8008a74 <TimerInsertTimer>
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	bf00      	nop
  {
 800883c:	e002      	b.n	8008844 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8008844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008848:	4618      	mov	r0, r3
 800884a:	3728      	adds	r7, #40	; 0x28
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	0800999c 	.word	0x0800999c
 8008854:	20000440 	.word	0x20000440

08008858 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d05b      	beq.n	8008922 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800886a:	f3ef 8310 	mrs	r3, PRIMASK
 800886e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008870:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8008872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008874:	b672      	cpsid	i
}
 8008876:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8008878:	4b2d      	ldr	r3, [pc, #180]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800887e:	4b2c      	ldr	r3, [pc, #176]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800888a:	4b29      	ldr	r3, [pc, #164]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d041      	beq.n	8008916 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8008898:	4b25      	ldr	r3, [pc, #148]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d134      	bne.n	800890c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 80088a2:	4b23      	ldr	r3, [pc, #140]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 80088aa:	4b21      	ldr	r3, [pc, #132]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	4a1d      	ldr	r2, [pc, #116]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 80088bc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 80088be:	4b1c      	ldr	r3, [pc, #112]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 f8ac 	bl	8008a20 <TimerSetTimeout>
 80088c8:	e023      	b.n	8008912 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80088ca:	4b1a      	ldr	r3, [pc, #104]	; (8008934 <UTIL_TIMER_Stop+0xdc>)
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	4798      	blx	r3
            TimerListHead = NULL;
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <UTIL_TIMER_Stop+0xd8>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	e01c      	b.n	8008912 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d110      	bne.n	8008902 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d006      	beq.n	80088f6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80088f4:	e00d      	b.n	8008912 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	615a      	str	r2, [r3, #20]
            break;
 8008900:	e007      	b.n	8008912 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e2      	bne.n	80088d8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	77fb      	strb	r3, [r7, #31]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f383 8810 	msr	PRIMASK, r3
}
 8008920:	e001      	b.n	8008926 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8008922:	2301      	movs	r3, #1
 8008924:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8008926:	7ffb      	ldrb	r3, [r7, #31]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000440 	.word	0x20000440
 8008934:	0800999c 	.word	0x0800999c

08008938 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d102      	bne.n	8008952 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800894c:	2301      	movs	r3, #1
 800894e:	73fb      	strb	r3, [r7, #15]
 8008950:	e014      	b.n	800897c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8008952:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <UTIL_TIMER_SetPeriod+0x50>)
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	6838      	ldr	r0, [r7, #0]
 8008958:	4798      	blx	r3
 800895a:	4602      	mov	r2, r0
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f841 	bl	80089e8 <TimerExists>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff ff73 	bl	8008858 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff ff02 	bl	800877c <UTIL_TIMER_Start>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800897c:	7bfb      	ldrb	r3, [r7, #15]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	0800999c 	.word	0x0800999c

0800898c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8008992:	4b06      	ldr	r3, [pc, #24]	; (80089ac <UTIL_TIMER_GetCurrentTime+0x20>)
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	4798      	blx	r3
 8008998:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800899a:	4b04      	ldr	r3, [pc, #16]	; (80089ac <UTIL_TIMER_GetCurrentTime+0x20>)
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	0800999c 	.word	0x0800999c

080089b0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80089b8:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	4798      	blx	r3
 80089be:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80089c0:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
 80089c8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80089ca:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	1a8a      	subs	r2, r1, r2
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	4603      	mov	r3, r0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	0800999c 	.word	0x0800999c

080089e8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <TimerExists+0x34>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80089f6:	e008      	b.n	8008a0a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d101      	bne.n	8008a04 <TimerExists+0x1c>
    {
      return true;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e006      	b.n	8008a12 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1f3      	bne.n	80089f8 <TimerExists+0x10>
  }
  return false;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	20000440 	.word	0x20000440

08008a20 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8008a20:	b590      	push	{r4, r7, lr}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8008a28:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <TimerSetTimeout+0x50>)
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	4798      	blx	r3
 8008a2e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681c      	ldr	r4, [r3, #0]
 8008a3a:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <TimerSetTimeout+0x50>)
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	4798      	blx	r3
 8008a40:	4602      	mov	r2, r0
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d207      	bcs.n	8008a5a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8008a4a:	4b09      	ldr	r3, [pc, #36]	; (8008a70 <TimerSetTimeout+0x50>)
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	4798      	blx	r3
 8008a50:	4602      	mov	r2, r0
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	441a      	add	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <TimerSetTimeout+0x50>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	4610      	mov	r0, r2
 8008a64:	4798      	blx	r3
}
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd90      	pop	{r4, r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	0800999c 	.word	0x0800999c

08008a74 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008a7c:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <TimerInsertTimer+0x5c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8008a82:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <TimerInsertTimer+0x5c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8008a8a:	e012      	b.n	8008ab2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d905      	bls.n	8008aa4 <TimerInsertTimer+0x30>
    {
        cur = next;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	60bb      	str	r3, [r7, #8]
 8008aa2:	e006      	b.n	8008ab2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	615a      	str	r2, [r3, #20]
        return;
 8008ab0:	e009      	b.n	8008ac6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e8      	bne.n	8008a8c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	615a      	str	r2, [r3, #20]
}
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000440 	.word	0x20000440

08008ad4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <TimerInsertNewHeadTimer+0x38>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8008af4:	4a05      	ldr	r2, [pc, #20]	; (8008b0c <TimerInsertNewHeadTimer+0x38>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8008afa:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <TimerInsertNewHeadTimer+0x38>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff ff8e 	bl	8008a20 <TimerSetTimeout>
}
 8008b04:	bf00      	nop
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000440 	.word	0x20000440

08008b10 <_vsniprintf_r>:
 8008b10:	b530      	push	{r4, r5, lr}
 8008b12:	4614      	mov	r4, r2
 8008b14:	2c00      	cmp	r4, #0
 8008b16:	b09b      	sub	sp, #108	; 0x6c
 8008b18:	4605      	mov	r5, r0
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	da05      	bge.n	8008b2a <_vsniprintf_r+0x1a>
 8008b1e:	238b      	movs	r3, #139	; 0x8b
 8008b20:	6003      	str	r3, [r0, #0]
 8008b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b26:	b01b      	add	sp, #108	; 0x6c
 8008b28:	bd30      	pop	{r4, r5, pc}
 8008b2a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b32:	bf14      	ite	ne
 8008b34:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008b38:	4623      	moveq	r3, r4
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b42:	9100      	str	r1, [sp, #0]
 8008b44:	9104      	str	r1, [sp, #16]
 8008b46:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008b4a:	4669      	mov	r1, sp
 8008b4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b4e:	f000 f8b5 	bl	8008cbc <_svfiprintf_r>
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	bfbc      	itt	lt
 8008b56:	238b      	movlt	r3, #139	; 0x8b
 8008b58:	602b      	strlt	r3, [r5, #0]
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d0e3      	beq.n	8008b26 <_vsniprintf_r+0x16>
 8008b5e:	9b00      	ldr	r3, [sp, #0]
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
 8008b64:	e7df      	b.n	8008b26 <_vsniprintf_r+0x16>
	...

08008b68 <vsniprintf>:
 8008b68:	b507      	push	{r0, r1, r2, lr}
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	460a      	mov	r2, r1
 8008b70:	4601      	mov	r1, r0
 8008b72:	4803      	ldr	r0, [pc, #12]	; (8008b80 <vsniprintf+0x18>)
 8008b74:	6800      	ldr	r0, [r0, #0]
 8008b76:	f7ff ffcb 	bl	8008b10 <_vsniprintf_r>
 8008b7a:	b003      	add	sp, #12
 8008b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b80:	2000005c 	.word	0x2000005c

08008b84 <memset>:
 8008b84:	4402      	add	r2, r0
 8008b86:	4603      	mov	r3, r0
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d100      	bne.n	8008b8e <memset+0xa>
 8008b8c:	4770      	bx	lr
 8008b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b92:	e7f9      	b.n	8008b88 <memset+0x4>

08008b94 <__errno>:
 8008b94:	4b01      	ldr	r3, [pc, #4]	; (8008b9c <__errno+0x8>)
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	2000005c 	.word	0x2000005c

08008ba0 <__libc_init_array>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4d0d      	ldr	r5, [pc, #52]	; (8008bd8 <__libc_init_array+0x38>)
 8008ba4:	4c0d      	ldr	r4, [pc, #52]	; (8008bdc <__libc_init_array+0x3c>)
 8008ba6:	1b64      	subs	r4, r4, r5
 8008ba8:	10a4      	asrs	r4, r4, #2
 8008baa:	2600      	movs	r6, #0
 8008bac:	42a6      	cmp	r6, r4
 8008bae:	d109      	bne.n	8008bc4 <__libc_init_array+0x24>
 8008bb0:	4d0b      	ldr	r5, [pc, #44]	; (8008be0 <__libc_init_array+0x40>)
 8008bb2:	4c0c      	ldr	r4, [pc, #48]	; (8008be4 <__libc_init_array+0x44>)
 8008bb4:	f000 fc68 	bl	8009488 <_init>
 8008bb8:	1b64      	subs	r4, r4, r5
 8008bba:	10a4      	asrs	r4, r4, #2
 8008bbc:	2600      	movs	r6, #0
 8008bbe:	42a6      	cmp	r6, r4
 8008bc0:	d105      	bne.n	8008bce <__libc_init_array+0x2e>
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc8:	4798      	blx	r3
 8008bca:	3601      	adds	r6, #1
 8008bcc:	e7ee      	b.n	8008bac <__libc_init_array+0xc>
 8008bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd2:	4798      	blx	r3
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	e7f2      	b.n	8008bbe <__libc_init_array+0x1e>
 8008bd8:	08009b6c 	.word	0x08009b6c
 8008bdc:	08009b6c 	.word	0x08009b6c
 8008be0:	08009b6c 	.word	0x08009b6c
 8008be4:	08009b70 	.word	0x08009b70

08008be8 <__retarget_lock_acquire_recursive>:
 8008be8:	4770      	bx	lr

08008bea <__retarget_lock_release_recursive>:
 8008bea:	4770      	bx	lr

08008bec <memcpy>:
 8008bec:	440a      	add	r2, r1
 8008bee:	4291      	cmp	r1, r2
 8008bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008bf4:	d100      	bne.n	8008bf8 <memcpy+0xc>
 8008bf6:	4770      	bx	lr
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c02:	4291      	cmp	r1, r2
 8008c04:	d1f9      	bne.n	8008bfa <memcpy+0xe>
 8008c06:	bd10      	pop	{r4, pc}

08008c08 <__ssputs_r>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	688e      	ldr	r6, [r1, #8]
 8008c0e:	461f      	mov	r7, r3
 8008c10:	42be      	cmp	r6, r7
 8008c12:	680b      	ldr	r3, [r1, #0]
 8008c14:	4682      	mov	sl, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	4690      	mov	r8, r2
 8008c1a:	d82c      	bhi.n	8008c76 <__ssputs_r+0x6e>
 8008c1c:	898a      	ldrh	r2, [r1, #12]
 8008c1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c22:	d026      	beq.n	8008c72 <__ssputs_r+0x6a>
 8008c24:	6965      	ldr	r5, [r4, #20]
 8008c26:	6909      	ldr	r1, [r1, #16]
 8008c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c2c:	eba3 0901 	sub.w	r9, r3, r1
 8008c30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c34:	1c7b      	adds	r3, r7, #1
 8008c36:	444b      	add	r3, r9
 8008c38:	106d      	asrs	r5, r5, #1
 8008c3a:	429d      	cmp	r5, r3
 8008c3c:	bf38      	it	cc
 8008c3e:	461d      	movcc	r5, r3
 8008c40:	0553      	lsls	r3, r2, #21
 8008c42:	d527      	bpl.n	8008c94 <__ssputs_r+0x8c>
 8008c44:	4629      	mov	r1, r5
 8008c46:	f000 f957 	bl	8008ef8 <_malloc_r>
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	b360      	cbz	r0, 8008ca8 <__ssputs_r+0xa0>
 8008c4e:	6921      	ldr	r1, [r4, #16]
 8008c50:	464a      	mov	r2, r9
 8008c52:	f7ff ffcb 	bl	8008bec <memcpy>
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	6126      	str	r6, [r4, #16]
 8008c64:	6165      	str	r5, [r4, #20]
 8008c66:	444e      	add	r6, r9
 8008c68:	eba5 0509 	sub.w	r5, r5, r9
 8008c6c:	6026      	str	r6, [r4, #0]
 8008c6e:	60a5      	str	r5, [r4, #8]
 8008c70:	463e      	mov	r6, r7
 8008c72:	42be      	cmp	r6, r7
 8008c74:	d900      	bls.n	8008c78 <__ssputs_r+0x70>
 8008c76:	463e      	mov	r6, r7
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	4632      	mov	r2, r6
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	f000 fb86 	bl	800938e <memmove>
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	1b9b      	subs	r3, r3, r6
 8008c86:	60a3      	str	r3, [r4, #8]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	4433      	add	r3, r6
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	462a      	mov	r2, r5
 8008c96:	f000 fb4b 	bl	8009330 <_realloc_r>
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d1e0      	bne.n	8008c62 <__ssputs_r+0x5a>
 8008ca0:	6921      	ldr	r1, [r4, #16]
 8008ca2:	4650      	mov	r0, sl
 8008ca4:	f000 fb9e 	bl	80093e4 <_free_r>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	f8ca 3000 	str.w	r3, [sl]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cba:	e7e9      	b.n	8008c90 <__ssputs_r+0x88>

08008cbc <_svfiprintf_r>:
 8008cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	4698      	mov	r8, r3
 8008cc2:	898b      	ldrh	r3, [r1, #12]
 8008cc4:	061b      	lsls	r3, r3, #24
 8008cc6:	b09d      	sub	sp, #116	; 0x74
 8008cc8:	4607      	mov	r7, r0
 8008cca:	460d      	mov	r5, r1
 8008ccc:	4614      	mov	r4, r2
 8008cce:	d50e      	bpl.n	8008cee <_svfiprintf_r+0x32>
 8008cd0:	690b      	ldr	r3, [r1, #16]
 8008cd2:	b963      	cbnz	r3, 8008cee <_svfiprintf_r+0x32>
 8008cd4:	2140      	movs	r1, #64	; 0x40
 8008cd6:	f000 f90f 	bl	8008ef8 <_malloc_r>
 8008cda:	6028      	str	r0, [r5, #0]
 8008cdc:	6128      	str	r0, [r5, #16]
 8008cde:	b920      	cbnz	r0, 8008cea <_svfiprintf_r+0x2e>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ce8:	e0d0      	b.n	8008e8c <_svfiprintf_r+0x1d0>
 8008cea:	2340      	movs	r3, #64	; 0x40
 8008cec:	616b      	str	r3, [r5, #20]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf2:	2320      	movs	r3, #32
 8008cf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cf8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cfc:	2330      	movs	r3, #48	; 0x30
 8008cfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008ea4 <_svfiprintf_r+0x1e8>
 8008d02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d06:	f04f 0901 	mov.w	r9, #1
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	469a      	mov	sl, r3
 8008d0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d12:	b10a      	cbz	r2, 8008d18 <_svfiprintf_r+0x5c>
 8008d14:	2a25      	cmp	r2, #37	; 0x25
 8008d16:	d1f9      	bne.n	8008d0c <_svfiprintf_r+0x50>
 8008d18:	ebba 0b04 	subs.w	fp, sl, r4
 8008d1c:	d00b      	beq.n	8008d36 <_svfiprintf_r+0x7a>
 8008d1e:	465b      	mov	r3, fp
 8008d20:	4622      	mov	r2, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff ff6f 	bl	8008c08 <__ssputs_r>
 8008d2a:	3001      	adds	r0, #1
 8008d2c:	f000 80a9 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d32:	445a      	add	r2, fp
 8008d34:	9209      	str	r2, [sp, #36]	; 0x24
 8008d36:	f89a 3000 	ldrb.w	r3, [sl]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 80a1 	beq.w	8008e82 <_svfiprintf_r+0x1c6>
 8008d40:	2300      	movs	r3, #0
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d4a:	f10a 0a01 	add.w	sl, sl, #1
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	9307      	str	r3, [sp, #28]
 8008d52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d56:	931a      	str	r3, [sp, #104]	; 0x68
 8008d58:	4654      	mov	r4, sl
 8008d5a:	2205      	movs	r2, #5
 8008d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d60:	4850      	ldr	r0, [pc, #320]	; (8008ea4 <_svfiprintf_r+0x1e8>)
 8008d62:	f7f7 fa0d 	bl	8000180 <memchr>
 8008d66:	9a04      	ldr	r2, [sp, #16]
 8008d68:	b9d8      	cbnz	r0, 8008da2 <_svfiprintf_r+0xe6>
 8008d6a:	06d0      	lsls	r0, r2, #27
 8008d6c:	bf44      	itt	mi
 8008d6e:	2320      	movmi	r3, #32
 8008d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d74:	0711      	lsls	r1, r2, #28
 8008d76:	bf44      	itt	mi
 8008d78:	232b      	movmi	r3, #43	; 0x2b
 8008d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d82:	2b2a      	cmp	r3, #42	; 0x2a
 8008d84:	d015      	beq.n	8008db2 <_svfiprintf_r+0xf6>
 8008d86:	9a07      	ldr	r2, [sp, #28]
 8008d88:	4654      	mov	r4, sl
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	f04f 0c0a 	mov.w	ip, #10
 8008d90:	4621      	mov	r1, r4
 8008d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d96:	3b30      	subs	r3, #48	; 0x30
 8008d98:	2b09      	cmp	r3, #9
 8008d9a:	d94d      	bls.n	8008e38 <_svfiprintf_r+0x17c>
 8008d9c:	b1b0      	cbz	r0, 8008dcc <_svfiprintf_r+0x110>
 8008d9e:	9207      	str	r2, [sp, #28]
 8008da0:	e014      	b.n	8008dcc <_svfiprintf_r+0x110>
 8008da2:	eba0 0308 	sub.w	r3, r0, r8
 8008da6:	fa09 f303 	lsl.w	r3, r9, r3
 8008daa:	4313      	orrs	r3, r2
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	46a2      	mov	sl, r4
 8008db0:	e7d2      	b.n	8008d58 <_svfiprintf_r+0x9c>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	1d19      	adds	r1, r3, #4
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	9103      	str	r1, [sp, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bfbb      	ittet	lt
 8008dbe:	425b      	neglt	r3, r3
 8008dc0:	f042 0202 	orrlt.w	r2, r2, #2
 8008dc4:	9307      	strge	r3, [sp, #28]
 8008dc6:	9307      	strlt	r3, [sp, #28]
 8008dc8:	bfb8      	it	lt
 8008dca:	9204      	strlt	r2, [sp, #16]
 8008dcc:	7823      	ldrb	r3, [r4, #0]
 8008dce:	2b2e      	cmp	r3, #46	; 0x2e
 8008dd0:	d10c      	bne.n	8008dec <_svfiprintf_r+0x130>
 8008dd2:	7863      	ldrb	r3, [r4, #1]
 8008dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd6:	d134      	bne.n	8008e42 <_svfiprintf_r+0x186>
 8008dd8:	9b03      	ldr	r3, [sp, #12]
 8008dda:	1d1a      	adds	r2, r3, #4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	9203      	str	r2, [sp, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bfb8      	it	lt
 8008de4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008de8:	3402      	adds	r4, #2
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008ea8 <_svfiprintf_r+0x1ec>
 8008df0:	7821      	ldrb	r1, [r4, #0]
 8008df2:	2203      	movs	r2, #3
 8008df4:	4650      	mov	r0, sl
 8008df6:	f7f7 f9c3 	bl	8000180 <memchr>
 8008dfa:	b138      	cbz	r0, 8008e0c <_svfiprintf_r+0x150>
 8008dfc:	9b04      	ldr	r3, [sp, #16]
 8008dfe:	eba0 000a 	sub.w	r0, r0, sl
 8008e02:	2240      	movs	r2, #64	; 0x40
 8008e04:	4082      	lsls	r2, r0
 8008e06:	4313      	orrs	r3, r2
 8008e08:	3401      	adds	r4, #1
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e10:	4826      	ldr	r0, [pc, #152]	; (8008eac <_svfiprintf_r+0x1f0>)
 8008e12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e16:	2206      	movs	r2, #6
 8008e18:	f7f7 f9b2 	bl	8000180 <memchr>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d038      	beq.n	8008e92 <_svfiprintf_r+0x1d6>
 8008e20:	4b23      	ldr	r3, [pc, #140]	; (8008eb0 <_svfiprintf_r+0x1f4>)
 8008e22:	bb1b      	cbnz	r3, 8008e6c <_svfiprintf_r+0x1b0>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	3307      	adds	r3, #7
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e32:	4433      	add	r3, r6
 8008e34:	9309      	str	r3, [sp, #36]	; 0x24
 8008e36:	e768      	b.n	8008d0a <_svfiprintf_r+0x4e>
 8008e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7a6      	b.n	8008d90 <_svfiprintf_r+0xd4>
 8008e42:	2300      	movs	r3, #0
 8008e44:	3401      	adds	r4, #1
 8008e46:	9305      	str	r3, [sp, #20]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f04f 0c0a 	mov.w	ip, #10
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e54:	3a30      	subs	r2, #48	; 0x30
 8008e56:	2a09      	cmp	r2, #9
 8008e58:	d903      	bls.n	8008e62 <_svfiprintf_r+0x1a6>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d0c6      	beq.n	8008dec <_svfiprintf_r+0x130>
 8008e5e:	9105      	str	r1, [sp, #20]
 8008e60:	e7c4      	b.n	8008dec <_svfiprintf_r+0x130>
 8008e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e66:	4604      	mov	r4, r0
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7f0      	b.n	8008e4e <_svfiprintf_r+0x192>
 8008e6c:	ab03      	add	r3, sp, #12
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4b10      	ldr	r3, [pc, #64]	; (8008eb4 <_svfiprintf_r+0x1f8>)
 8008e74:	a904      	add	r1, sp, #16
 8008e76:	4638      	mov	r0, r7
 8008e78:	f3af 8000 	nop.w
 8008e7c:	1c42      	adds	r2, r0, #1
 8008e7e:	4606      	mov	r6, r0
 8008e80:	d1d6      	bne.n	8008e30 <_svfiprintf_r+0x174>
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	065b      	lsls	r3, r3, #25
 8008e86:	f53f af2d 	bmi.w	8008ce4 <_svfiprintf_r+0x28>
 8008e8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e8c:	b01d      	add	sp, #116	; 0x74
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <_svfiprintf_r+0x1f8>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f000 f919 	bl	80090d4 <_printf_i>
 8008ea2:	e7eb      	b.n	8008e7c <_svfiprintf_r+0x1c0>
 8008ea4:	08009b30 	.word	0x08009b30
 8008ea8:	08009b36 	.word	0x08009b36
 8008eac:	08009b3a 	.word	0x08009b3a
 8008eb0:	00000000 	.word	0x00000000
 8008eb4:	08008c09 	.word	0x08008c09

08008eb8 <sbrk_aligned>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4e0e      	ldr	r6, [pc, #56]	; (8008ef4 <sbrk_aligned+0x3c>)
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	6831      	ldr	r1, [r6, #0]
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	b911      	cbnz	r1, 8008eca <sbrk_aligned+0x12>
 8008ec4:	f000 fa7e 	bl	80093c4 <_sbrk_r>
 8008ec8:	6030      	str	r0, [r6, #0]
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f000 fa79 	bl	80093c4 <_sbrk_r>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d00a      	beq.n	8008eec <sbrk_aligned+0x34>
 8008ed6:	1cc4      	adds	r4, r0, #3
 8008ed8:	f024 0403 	bic.w	r4, r4, #3
 8008edc:	42a0      	cmp	r0, r4
 8008ede:	d007      	beq.n	8008ef0 <sbrk_aligned+0x38>
 8008ee0:	1a21      	subs	r1, r4, r0
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f000 fa6e 	bl	80093c4 <_sbrk_r>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d101      	bne.n	8008ef0 <sbrk_aligned+0x38>
 8008eec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	20000584 	.word	0x20000584

08008ef8 <_malloc_r>:
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	1ccd      	adds	r5, r1, #3
 8008efe:	f025 0503 	bic.w	r5, r5, #3
 8008f02:	3508      	adds	r5, #8
 8008f04:	2d0c      	cmp	r5, #12
 8008f06:	bf38      	it	cc
 8008f08:	250c      	movcc	r5, #12
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	4607      	mov	r7, r0
 8008f0e:	db01      	blt.n	8008f14 <_malloc_r+0x1c>
 8008f10:	42a9      	cmp	r1, r5
 8008f12:	d905      	bls.n	8008f20 <_malloc_r+0x28>
 8008f14:	230c      	movs	r3, #12
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	2600      	movs	r6, #0
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ff4 <_malloc_r+0xfc>
 8008f24:	f000 f9f8 	bl	8009318 <__malloc_lock>
 8008f28:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2c:	461c      	mov	r4, r3
 8008f2e:	bb5c      	cbnz	r4, 8008f88 <_malloc_r+0x90>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4638      	mov	r0, r7
 8008f34:	f7ff ffc0 	bl	8008eb8 <sbrk_aligned>
 8008f38:	1c43      	adds	r3, r0, #1
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	d155      	bne.n	8008fea <_malloc_r+0xf2>
 8008f3e:	f8d8 4000 	ldr.w	r4, [r8]
 8008f42:	4626      	mov	r6, r4
 8008f44:	2e00      	cmp	r6, #0
 8008f46:	d145      	bne.n	8008fd4 <_malloc_r+0xdc>
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d048      	beq.n	8008fde <_malloc_r+0xe6>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4638      	mov	r0, r7
 8008f52:	eb04 0903 	add.w	r9, r4, r3
 8008f56:	f000 fa35 	bl	80093c4 <_sbrk_r>
 8008f5a:	4581      	cmp	r9, r0
 8008f5c:	d13f      	bne.n	8008fde <_malloc_r+0xe6>
 8008f5e:	6821      	ldr	r1, [r4, #0]
 8008f60:	1a6d      	subs	r5, r5, r1
 8008f62:	4629      	mov	r1, r5
 8008f64:	4638      	mov	r0, r7
 8008f66:	f7ff ffa7 	bl	8008eb8 <sbrk_aligned>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d037      	beq.n	8008fde <_malloc_r+0xe6>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	442b      	add	r3, r5
 8008f72:	6023      	str	r3, [r4, #0]
 8008f74:	f8d8 3000 	ldr.w	r3, [r8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d038      	beq.n	8008fee <_malloc_r+0xf6>
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	42a2      	cmp	r2, r4
 8008f80:	d12b      	bne.n	8008fda <_malloc_r+0xe2>
 8008f82:	2200      	movs	r2, #0
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	e00f      	b.n	8008fa8 <_malloc_r+0xb0>
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	1b52      	subs	r2, r2, r5
 8008f8c:	d41f      	bmi.n	8008fce <_malloc_r+0xd6>
 8008f8e:	2a0b      	cmp	r2, #11
 8008f90:	d917      	bls.n	8008fc2 <_malloc_r+0xca>
 8008f92:	1961      	adds	r1, r4, r5
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	6059      	strne	r1, [r3, #4]
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	bf08      	it	eq
 8008fa0:	f8c8 1000 	streq.w	r1, [r8]
 8008fa4:	5162      	str	r2, [r4, r5]
 8008fa6:	604b      	str	r3, [r1, #4]
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f104 060b 	add.w	r6, r4, #11
 8008fae:	f000 f9b9 	bl	8009324 <__malloc_unlock>
 8008fb2:	f026 0607 	bic.w	r6, r6, #7
 8008fb6:	1d23      	adds	r3, r4, #4
 8008fb8:	1af2      	subs	r2, r6, r3
 8008fba:	d0ae      	beq.n	8008f1a <_malloc_r+0x22>
 8008fbc:	1b9b      	subs	r3, r3, r6
 8008fbe:	50a3      	str	r3, [r4, r2]
 8008fc0:	e7ab      	b.n	8008f1a <_malloc_r+0x22>
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6862      	ldr	r2, [r4, #4]
 8008fc6:	d1dd      	bne.n	8008f84 <_malloc_r+0x8c>
 8008fc8:	f8c8 2000 	str.w	r2, [r8]
 8008fcc:	e7ec      	b.n	8008fa8 <_malloc_r+0xb0>
 8008fce:	4623      	mov	r3, r4
 8008fd0:	6864      	ldr	r4, [r4, #4]
 8008fd2:	e7ac      	b.n	8008f2e <_malloc_r+0x36>
 8008fd4:	4634      	mov	r4, r6
 8008fd6:	6876      	ldr	r6, [r6, #4]
 8008fd8:	e7b4      	b.n	8008f44 <_malloc_r+0x4c>
 8008fda:	4613      	mov	r3, r2
 8008fdc:	e7cc      	b.n	8008f78 <_malloc_r+0x80>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	603b      	str	r3, [r7, #0]
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f000 f99e 	bl	8009324 <__malloc_unlock>
 8008fe8:	e797      	b.n	8008f1a <_malloc_r+0x22>
 8008fea:	6025      	str	r5, [r4, #0]
 8008fec:	e7dc      	b.n	8008fa8 <_malloc_r+0xb0>
 8008fee:	605b      	str	r3, [r3, #4]
 8008ff0:	deff      	udf	#255	; 0xff
 8008ff2:	bf00      	nop
 8008ff4:	20000580 	.word	0x20000580

08008ff8 <_printf_common>:
 8008ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	4699      	mov	r9, r3
 8009000:	688a      	ldr	r2, [r1, #8]
 8009002:	690b      	ldr	r3, [r1, #16]
 8009004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009008:	4293      	cmp	r3, r2
 800900a:	bfb8      	it	lt
 800900c:	4613      	movlt	r3, r2
 800900e:	6033      	str	r3, [r6, #0]
 8009010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009014:	4607      	mov	r7, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b10a      	cbz	r2, 800901e <_printf_common+0x26>
 800901a:	3301      	adds	r3, #1
 800901c:	6033      	str	r3, [r6, #0]
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	0699      	lsls	r1, r3, #26
 8009022:	bf42      	ittt	mi
 8009024:	6833      	ldrmi	r3, [r6, #0]
 8009026:	3302      	addmi	r3, #2
 8009028:	6033      	strmi	r3, [r6, #0]
 800902a:	6825      	ldr	r5, [r4, #0]
 800902c:	f015 0506 	ands.w	r5, r5, #6
 8009030:	d106      	bne.n	8009040 <_printf_common+0x48>
 8009032:	f104 0a19 	add.w	sl, r4, #25
 8009036:	68e3      	ldr	r3, [r4, #12]
 8009038:	6832      	ldr	r2, [r6, #0]
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	42ab      	cmp	r3, r5
 800903e:	dc26      	bgt.n	800908e <_printf_common+0x96>
 8009040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009044:	1e13      	subs	r3, r2, #0
 8009046:	6822      	ldr	r2, [r4, #0]
 8009048:	bf18      	it	ne
 800904a:	2301      	movne	r3, #1
 800904c:	0692      	lsls	r2, r2, #26
 800904e:	d42b      	bmi.n	80090a8 <_printf_common+0xb0>
 8009050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009054:	4649      	mov	r1, r9
 8009056:	4638      	mov	r0, r7
 8009058:	47c0      	blx	r8
 800905a:	3001      	adds	r0, #1
 800905c:	d01e      	beq.n	800909c <_printf_common+0xa4>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	6922      	ldr	r2, [r4, #16]
 8009062:	f003 0306 	and.w	r3, r3, #6
 8009066:	2b04      	cmp	r3, #4
 8009068:	bf02      	ittt	eq
 800906a:	68e5      	ldreq	r5, [r4, #12]
 800906c:	6833      	ldreq	r3, [r6, #0]
 800906e:	1aed      	subeq	r5, r5, r3
 8009070:	68a3      	ldr	r3, [r4, #8]
 8009072:	bf0c      	ite	eq
 8009074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009078:	2500      	movne	r5, #0
 800907a:	4293      	cmp	r3, r2
 800907c:	bfc4      	itt	gt
 800907e:	1a9b      	subgt	r3, r3, r2
 8009080:	18ed      	addgt	r5, r5, r3
 8009082:	2600      	movs	r6, #0
 8009084:	341a      	adds	r4, #26
 8009086:	42b5      	cmp	r5, r6
 8009088:	d11a      	bne.n	80090c0 <_printf_common+0xc8>
 800908a:	2000      	movs	r0, #0
 800908c:	e008      	b.n	80090a0 <_printf_common+0xa8>
 800908e:	2301      	movs	r3, #1
 8009090:	4652      	mov	r2, sl
 8009092:	4649      	mov	r1, r9
 8009094:	4638      	mov	r0, r7
 8009096:	47c0      	blx	r8
 8009098:	3001      	adds	r0, #1
 800909a:	d103      	bne.n	80090a4 <_printf_common+0xac>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a4:	3501      	adds	r5, #1
 80090a6:	e7c6      	b.n	8009036 <_printf_common+0x3e>
 80090a8:	18e1      	adds	r1, r4, r3
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	2030      	movs	r0, #48	; 0x30
 80090ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090b2:	4422      	add	r2, r4
 80090b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090bc:	3302      	adds	r3, #2
 80090be:	e7c7      	b.n	8009050 <_printf_common+0x58>
 80090c0:	2301      	movs	r3, #1
 80090c2:	4622      	mov	r2, r4
 80090c4:	4649      	mov	r1, r9
 80090c6:	4638      	mov	r0, r7
 80090c8:	47c0      	blx	r8
 80090ca:	3001      	adds	r0, #1
 80090cc:	d0e6      	beq.n	800909c <_printf_common+0xa4>
 80090ce:	3601      	adds	r6, #1
 80090d0:	e7d9      	b.n	8009086 <_printf_common+0x8e>
	...

080090d4 <_printf_i>:
 80090d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	7e0f      	ldrb	r7, [r1, #24]
 80090da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090dc:	2f78      	cmp	r7, #120	; 0x78
 80090de:	4691      	mov	r9, r2
 80090e0:	4680      	mov	r8, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	469a      	mov	sl, r3
 80090e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090ea:	d807      	bhi.n	80090fc <_printf_i+0x28>
 80090ec:	2f62      	cmp	r7, #98	; 0x62
 80090ee:	d80a      	bhi.n	8009106 <_printf_i+0x32>
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	f000 80d4 	beq.w	800929e <_printf_i+0x1ca>
 80090f6:	2f58      	cmp	r7, #88	; 0x58
 80090f8:	f000 80c0 	beq.w	800927c <_printf_i+0x1a8>
 80090fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009104:	e03a      	b.n	800917c <_printf_i+0xa8>
 8009106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800910a:	2b15      	cmp	r3, #21
 800910c:	d8f6      	bhi.n	80090fc <_printf_i+0x28>
 800910e:	a101      	add	r1, pc, #4	; (adr r1, 8009114 <_printf_i+0x40>)
 8009110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009114:	0800916d 	.word	0x0800916d
 8009118:	08009181 	.word	0x08009181
 800911c:	080090fd 	.word	0x080090fd
 8009120:	080090fd 	.word	0x080090fd
 8009124:	080090fd 	.word	0x080090fd
 8009128:	080090fd 	.word	0x080090fd
 800912c:	08009181 	.word	0x08009181
 8009130:	080090fd 	.word	0x080090fd
 8009134:	080090fd 	.word	0x080090fd
 8009138:	080090fd 	.word	0x080090fd
 800913c:	080090fd 	.word	0x080090fd
 8009140:	08009285 	.word	0x08009285
 8009144:	080091ad 	.word	0x080091ad
 8009148:	0800923f 	.word	0x0800923f
 800914c:	080090fd 	.word	0x080090fd
 8009150:	080090fd 	.word	0x080090fd
 8009154:	080092a7 	.word	0x080092a7
 8009158:	080090fd 	.word	0x080090fd
 800915c:	080091ad 	.word	0x080091ad
 8009160:	080090fd 	.word	0x080090fd
 8009164:	080090fd 	.word	0x080090fd
 8009168:	08009247 	.word	0x08009247
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800917c:	2301      	movs	r3, #1
 800917e:	e09f      	b.n	80092c0 <_printf_i+0x1ec>
 8009180:	6820      	ldr	r0, [r4, #0]
 8009182:	682b      	ldr	r3, [r5, #0]
 8009184:	0607      	lsls	r7, r0, #24
 8009186:	f103 0104 	add.w	r1, r3, #4
 800918a:	6029      	str	r1, [r5, #0]
 800918c:	d501      	bpl.n	8009192 <_printf_i+0xbe>
 800918e:	681e      	ldr	r6, [r3, #0]
 8009190:	e003      	b.n	800919a <_printf_i+0xc6>
 8009192:	0646      	lsls	r6, r0, #25
 8009194:	d5fb      	bpl.n	800918e <_printf_i+0xba>
 8009196:	f9b3 6000 	ldrsh.w	r6, [r3]
 800919a:	2e00      	cmp	r6, #0
 800919c:	da03      	bge.n	80091a6 <_printf_i+0xd2>
 800919e:	232d      	movs	r3, #45	; 0x2d
 80091a0:	4276      	negs	r6, r6
 80091a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091a6:	485a      	ldr	r0, [pc, #360]	; (8009310 <_printf_i+0x23c>)
 80091a8:	230a      	movs	r3, #10
 80091aa:	e012      	b.n	80091d2 <_printf_i+0xfe>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	6820      	ldr	r0, [r4, #0]
 80091b0:	1d19      	adds	r1, r3, #4
 80091b2:	6029      	str	r1, [r5, #0]
 80091b4:	0605      	lsls	r5, r0, #24
 80091b6:	d501      	bpl.n	80091bc <_printf_i+0xe8>
 80091b8:	681e      	ldr	r6, [r3, #0]
 80091ba:	e002      	b.n	80091c2 <_printf_i+0xee>
 80091bc:	0641      	lsls	r1, r0, #25
 80091be:	d5fb      	bpl.n	80091b8 <_printf_i+0xe4>
 80091c0:	881e      	ldrh	r6, [r3, #0]
 80091c2:	4853      	ldr	r0, [pc, #332]	; (8009310 <_printf_i+0x23c>)
 80091c4:	2f6f      	cmp	r7, #111	; 0x6f
 80091c6:	bf0c      	ite	eq
 80091c8:	2308      	moveq	r3, #8
 80091ca:	230a      	movne	r3, #10
 80091cc:	2100      	movs	r1, #0
 80091ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091d2:	6865      	ldr	r5, [r4, #4]
 80091d4:	60a5      	str	r5, [r4, #8]
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	bfa2      	ittt	ge
 80091da:	6821      	ldrge	r1, [r4, #0]
 80091dc:	f021 0104 	bicge.w	r1, r1, #4
 80091e0:	6021      	strge	r1, [r4, #0]
 80091e2:	b90e      	cbnz	r6, 80091e8 <_printf_i+0x114>
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	d04b      	beq.n	8009280 <_printf_i+0x1ac>
 80091e8:	4615      	mov	r5, r2
 80091ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80091ee:	fb03 6711 	mls	r7, r3, r1, r6
 80091f2:	5dc7      	ldrb	r7, [r0, r7]
 80091f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091f8:	4637      	mov	r7, r6
 80091fa:	42bb      	cmp	r3, r7
 80091fc:	460e      	mov	r6, r1
 80091fe:	d9f4      	bls.n	80091ea <_printf_i+0x116>
 8009200:	2b08      	cmp	r3, #8
 8009202:	d10b      	bne.n	800921c <_printf_i+0x148>
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	07de      	lsls	r6, r3, #31
 8009208:	d508      	bpl.n	800921c <_printf_i+0x148>
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	6861      	ldr	r1, [r4, #4]
 800920e:	4299      	cmp	r1, r3
 8009210:	bfde      	ittt	le
 8009212:	2330      	movle	r3, #48	; 0x30
 8009214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009218:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800921c:	1b52      	subs	r2, r2, r5
 800921e:	6122      	str	r2, [r4, #16]
 8009220:	f8cd a000 	str.w	sl, [sp]
 8009224:	464b      	mov	r3, r9
 8009226:	aa03      	add	r2, sp, #12
 8009228:	4621      	mov	r1, r4
 800922a:	4640      	mov	r0, r8
 800922c:	f7ff fee4 	bl	8008ff8 <_printf_common>
 8009230:	3001      	adds	r0, #1
 8009232:	d14a      	bne.n	80092ca <_printf_i+0x1f6>
 8009234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009238:	b004      	add	sp, #16
 800923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	f043 0320 	orr.w	r3, r3, #32
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	4833      	ldr	r0, [pc, #204]	; (8009314 <_printf_i+0x240>)
 8009248:	2778      	movs	r7, #120	; 0x78
 800924a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	6829      	ldr	r1, [r5, #0]
 8009252:	061f      	lsls	r7, r3, #24
 8009254:	f851 6b04 	ldr.w	r6, [r1], #4
 8009258:	d402      	bmi.n	8009260 <_printf_i+0x18c>
 800925a:	065f      	lsls	r7, r3, #25
 800925c:	bf48      	it	mi
 800925e:	b2b6      	uxthmi	r6, r6
 8009260:	07df      	lsls	r7, r3, #31
 8009262:	bf48      	it	mi
 8009264:	f043 0320 	orrmi.w	r3, r3, #32
 8009268:	6029      	str	r1, [r5, #0]
 800926a:	bf48      	it	mi
 800926c:	6023      	strmi	r3, [r4, #0]
 800926e:	b91e      	cbnz	r6, 8009278 <_printf_i+0x1a4>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	f023 0320 	bic.w	r3, r3, #32
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	2310      	movs	r3, #16
 800927a:	e7a7      	b.n	80091cc <_printf_i+0xf8>
 800927c:	4824      	ldr	r0, [pc, #144]	; (8009310 <_printf_i+0x23c>)
 800927e:	e7e4      	b.n	800924a <_printf_i+0x176>
 8009280:	4615      	mov	r5, r2
 8009282:	e7bd      	b.n	8009200 <_printf_i+0x12c>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	6826      	ldr	r6, [r4, #0]
 8009288:	6961      	ldr	r1, [r4, #20]
 800928a:	1d18      	adds	r0, r3, #4
 800928c:	6028      	str	r0, [r5, #0]
 800928e:	0635      	lsls	r5, r6, #24
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	d501      	bpl.n	8009298 <_printf_i+0x1c4>
 8009294:	6019      	str	r1, [r3, #0]
 8009296:	e002      	b.n	800929e <_printf_i+0x1ca>
 8009298:	0670      	lsls	r0, r6, #25
 800929a:	d5fb      	bpl.n	8009294 <_printf_i+0x1c0>
 800929c:	8019      	strh	r1, [r3, #0]
 800929e:	2300      	movs	r3, #0
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	4615      	mov	r5, r2
 80092a4:	e7bc      	b.n	8009220 <_printf_i+0x14c>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	1d1a      	adds	r2, r3, #4
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	681d      	ldr	r5, [r3, #0]
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	2100      	movs	r1, #0
 80092b2:	4628      	mov	r0, r5
 80092b4:	f7f6 ff64 	bl	8000180 <memchr>
 80092b8:	b108      	cbz	r0, 80092be <_printf_i+0x1ea>
 80092ba:	1b40      	subs	r0, r0, r5
 80092bc:	6060      	str	r0, [r4, #4]
 80092be:	6863      	ldr	r3, [r4, #4]
 80092c0:	6123      	str	r3, [r4, #16]
 80092c2:	2300      	movs	r3, #0
 80092c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c8:	e7aa      	b.n	8009220 <_printf_i+0x14c>
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	462a      	mov	r2, r5
 80092ce:	4649      	mov	r1, r9
 80092d0:	4640      	mov	r0, r8
 80092d2:	47d0      	blx	sl
 80092d4:	3001      	adds	r0, #1
 80092d6:	d0ad      	beq.n	8009234 <_printf_i+0x160>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	079b      	lsls	r3, r3, #30
 80092dc:	d413      	bmi.n	8009306 <_printf_i+0x232>
 80092de:	68e0      	ldr	r0, [r4, #12]
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	4298      	cmp	r0, r3
 80092e4:	bfb8      	it	lt
 80092e6:	4618      	movlt	r0, r3
 80092e8:	e7a6      	b.n	8009238 <_printf_i+0x164>
 80092ea:	2301      	movs	r3, #1
 80092ec:	4632      	mov	r2, r6
 80092ee:	4649      	mov	r1, r9
 80092f0:	4640      	mov	r0, r8
 80092f2:	47d0      	blx	sl
 80092f4:	3001      	adds	r0, #1
 80092f6:	d09d      	beq.n	8009234 <_printf_i+0x160>
 80092f8:	3501      	adds	r5, #1
 80092fa:	68e3      	ldr	r3, [r4, #12]
 80092fc:	9903      	ldr	r1, [sp, #12]
 80092fe:	1a5b      	subs	r3, r3, r1
 8009300:	42ab      	cmp	r3, r5
 8009302:	dcf2      	bgt.n	80092ea <_printf_i+0x216>
 8009304:	e7eb      	b.n	80092de <_printf_i+0x20a>
 8009306:	2500      	movs	r5, #0
 8009308:	f104 0619 	add.w	r6, r4, #25
 800930c:	e7f5      	b.n	80092fa <_printf_i+0x226>
 800930e:	bf00      	nop
 8009310:	08009b41 	.word	0x08009b41
 8009314:	08009b52 	.word	0x08009b52

08009318 <__malloc_lock>:
 8009318:	4801      	ldr	r0, [pc, #4]	; (8009320 <__malloc_lock+0x8>)
 800931a:	f7ff bc65 	b.w	8008be8 <__retarget_lock_acquire_recursive>
 800931e:	bf00      	nop
 8009320:	2000057c 	.word	0x2000057c

08009324 <__malloc_unlock>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__malloc_unlock+0x8>)
 8009326:	f7ff bc60 	b.w	8008bea <__retarget_lock_release_recursive>
 800932a:	bf00      	nop
 800932c:	2000057c 	.word	0x2000057c

08009330 <_realloc_r>:
 8009330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	4680      	mov	r8, r0
 8009336:	4614      	mov	r4, r2
 8009338:	460e      	mov	r6, r1
 800933a:	b921      	cbnz	r1, 8009346 <_realloc_r+0x16>
 800933c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	4611      	mov	r1, r2
 8009342:	f7ff bdd9 	b.w	8008ef8 <_malloc_r>
 8009346:	b92a      	cbnz	r2, 8009354 <_realloc_r+0x24>
 8009348:	f000 f84c 	bl	80093e4 <_free_r>
 800934c:	4625      	mov	r5, r4
 800934e:	4628      	mov	r0, r5
 8009350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009354:	f000 f890 	bl	8009478 <_malloc_usable_size_r>
 8009358:	4284      	cmp	r4, r0
 800935a:	4607      	mov	r7, r0
 800935c:	d802      	bhi.n	8009364 <_realloc_r+0x34>
 800935e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009362:	d812      	bhi.n	800938a <_realloc_r+0x5a>
 8009364:	4621      	mov	r1, r4
 8009366:	4640      	mov	r0, r8
 8009368:	f7ff fdc6 	bl	8008ef8 <_malloc_r>
 800936c:	4605      	mov	r5, r0
 800936e:	2800      	cmp	r0, #0
 8009370:	d0ed      	beq.n	800934e <_realloc_r+0x1e>
 8009372:	42bc      	cmp	r4, r7
 8009374:	4622      	mov	r2, r4
 8009376:	4631      	mov	r1, r6
 8009378:	bf28      	it	cs
 800937a:	463a      	movcs	r2, r7
 800937c:	f7ff fc36 	bl	8008bec <memcpy>
 8009380:	4631      	mov	r1, r6
 8009382:	4640      	mov	r0, r8
 8009384:	f000 f82e 	bl	80093e4 <_free_r>
 8009388:	e7e1      	b.n	800934e <_realloc_r+0x1e>
 800938a:	4635      	mov	r5, r6
 800938c:	e7df      	b.n	800934e <_realloc_r+0x1e>

0800938e <memmove>:
 800938e:	4288      	cmp	r0, r1
 8009390:	b510      	push	{r4, lr}
 8009392:	eb01 0402 	add.w	r4, r1, r2
 8009396:	d902      	bls.n	800939e <memmove+0x10>
 8009398:	4284      	cmp	r4, r0
 800939a:	4623      	mov	r3, r4
 800939c:	d807      	bhi.n	80093ae <memmove+0x20>
 800939e:	1e43      	subs	r3, r0, #1
 80093a0:	42a1      	cmp	r1, r4
 80093a2:	d008      	beq.n	80093b6 <memmove+0x28>
 80093a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ac:	e7f8      	b.n	80093a0 <memmove+0x12>
 80093ae:	4402      	add	r2, r0
 80093b0:	4601      	mov	r1, r0
 80093b2:	428a      	cmp	r2, r1
 80093b4:	d100      	bne.n	80093b8 <memmove+0x2a>
 80093b6:	bd10      	pop	{r4, pc}
 80093b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093c0:	e7f7      	b.n	80093b2 <memmove+0x24>
	...

080093c4 <_sbrk_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d06      	ldr	r5, [pc, #24]	; (80093e0 <_sbrk_r+0x1c>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4604      	mov	r4, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	f7f7 ffcc 	bl	800136c <_sbrk>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_sbrk_r+0x1a>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b103      	cbz	r3, 80093de <_sbrk_r+0x1a>
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20000588 	.word	0x20000588

080093e4 <_free_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4605      	mov	r5, r0
 80093e8:	2900      	cmp	r1, #0
 80093ea:	d041      	beq.n	8009470 <_free_r+0x8c>
 80093ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f0:	1f0c      	subs	r4, r1, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	bfb8      	it	lt
 80093f6:	18e4      	addlt	r4, r4, r3
 80093f8:	f7ff ff8e 	bl	8009318 <__malloc_lock>
 80093fc:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <_free_r+0x90>)
 80093fe:	6813      	ldr	r3, [r2, #0]
 8009400:	b933      	cbnz	r3, 8009410 <_free_r+0x2c>
 8009402:	6063      	str	r3, [r4, #4]
 8009404:	6014      	str	r4, [r2, #0]
 8009406:	4628      	mov	r0, r5
 8009408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800940c:	f7ff bf8a 	b.w	8009324 <__malloc_unlock>
 8009410:	42a3      	cmp	r3, r4
 8009412:	d908      	bls.n	8009426 <_free_r+0x42>
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	1821      	adds	r1, r4, r0
 8009418:	428b      	cmp	r3, r1
 800941a:	bf01      	itttt	eq
 800941c:	6819      	ldreq	r1, [r3, #0]
 800941e:	685b      	ldreq	r3, [r3, #4]
 8009420:	1809      	addeq	r1, r1, r0
 8009422:	6021      	streq	r1, [r4, #0]
 8009424:	e7ed      	b.n	8009402 <_free_r+0x1e>
 8009426:	461a      	mov	r2, r3
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	b10b      	cbz	r3, 8009430 <_free_r+0x4c>
 800942c:	42a3      	cmp	r3, r4
 800942e:	d9fa      	bls.n	8009426 <_free_r+0x42>
 8009430:	6811      	ldr	r1, [r2, #0]
 8009432:	1850      	adds	r0, r2, r1
 8009434:	42a0      	cmp	r0, r4
 8009436:	d10b      	bne.n	8009450 <_free_r+0x6c>
 8009438:	6820      	ldr	r0, [r4, #0]
 800943a:	4401      	add	r1, r0
 800943c:	1850      	adds	r0, r2, r1
 800943e:	4283      	cmp	r3, r0
 8009440:	6011      	str	r1, [r2, #0]
 8009442:	d1e0      	bne.n	8009406 <_free_r+0x22>
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	6053      	str	r3, [r2, #4]
 800944a:	4408      	add	r0, r1
 800944c:	6010      	str	r0, [r2, #0]
 800944e:	e7da      	b.n	8009406 <_free_r+0x22>
 8009450:	d902      	bls.n	8009458 <_free_r+0x74>
 8009452:	230c      	movs	r3, #12
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	e7d6      	b.n	8009406 <_free_r+0x22>
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	1821      	adds	r1, r4, r0
 800945c:	428b      	cmp	r3, r1
 800945e:	bf04      	itt	eq
 8009460:	6819      	ldreq	r1, [r3, #0]
 8009462:	685b      	ldreq	r3, [r3, #4]
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	bf04      	itt	eq
 8009468:	1809      	addeq	r1, r1, r0
 800946a:	6021      	streq	r1, [r4, #0]
 800946c:	6054      	str	r4, [r2, #4]
 800946e:	e7ca      	b.n	8009406 <_free_r+0x22>
 8009470:	bd38      	pop	{r3, r4, r5, pc}
 8009472:	bf00      	nop
 8009474:	20000580 	.word	0x20000580

08009478 <_malloc_usable_size_r>:
 8009478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800947c:	1f18      	subs	r0, r3, #4
 800947e:	2b00      	cmp	r3, #0
 8009480:	bfbc      	itt	lt
 8009482:	580b      	ldrlt	r3, [r1, r0]
 8009484:	18c0      	addlt	r0, r0, r3
 8009486:	4770      	bx	lr

08009488 <_init>:
 8009488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948a:	bf00      	nop
 800948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800948e:	bc08      	pop	{r3}
 8009490:	469e      	mov	lr, r3
 8009492:	4770      	bx	lr

08009494 <_fini>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	bf00      	nop
 8009498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949a:	bc08      	pop	{r3}
 800949c:	469e      	mov	lr, r3
 800949e:	4770      	bx	lr
